// ==UserScript==
// @name STRmods ESGST
// @namespace STRmods ESGST
// @description EZPZ MODE WITH ENTER BUTTON AS IT SHOULD BE, FUKING REKT M9
// @icon https://raw.githubusercontent.com/gimmedemmaps/keks/master/strmods.ico
// @version 69 action Beta v69.911
// @author STRmods and ma boi revilheart
// @downloadURL https://raw.githubusercontent.com/gimmedemmaps/keks/master/STRmods-ESGST.user.js
// @updateURL https://raw.githubusercontent.com/gimmedemmaps/keks/master/STRmods-ESGST.meta.js
// @match https://www.steamgifts.com/*
// @match https://www.steamtrades.com/*
// @match http://store.steampowered.com/*
// @match https://store.steampowered.com/*
// @connect raw.githubusercontent.com
// @connect api.steampowered.com
// @connect store.steampowered.com
// @connect script.google.com
// @connect script.googleusercontent.com
// @connect sgtools.info
// @connect steamcommunity.com
// @connect steamgifts.com
// @connect steamtrades.com
// @connect isthereanydeal.com
// @grant GM_addStyle
// @grant GM_setValue
// @grant GM_getValue
// @grant GM_deleteValue
// @grant GM_listValues
// @grant GM_getResourceText
// @grant GM_getResourceURL
// @grant GM_xmlhttpRequest
// @grant GM_info
// @require https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js
// @require https://ajax.googleapis.com/ajax/libs/jqueryui/1.12.1/jquery-ui.min.js
// @require https://cdn.steamgifts.com/js/highcharts.js
// @require https://github.com/dinbror/bpopup/raw/master/jquery.bpopup.min.js
// @resource esgstIcon https://raw.githubusercontent.com/gimmedemmaps/keks/master/strmods.ico
// @resource sgIcon https://raw.githubusercontent.com/gimmedemmaps/keks/master/strmods.ico
// @resource stIcon https://raw.githubusercontent.com/gimmedemmaps/keks/master/strmods.ico
// @noframes
// ==/UserScript==

(function () {

    var DOM, esgst;
    loadEsgst();

    function parseHtml(string) {
        return DOM.parser.parseFromString(string, `text/html`);
    }

    function loadEsgst() {
        var style;
        DOM = {
            parse: parseHtml,
            parser: new DOMParser()
        };
        esgst = {};
        esgst.settings = JSON.parse(GM_getValue(`settings`, `{}`) || `{}`);
        esgst.sg = window.location.hostname.match(/www.steamgifts.com/);
        esgst.st = window.location.hostname.match(/www.steamtrades.com/);
        esgst.steam = window.location.hostname.match(/store.steampowered.com/);
        var syncPath = window.location.pathname.match(/esgst-sync/);
        var logoutButton = document.getElementsByClassName(esgst.sg ? "js__logout" : "js_logout")[0];
        if (syncPath) {
            setSync();
        } else if (logoutButton) {
            if (esgst.sg || (esgst.st && esgst.settings.esgst_st)) {
                // User is logged in.
                if (esgst.sg || esgst.st) {
                    updateTemplateStorageToV6();
                    updateUserStorageToV6();
                    updateGameStorageToV6();
                    updateCommentHistoryStorageToV6();
                    updateCommentStorageToV6();
                    if (window.location.pathname.match(/^\/discussion\/TDyzv\//)) {
                        if (document.querySelector(`[href*="ESGST-currentVersion"]`).getAttribute(`href`).match(/currentVersion-(.+)/)[1] !== GM_info.script.version) {
                            createAlert(`You are not using the latest ESGST version. Please update before reporting any bugs and make sure the bugs still exist in the latest version.`);
                        }
                    }
                    style = `
                        .esgst-progress-bar {
                            height: 10px;
                            overflow: hidden;
                            text-align: left;
                        }
                        .esgst-progress-bar .ui-progressbar-value {
                            background-color: #96c468;
	                        height: 100%;
	                        margin: -1px;
                        }
                    `;
                    if (esgst.sg) {
                        esgst.pageOuterWrapClass = `page__outer-wrap`;
                        esgst.pageHeadingClass = `page__heading`;
                        esgst.pageHeadingBreadcrumbsClass = `page__heading__breadcrumbs`;
                        esgst.footer = document.getElementsByClassName(`footer__outer-wrap`)[0];
                        esgst.replyBox = document.getElementsByClassName(`comment--submit`)[0];
                        esgst.cancelButtonClass = `comment__cancel-button`;
                        esgst.paginationNavigationClass = `pagination__navigation`;
                        esgst.hiddenClass = `is-hidden`;
                        esgst.name = `sg`;
                        esgst.selectedClass = `is-selected`;
                        style += `
                            .esgst-header-menu {
                                box-shadow: 1px 1px 1px rgba(255, 255, 255, 0.07) inset, 1px 1px 0 rgba(255, 255, 255, 0.02) inset;
                                background-image: linear-gradient(#8a92a1 0px, #757e8f 8px, #4e5666 100%);
                                border-radius: 4px;
                                display: flex;
                                margin-right: 5px;
                            }
                            .esgst-header-menu-relative-dropdown {
                                position: relative;
                            }
                            .esgst-header-menu-absolute-dropdown {
                                top: 34px;
                                position: absolute;
                                width: 275px;
                                border-radius: 4px;
                                box-shadow: 0 0 15px rgba(0, 0, 0, 0.02), 2px 2px 5px rgba(0, 0, 0, 0.05), 1px 1px 2px rgba(0, 0, 0, 0.1);
                                overflow: hidden;
                                z-index: 1;
                            }
                            .esgst-header-menu-row {
                                cursor: pointer;
                                background-image: linear-gradient(#fff 0%, #f6f7f9 100%);
                                display: flex;
                                padding: 12px 15px;
                                text-shadow: 1px 1px #fff;
                                align-items: center;
                            }
                            .esgst-header-menu-row:not(:first-child) {
                                border-top: 1px dotted #d2d6e0;
                            }
                            .esgst-header-menu-row:hover, .esgst.header-menu-button:hover + .esgst-header-menu-button {
                                border-top-color: transparent;
                            }
                            .esgst-header-menu-row i{
                                font-size: 28px;
                                margin-right: 15px;
                            }
                            .esgst-header-menu-row:hover i {
                                color: #fff
                            }
                            .esgst-header-menu-row:hover{
                                background-image: linear-gradient(#63a0f4 0%, #63a0f4 100%);
                                text-shadow: none;
                            }
                            .esgst-header-menu-row i.blue {
                                color: #9dd9e1;
                            }
                            .esgst-header-menu-row i.green {
                                color: #96c468;
                            }
                            .esgst-header-menu-row i.red {
                                color: #ec8583;
                            }
                            .esgst-header-menu-row i.grey{
                                color: #77899A;
                            }
                            .esgst-header-menu-row i.yellow{
                                color: #FECC66;
                            }
                            .esgst-header-menu-name {
                                color: #4B72D4;
                                font: bold 11px/15px Arial, sans-serif;
                            }
                            .esgst-header-menu-description {
                                color: #6b7a8c;
                                font: 11px/13px Arial, sans-serif
                            }
                            .esgst-header-menu-row:hover .esgst-header-menu-name {
                                color: #fff;
                            }
                            .esgst-header-menu-row:hover .esgst-header-menu-description {
                                color: rgba(255, 255, 255, 0.7);
                            }
                            .esgst-header-menu-button {
                                white-space: nowrap;
                                color: #21262f;
                                font: bold 11px/29px Arial, sans-serif;
                                padding: 0 15px;
                                cursor: pointer;
                                text-shadow: 1px 1px rgba(255, 255, 255, 0.08);
                                        border-radius: 4px 0 0 4px;
                            }
                            .esgst-header-menu-button.arrow {
                                border-radius: 0 4px 4px 0;
                                padding: 0 10px;
                            }
                            .esgst-header-menu-button:hover {
                                background-image: linear-gradient(#9ba2b0 0px, #8c94a3 8px, #596070 100%);
                            }
                            .esgst-header-menu-button.selected {
                                background-image: linear-gradient(#4e525f 0px, #434857 5px, #2b2e3a 100%);
                                box-shadow: 3px 3px 5px rgba(0, 0, 0, 0.3) inset;
                                color: #aec5f3;
                                text-shadow: 1px 1px rgba(0, 0, 0, 0.2);
                            }
                            .esgst-header-menu.selected .esgst-header-menu-button {
                                background-image: linear-gradient(#d0d5de 0px, #c9cdd7 5px, #9097a6 100%);
                                color: #3c465c;
                                text-shadow: 1px 1px rgba(255, 255, 255, 0.2);
                            }
                            .esgst-header-menu.selected .esgst-header-menu-button:hover:not(.selected) {
                                background-image: linear-gradient(#f0f1f5 0px, #d1d4de 100%);
                            }
                        `;
                    } else {
                        esgst.pageOuterWrapClass = `page_outer_wrap`;
                        esgst.pageHeadingClass = `page_heading`;
                        esgst.pageHeadingBreadcrumbsClass = `page_heading_breadcrumbs`;
                        esgst.footer = document.getElementsByTagName(`footer`)[0];
                        esgst.replyBox = document.getElementsByClassName(`reply_form`)[0];
                        esgst.cancelButtonClass = `btn_cancel`;
                        esgst.paginationNavigationClass = `pagination_navigation`;
                        esgst.hiddenClass = `is_hidden`;
                        esgst.name = `st`;
                        esgst.selectedClass = `is_selected`;
                        style += `
                            .esgst-header-menu {
                                display: flex;
                                margin: 0 5px 0 0;
                                box-shadow: 0 0 15px rgba(6, 52, 84, 0.07), 2px 2px 5px rgba(6, 52, 84, 0.07), 1px 1px 2px rgba(6, 52, 84, 0.07);
                            }
                            .esgst-header-menu-relative-dropdown > div {
                                overflow: hidden;
                                border-radius: 3px;
                                background-color: #fff;
                                position: absolute;
                                margin-top: 39px;
                                box-shadow: 0 0 15px rgba(59, 74, 84, 0.07), 2px 2px 5px rgba(59, 74, 84, 0.07), 1px 1px 2px rgba(59, 74, 84, 0.07);
                                z-index: 10;
                                width: 190px;
                            }
                            .esgst-header-menu-row {
                                padding: 15px 20px;
                                color: #557a93;
                                display: flex;
                                align-items: center;
                                font: 700 12px 'Open Sans', sans-serif;
                                transition: background-color 0.15s;
                                cursor: pointer;
                            }
                            .esgst-header-menu-row:not(:last-child) {
                                border-bottom: 1px solid #e1ebf2;
                            }
                            .esgst-header-menu-row.disabled {
                                cursor: default
                            }
                            .esgst-header-menu-row > * {
                                transition: opacity 0.15s;
                            }
                            .esgst-header-menu-row i {
                                margin-right: 20px;
                                font-size: 24px;
                                transition: color 0.15s;
                            }
                            .esgst-header-menu-row:hover {
                                background-color: #f0f3f5;
                            }
                            .esgst-header-menu-relative-dropdown:hover .esgst-header-menu-row:not(:hover) > * {
                                opacity: 0.5;
                            }
                            .esgst-header-menu-relative-dropdown:hover .esgst-header-menu-row:not(:hover) i {
                                color: #bdcbd5;
                            }
                            .esgst-header-menu-row i.blue {
                                color: #9dd9e1;
                            }
                            .esgst-header-menu-row i.green {
                                color: #96c468;
                            }
                            .esgst-header-menu-row i.red {
                                color: #ec8583;
                            }
                            .esgst-header-menu-row i.grey{
                                color: #77899a;
                            }
                            .esgst-header-menu-row i.yellow{
                                color: #FECC66;
                            }
                            .esgst-header-menu-description {
                                display: none;
                            }
                            .esgst-header-menu-button {
                                cursor: pointer;
                                border-radius: 3px;
                                display: flex;
                                align-items: center;
                                border: 1px solid;
                                font: 700 11px 'Open Sans', sans-serif;
                                padding: 8px 10px;
                                white-space: nowrap;
                                background-image: linear-gradient(#fff 0%, #dfe5f0 50%, #a5b2cc 100%);
                                border-color: #fff #adb6c7 #909bb0 #cdd3df;
                                color: #354a73;
                                text-shadow: 1px 1px rgba(255, 255, 255, 0.3);
                                transition: opacity 0.1s;
                                opacity: 0.8;
                                border-radius: 3px 0 0 3px;
                                border-right: 0;
                            }
                            .esgst-header-menu-button:hover:not(.selected) {
                                opacity: 1;
                            }
                            .esgst-header-menu-button.selected {
                                opacity: 0.6;
                            }
                            .esgst-header-menu-button.arrow {
                                border-radius: 0 3px 3px 0;
                                border-left: 0;
                            }
                            .esgst-header-menu-button:not(.arrow) > i {
                                margin-right: 10px;
                            }
                            .esgst-un-button {
                                background-image: linear-gradient(#fff 0%, rgba(255, 255, 255, 0.4) 100%);
                                border: 1px solid #d2d6e0;
                                border-radius: 3px;
                                color: #4b72d4;
                                cursor: pointer;
                                display: inline-block;
                                font: 700 14px/22px "Open Sans", sans-serif;
                                padding: 5px 15px;
                            }
                        `;
                    }
                    style += `
                        .esgst-fh {
                            height: auto !important;
                            position: fixed;
                            top: 0;
                            width: 100%;
                            z-index: 999 !important;
                        }
                        .esgst-ff {
                            background-color: inherit;
                            bottom: 0;
                            padding: 0;
                            position: fixed;
                            width: 100%;
                            z-index: 999;
                        }
                        .esgst-ff >* {
                            padding: 15px 25px;
                        }
                        .esgst-ff-sibling {
                            margin-bottom: 39px;
                        }
                        .esgst-sgg-sticky-button {
                            cursor: pointer;
                            margin: 0 5px 0 0;
                            opacity: 0.5;
                        }
                        .esgst-sgg-unsticky-button {
                            cursor: pointer;
                            margin: 0 5px 0 0;
                        }
                        .esgst-ct-count {
                            color: #e9202a;
                            font-weight: bold;
                        }
                        .esgst-uh-box {
                            background-color: rgba(10, 18, 41, 0.5);
                            margin: 5px 0 0;
                            padding: 15px;
                            position: absolute;
                            text-align: center;
                        }
                        .esgst-uh-title {
                            color: rgba(255, 255, 255, 0.6);
                            font-weight: bold;
                            margin: 0 0 15px;
                        }
                        .esgst-uh-list {
                            color: rgba(255, 255, 255, 0.4);
                        }
                        .esgst-wbc-button, .esgst-namwc-button, .esgst-nrf-button {
                            cursor: pointer;
                            margin: 0 0 0 5px;
                        }
                        .esgst-luc-value {
                            margin: 0 0 0 5px;
                        }
                        .esgst-sgpb-container {
                            display: flex;
                        }
                        .esgst-sgpb-container >* {
                            flex: 1;
                        }
                        .esgst-sgpb-button {
                            background-image: linear-gradient(rgba(255, 255, 255, 0.8) 0%, rgba(255, 255, 255, 0.3) 100%);
                            border-color: #dde2ea #cdd4df #cbd1dc #d6dbe7;
                            color: #6e7585;
                            text-shadow: 1px 1px 1px #fff;
                            transition: opacity 0.5s;
                            border-radius: 3px;
                            font: 700 13px 'Open Sans', sans-serif;
                            margin: 0 0 0 5px;
                            padding: 7px 15px;
                            display: flex;
                            align-items: center;
                            border-width: 1px;
                            border-style: solid;
                            text-decoration: none;
                        }
                        .esgst-sgpb-button:active {
                            background-image: linear-gradient(#e1e7eb 0%, #e6ebf0 50%, #ebeff2 100%) !important;
                            box-shadow: 2px 2px 5px #ccd4db inset;
                            text-shadow: 1px 1px 1px rgba(255, 255, 255, 0.6);
                            margin: 2px 0 0 7px !important;
                            border: 0;
                        }
                        .esgst-sgpb-button:hover {
                            background-image: linear-gradient(rgba(255, 255, 255, 1) 0%, rgba(255, 255, 255, 0.3) 100%);
                        }
                        .esgst-sgpb-button i {
                            height: 14px;
                            margin: 0 10px 0;
                            width: 14px;
                        }
                        .esgst-sgpb-button img {
                            height: 14px;
                            vertical-align: baseline;
                            width: 14px;
                        }
                        .esgst-stpb-button img {
                            vertical-align: top;
                        }
                        .esgst-gh-highlight {
                            background-color: rgba(150, 196, 104, 0.2);
                        }
                    `;
                    GM_addStyle(style);
                    esgst.currentPage = window.location.href.match(/page=(\d+)/);
                    if (esgst.currentPage) {
                        esgst.currentPage = parseInt(esgst.currentPage[1]);
                    } else {
                        esgst.currentPage = 1;
                    }
                    var url = window.location.href.replace(window.location.search, ``).replace(window.location.hash, ``).replace(`/search`, ``);
                    esgst.originalUrl = url;
                    esgst.favicon = document.querySelector(`[rel="shortcut icon"]`);
                    esgst.originalTitle = document.title;
                    esgst.mainPath = window.location.pathname.match(/^\/$/);
                    if (esgst.mainPath) {
                        url += esgst.sg ? `giveaways` : `trades`;
                    }
                    url += `/search?`;
                    var parameters = window.location.search.replace(/^\?/, ``).split(/&/);
                    for (var i = 0, n = parameters.length; i < n; ++i) {
                        if (parameters[i] && !parameters[i].match(/page/)) {
                            url += parameters[i] + `&`;
                        }
                    }
                    if (window.location.search) {
                        esgst.originalUrl = url.replace(/&$/, ``);
                        if (esgst.currentPage > 1) {
                            esgst.originalUrl += `&page=${esgst.currentPage}`;
                        }
                    }
                    url += `page=`;
                    esgst.searchUrl = url;
                    esgst.userPath = window.location.pathname.match(/^\/user\//);
                    esgst.groupPath = window.location.pathname.match(/^\/group\//);
                    esgst.regionsPath = window.location.pathname.match(/^\/regions\//);
                    esgst.groupWishlistPath = window.location.pathname.match(/^\/group\/(.*?)\/wishlist/);
                    refreshHeaderElements(document);
                    esgst.winnersPath = window.location.pathname.match(/^\/giveaway\/.+\/winners/);
                    esgst.giveawaysPath = esgst.sg && window.location.pathname.match(/^\/($|giveaways(?!.*\/(new|wishlist|created|entered|won)))/);
                    esgst.giveawayCommentsPath = window.location.pathname.match(/^\/giveaway\/(?!.+\/(entries|winners|groups))/);
                    esgst.discussionsTicketsPath = window.location.pathname.match(/^\/(discussions|support\/tickets)/);
                    esgst.ticketsPath = window.location.pathname.match(/^\/support\/tickets/);
                    esgst.tradesPath = esgst.st && window.location.pathname.match(/^\/($|trades)/);
                    esgst.discussionsTicketsTradesPath = (esgst.st && window.location.pathname.match(/^\/$/)) ||
                        window.location.pathname.match(/^\/(discussions|support\/tickets|trades)/);
                    esgst.originalHash = window.location.hash;
                    esgst.discussionTicketTradeCommentsPath = window.location.pathname.match(/^\/(discussion|support\/ticket|trade)\//);
                    esgst.archivePath = window.location.pathname.match(/^\/archive/);
                    esgst.profilePath = window.location.pathname.match(/^\/account\/settings\/profile/);
                    esgst.giveawayPath = window.location.pathname.match(/^\/giveaway\//);
                    esgst.discussionPath = window.location.pathname.match(/^\/discussion\//);
                    esgst.discussionsPath = window.location.pathname.match(/^\/discussions/);
                    esgst.newGiveawayPath = window.location.pathname.match(/^\/giveaways\/new/);
                    esgst.newTicketPath = window.location.pathname.match(/^\/support\/tickets\/new/);
                    esgst.wishlistPath = window.location.pathname.match(/^\/giveaways\/wishlist/);
                    esgst.createdPath = window.location.pathname.match(/^\/giveaways\/created/);
                    esgst.wonPath = window.location.pathname.match(/^\/giveaways\/won/);
                    esgst.enteredPath = window.location.pathname.match(/^\/giveaways\/entered/);
                    esgst.commentsPath = window.location.pathname.match(/^\/(giveaway\/(?!.*\/(entries|winners|groups))|discussion\/|support\/ticket\/|trade\/)/);
                    esgst.accountPath = window.location.pathname.match(/^\/account/);
                    esgst.whitelistPath = window.location.pathname.match(/^\/account\/manage\/whitelist/);
                    esgst.blacklistPath = window.location.pathname.match(/^\/account\/manage\/blacklist/);
                    esgst.inboxPath = window.location.pathname.match(/^\/messages/);
                    esgst.groupsPath = window.location.pathname.match(/^\/account\/steam\/groups/);
                    esgst.menuPath = window.location.hash.match(/#ESGST/);
                    esgst.header = document.getElementsByTagName(`header`)[0];
                    esgst.headerNavigationLeft = document.getElementsByClassName(`nav__left-container`)[0];
                    esgst.pagination = document.getElementsByClassName(`pagination`)[0];
                    esgst.featuredContainer = document.getElementsByClassName(`featured__container`)[0];
                    esgst.pageOuterWrap = document.getElementsByClassName(esgst.pageOuterWrapClass)[0];
                    esgst.paginationNavigation = document.getElementsByClassName(esgst.paginationNavigationClass)[0];
                    esgst.sidebar = document.getElementsByClassName(`sidebar`)[0];
                    esgst.activeDiscussions = document.getElementsByClassName(`widget-container--margin-top`)[0];
                    esgst.pinnedGiveaways = document.getElementsByClassName(`pinned-giveaways__outer-wrap`)[0];
                    esgst.pinnedGiveawaysButton = document.getElementsByClassName(`pinned-giveaways__button`)[0];
                    var mainPageHeadingIndex;
                    if (esgst.commentsPath) {
                        mainPageHeadingIndex = 1;
                    } else {
                        mainPageHeadingIndex = 0;
                    }
                    esgst.mainPageHeading = document.getElementsByClassName(esgst.pageHeadingClass)[mainPageHeadingIndex];
                    if (!esgst.mainPageHeading && mainPageHeadingIndex === 1) {
                        esgst.mainPageHeading = document.getElementsByClassName(esgst.pageHeadingClass)[0];
                    }
                    esgst.xsrfToken = logoutButton.getAttribute("data-form").match(/xsrf_token=(.+)/)[1];
                    esgst.pageTop = 25;
                    esgst.commentsTop = 0;
                    esgst.apPopouts = {};
                    esgst.currentUsers = {};
                    esgst.currentGames = {};
                    esgst.oldValues = {
                        enableByDefault: `sm_ebd`,
                        showChangelog: `sm_c`,
                        hr_w: `hr_dw`,
                        hr_m: `hr_mc`,
                        at_24: `at_c24`,
                        elgb_r: `elgb_rb`,
                        gts: `gt`,
                        cfh_g: `cfh_ge`,
                        un_p: `un_wb`,
                        rwscvl_a: `rwscvl_al`,
                        rwscvl_r: `rwscvl_ro`,
                        wbh_w: `wbh_cw`,
                        wbh_b: `wbh_cb`,
                        gt: `ggt`,
                        gt_t: `ggt_t`,
                        es_d: `es_dtt`,
                        es_t: `es_dtt`,
                        es_c: `es_dttc`,
                        es_l: `es_r`,
                        es_r: `es_rs`,
                        gf_genreList: `gf_genresList`,
                        gf_genreListWishlist: `gf_genresListWishlist`,
                        gf_genreListRecommended: `gf_genresListRecommended`,
                        gf_genreListGroup: `gf_genresListGroup`,
                        gf_genreListNew: `gf_genresListNew`,
                        gf_genreListGroups: `gf_genresListGroups`,
                        ags_maxLevel: `agsMaxLevel`,
                        ags_minLevel: `agsMinLevel`,
                        ags_maxEntries: `agsMaxEntries`,
                        ags_minEntries: `agsMinEntries`,
                        ags_maxCopies: `agsMaxCopies`,
                        ags_minCopies: `agsMinCopies`,
                        ags_maxPoints: `agsMaxPoints`,
                        ags_minPoints: `agsMinPoints`,
                        ags_regionRestricted: `agsRegionRestricted`,
                        ags_dlc: `agsDlc`,
                        gv_spacing: `gvSpacing`,
                        gb_hours: `gbHours`,
                        gts_preciseStart: `gts_ps`,
                        gts_preciseEnd: `gts_pe`,
                        mgc: `gm`,
                        mgc_createTrain: `gm_createTrain`,
                        cfh_pasteFormatting: `CFH_ALIPF`,
                        wbh_w_color: `wbh_cw_color`,
                        wbh_w_bgColor: `wbh_cw_bgColor`,
                        wbh_b_color: `wbh_cb_color`,
                        wbh_b_bgColor: `wbh_cb_bgColor`,
                        avatar: `Avatar`,
                        username: `Username`,
                        steamId: `SteamID64`,
                        steamApiKey: `SteamAPIKey`,
                        lastSync: `LastSync`,
                        syncFrequency: `SyncFrequency`
                    };
                    esgst.defaultValues = {
                        enableByDefault: false,
                        showChangelog: true,
                        syncGroups: true,
                        syncWhitelist: true,
                        syncBlacklist: true,
                        syncHiddenGames: true,
                        syncGames: true,
                        ged: true,
                        elgb_d: true,
                        gf_minLevel: 0,
                        gf_maxLevel: 10,
                        gf_minEntries: 0,
                        gf_maxEntries: 999999999,
                        gf_minCopies: 1,
                        gf_maxCopies: 999999999,
                        gf_minPoints: 0,
                        gf_maxPoints: 100,
                        gf_minChance: 0,
                        gf_maxChance: 100,
                        gf_minRating: 0,
                        gf_maxRating: 100,
                        gf_pinned: `enabled`,
                        gf_group: `enabled`,
                        gf_whitelist: `enabled`,
                        gf_regionRestricted: `enabled`,
                        gf_created: `enabled`,
                        gf_entered: `enabled`,
                        gf_hidden: `enabled`,
                        gf_bundled: `enabled`,
                        gf_owned: `enabled`,
                        gf_wishlisted: `enabled`,
                        gf_ignored: `enabled`,
                        gf_removed: `enabled`,
                        gf_tradingCards: `enabled`,
                        gf_achievements: `enabled`,
                        gf_multiplayer: `enabled`,
                        gf_steamCloud: `enabled`,
                        gf_linux: `enabled`,
                        gf_mac: `enabled`,
                        gf_dlc: `enabled`,
                        gf_genres: false,
                        gf_genreList: ``,
                        gf_exceptionPinned: false,
                        gf_exceptionWishlist: false,
                        gf_exceptionGroup: false,
                        gf_exceptionWhitelist: false,
                        gf_exceptionRegionRestricted: false,
                        gf_exceptionMultiple: false,
                        gf_exceptionMultipleCopies: 1,
                        gf_minLevelWishlist: 0,
                        gf_maxLevelWishlist: 10,
                        gf_minEntriesWishlist: 0,
                        gf_maxEntriesWishlist: 999999999,
                        gf_minCopiesWishlist: 1,
                        gf_maxCopiesWishlist: 999999999,
                        gf_minPointsWishlist: 0,
                        gf_maxPointsWishlist: 100,
                        gf_minChanceWishlist: 0,
                        gf_maxChanceWishlist: 100,
                        gf_minRatingWishlist: 0,
                        gf_maxRatingWishlist: 100,
                        gf_pinnedWishlist: `enabled`,
                        gf_groupWishlist: `enabled`,
                        gf_whitelistWishlist: `enabled`,
                        gf_regionRestrictedWishlist: `enabled`,
                        gf_createdWishlist: `enabled`,
                        gf_enteredWishlist: `enabled`,
                        gf_hiddenWishlist: `enabled`,
                        gf_bundledWishlist: `enabled`,
                        gf_ownedWishlist: `enabled`,
                        gf_wishlistedWishlist: `enabled`,
                        gf_ignoredWishlist: `enabled`,
                        gf_removedWishlist: `enabled`,
                        gf_tradingCardsWishlist: `enabled`,
                        gf_achievementsWishlist: `enabled`,
                        gf_multiplayerWishlist: `enabled`,
                        gf_steamCloudWishlist: `enabled`,
                        gf_linuxWishlist: `enabled`,
                        gf_macWishlist: `enabled`,
                        gf_dlcWishlist: `enabled`,
                        gf_genresWishlist: false,
                        gf_genreListWishlist: ``,
                        gf_exceptionPinnedWishlist: false,
                        gf_exceptionWishlistWishlist: false,
                        gf_exceptionGroupWishlist: false,
                        gf_exceptionWhitelistWishlist: false,
                        gf_exceptionRegionRestrictedWishlist: false,
                        gf_exceptionMultipleWishlist: false,
                        gf_exceptionMultipleCopiesWishlist: 1,
                        gf_minLevelRecommended: 0,
                        gf_maxLevelRecommended: 10,
                        gf_minEntriesRecommended: 0,
                        gf_maxEntriesRecommended: 999999999,
                        gf_minCopiesRecommended: 1,
                        gf_maxCopiesRecommended: 999999999,
                        gf_minPointsRecommended: 0,
                        gf_maxPointsRecommended: 100,
                        gf_minChanceRecommended: 0,
                        gf_maxChanceRecommended: 100,
                        gf_minRatingRecommended: 0,
                        gf_maxRatingRecommended: 100,
                        gf_pinnedRecommended: `enabled`,
                        gf_groupRecommended: `enabled`,
                        gf_whitelistRecommended: `enabled`,
                        gf_regionRestrictedRecommended: `enabled`,
                        gf_createdRecommended: `enabled`,
                        gf_enteredRecommended: `enabled`,
                        gf_hiddenRecommended: `enabled`,
                        gf_bundledRecommended: `enabled`,
                        gf_ownedRecommended: `enabled`,
                        gf_wishlistedRecommended: `enabled`,
                        gf_ignoredRecommended: `enabled`,
                        gf_removedRecommended: `enabled`,
                        gf_tradingCardsRecommended: `enabled`,
                        gf_achievementsRecommended: `enabled`,
                        gf_multiplayerRecommended: `enabled`,
                        gf_steamCloudRecommended: `enabled`,
                        gf_linuxRecommended: `enabled`,
                        gf_macRecommended: `enabled`,
                        gf_dlcRecommended: `enabled`,
                        gf_genresRecommended: false,
                        gf_genreListRecommended: ``,
                        gf_exceptionPinnedRecommended: false,
                        gf_exceptionWishlistRecommended: false,
                        gf_exceptionGroupRecommended: false,
                        gf_exceptionWhitelistRecommended: false,
                        gf_exceptionRegionRestrictedRecommended: false,
                        gf_exceptionMultipleRecommended: false,
                        gf_exceptionMultipleCopiesRecommended: 1,
                        gf_minLevelNew: 0,
                        gf_maxLevelNew: 10,
                        gf_minEntriesNew: 0,
                        gf_maxEntriesNew: 999999999,
                        gf_minCopiesNew: 1,
                        gf_maxCopiesNew: 999999999,
                        gf_minPointsNew: 0,
                        gf_maxPointsNew: 100,
                        gf_minChanceNew: 0,
                        gf_maxChanceNew: 100,
                        gf_minRatingNew: 0,
                        gf_maxRatingNew: 100,
                        gf_pinnedNew: `enabled`,
                        gf_groupNew: `enabled`,
                        gf_whitelistNew: `enabled`,
                        gf_regionRestrictedNew: `enabled`,
                        gf_createdNew: `enabled`,
                        gf_enteredNew: `enabled`,
                        gf_hiddenNew: `enabled`,
                        gf_bundledNew: `enabled`,
                        gf_ownedNew: `enabled`,
                        gf_wishlistedNew: `enabled`,
                        gf_ignoredNew: `enabled`,
                        gf_removedNew: `enabled`,
                        gf_tradingCardsNew: `enabled`,
                        gf_achievementsNew: `enabled`,
                        gf_multiplayerNew: `enabled`,
                        gf_steamCloudNew: `enabled`,
                        gf_linuxNew: `enabled`,
                        gf_macNew: `enabled`,
                        gf_dlcNew: `enabled`,
                        gf_genresNew: false,
                        gf_genreListNew: ``,
                        gf_exceptionPinnedNew: false,
                        gf_exceptionWishlistNew: false,
                        gf_exceptionGroupNew: false,
                        gf_exceptionWhitelistNew: false,
                        gf_exceptionRegionRestrictedNew: false,
                        gf_exceptionMultipleNew: false,
                        gf_exceptionMultipleCopiesNew: 1,
                        gf_minLevelGroup: 0,
                        gf_maxLevelGroup: 10,
                        gf_minEntriesGroup: 0,
                        gf_maxEntriesGroup: 999999999,
                        gf_minCopiesGroup: 1,
                        gf_maxCopiesGroup: 999999999,
                        gf_minPointsGroup: 0,
                        gf_maxPointsGroup: 300,
                        gf_minChanceGroup: 0,
                        gf_maxChanceGroup: 100,
                        gf_minRatingGroup: 0,
                        gf_maxRatingGroup: 100,
                        gf_pinnedGroup: `enabled`,
                        gf_groupGroup: `enabled`,
                        gf_whitelistGroup: `enabled`,
                        gf_regionRestrictedGroup: `enabled`,
                        gf_createdGroup: `enabled`,
                        gf_enteredGroup: `enabled`,
                        gf_hiddenGroup: `enabled`,
                        gf_bundledGroup: `enabled`,
                        gf_ownedGroup: `enabled`,
                        gf_wishlistedGroup: `enabled`,
                        gf_ignoredGroup: `enabled`,
                        gf_removedGroup: `enabled`,
                        gf_tradingCardsGroup: `enabled`,
                        gf_achievementsGroup: `enabled`,
                        gf_multiplayerGroup: `enabled`,
                        gf_steamCloudGroup: `enabled`,
                        gf_linuxGroup: `enabled`,
                        gf_macGroup: `enabled`,
                        gf_dlcGroup: `enabled`,
                        gf_genresGroup: false,
                        gf_genreListGroup: ``,
                        gf_exceptionPinnedGroup: false,
                        gf_exceptionWishlistGroup: false,
                        gf_exceptionGroupGroup: false,
                        gf_exceptionWhitelistGroup: false,
                        gf_exceptionRegionRestrictedGroup: false,
                        gf_exceptionMultipleGroup: false,
                        gf_exceptionMultipleCopiesGroup: 1,
                        gf_minLevelGroups: 0,
                        gf_maxLevelGroups: 10,
                        gf_minEntriesGroups: 0,
                        gf_maxEntriesGroups: 999999999,
                        gf_minCopiesGroups: 1,
                        gf_maxCopiesGroups: 999999999,
                        gf_minPointsGroups: 0,
                        gf_maxPointsGroups: 100,
                        gf_minChanceGroups: 0,
                        gf_maxChanceGroups: 100,
                        gf_minRatingGroups: 0,
                        gf_maxRatingGroups: 100,
                        gf_pinnedGroups: `enabled`,
                        gf_groupGroups: `enabled`,
                        gf_whitelistGroups: `enabled`,
                        gf_regionRestrictedGroups: `enabled`,
                        gf_createdGroups: `enabled`,
                        gf_enteredGroups: `enabled`,
                        gf_hiddenGroups: `enabled`,
                        gf_bundledGroups: `enabled`,
                        gf_ownedGroups: `enabled`,
                        gf_wishlistedGroups: `enabled`,
                        gf_ignoredGroups: `enabled`,
                        gf_removedGroups: `enabled`,
                        gf_tradingCardsGroups: `enabled`,
                        gf_achievementsGroups: `enabled`,
                        gf_multiplayerGroups: `enabled`,
                        gf_steamCloudGroups: `enabled`,
                        gf_linuxGroups: `enabled`,
                        gf_macGroups: `enabled`,
                        gf_dlcGroups: `enabled`,
                        gf_genresGroups: false,
                        gf_genreListGroups: ``,
                        gf_exceptionPinnedGroups: false,
                        gf_exceptionWishlistGroups: false,
                        gf_exceptionGroupGroups: false,
                        gf_exceptionWhitelistGroups: false,
                        gf_exceptionRegionRestrictedGroups: false,
                        gf_exceptionMultipleGroups: false,
                        gf_exceptionMultipleCopiesGroups: 1,
                        gf_minLevelPopup: 0,
                        gf_maxLevelPopup: 10,
                        gf_minEntriesPopup: 0,
                        gf_maxEntriesPopup: 999999999,
                        gf_minCopiesPopup: 1,
                        gf_maxCopiesPopup: 999999999,
                        gf_minPointsPopup: 0,
                        gf_maxPointsPopup: 100,
                        gf_minChancePopup: 0,
                        gf_maxChancePopup: 100,
                        gf_minRatingPopup: 0,
                        gf_maxRatingPopup: 100,
                        gf_pinnedPopup: `enabled`,
                        gf_groupPopup: `enabled`,
                        gf_whitelistPopup: `enabled`,
                        gf_regionRestrictedPopup: `enabled`,
                        gf_createdPopup: `enabled`,
                        gf_enteredPopup: `enabled`,
                        gf_hiddenPopup: `enabled`,
                        gf_bundledPopup: `enabled`,
                        gf_ownedPopup: `enabled`,
                        gf_wishlistedPopup: `enabled`,
                        gf_ignoredPopup: `enabled`,
                        gf_removedPopup: `enabled`,
                        gf_tradingCardsPopup: `enabled`,
                        gf_achievementsPopup: `enabled`,
                        gf_multiplayerPopup: `enabled`,
                        gf_steamCloudPopup: `enabled`,
                        gf_linuxPopup: `enabled`,
                        gf_macPopup: `enabled`,
                        gf_dlcPopup: `enabled`,
                        gf_genresPopup: false,
                        gf_genreListPopup: ``,
                        gf_exceptionPinnedPopup: false,
                        gf_exceptionWishlistPopup: false,
                        gf_exceptionGroupPopup: false,
                        gf_exceptionWhitelistPopup: false,
                        gf_exceptionRegionRestrictedPopup: false,
                        gf_exceptionMultiplePopup: false,
                        gf_exceptionMultipleCopiesPopup: 1,
                        ags_maxLevel: ``,
                        ags_minLevel: ``,
                        ags_maxEntries: ``,
                        ags_minEntries: ``,
                        ags_maxCopies: ``,
                        ags_minCopies: ``,
                        ags_maxPoints: ``,
                        ags_minPoints: ``,
                        ags_regionRestricted: false,
                        ags_dlc: false,
                        gv_spacing: 0,
                        gb_hours: 1,
                        gts_preciseStart: false,
                        gts_preciseEnd: false,
                        mgc_createTrain: true,
                        mgc_groupKeys: false,
                        mgc_reversePosition: false,
                        mgc_removeLinks: true,
                        adots_index: 0,
                        rgr_index: 0,
                        cfh_pasteFormatting: true,
                        gc_h_color: `#ffffff`,
                        gc_gi_color: `#ffffff`,
                        gc_b_color: `#ffffff`,
                        gc_w_color: `#ffffff`,
                        gc_o_color: `#ffffff`,
                        gc_i_color: `#ffffff`,
                        gc_rm_color: `#ffffff`,
                        gc_ea_color: `#ffffff`,
                        gc_tc_color: `#ffffff`,
                        gc_a_color: `#ffffff`,
                        gc_mp_color: `#ffffff`,
                        gc_sc_color: `#ffffff`,
                        gc_l_color: `#ffffff`,
                        gc_m_color: `#ffffff`,
                        gc_dlc_color: `#ffffff`,
                        gc_p_color: `#ffffff`,
                        gc_g_color: `#ffffff`,
                        gc_h_bgColor: `#e74c3c`,
                        gc_gi_bgColor: `#555555`,
                        gc_b_bgColor: `#641e16`,
                        gc_o_bgColor: `#16a085`,
                        gc_w_bgColor: `#3498db`,
                        gc_i_bgColor: `#e74c3c`,
                        gc_rm_bgColor: `#e74c3c`,
                        gc_ea_bgColor: `#3498db`,
                        gc_tc_bgColor: `#2ecc71`,
                        gc_a_bgColor: `#145a32`,
                        gc_mp_bgColor: `#0e6251`,
                        gc_sc_bgColor: `#154360`,
                        gc_l_bgColor: `#f39c12`,
                        gc_m_bgColor: `#d35400`,
                        gc_dlc_bgColor: `#8e44ad`,
                        gc_p_bgColor: `#8e44ad`,
                        gc_g_bgColor: `#7f8c8d`,
                        wbh_w_color: `#ffffff`,
                        wbh_w_bgColor: `#228b22`,
                        wbh_b_color: `#ffffff`,
                        wbh_b_bgColor: `#ff4500`,
                        npth_previousKey: `ArrowLeft`,
                        npth_nextKey: `ArrowRight`,
                        avatar: ``,
                        username: ``,
                        steamId: ``,
                        steamApiKey: ``,
                        lastSync: 0,
                        syncFrequency: 7,
                        LastBundleSync: 0,
                        Emojis: "",
                        Rerolls: [],
                        Winners: {}
                    };
                    esgst.users = GM_getValue(`users`);
                    if (typeof esgst.users === `undefined`) {
                        GM_setValue(`users`, `
                            {
                                "steamIds": {},
                                "users": {}
                            }
                        `);
                        esgst.users = {
                            steamIds: {},
                            users: {}
                        };
                    } else {
                        esgst.users = JSON.parse(esgst.users);
                    }
                    esgst.groups = GM_getValue(`groups`);
                    if (typeof esgst.groups === `undefined`) {
                        GM_setValue(`groups`, `{}`);
                        esgst.groups = {};
                    } else {
                        esgst.groups = JSON.parse(esgst.groups);
                    }
                    esgst.comments = GM_getValue(`comments`);
                    if (typeof esgst.comments === `undefined`) {
                        GM_setValue(`comments`, `
                            {
                                "giveaways": {},
                                "discussions": {},
                                "tickets": {},
                                "trades": {}
                            }
                        `);
                        esgst.comments = {
                            giveaways: {},
                            discussions: {},
                            tickets: {},
                            trades: {}
                        };
                    } else {
                        esgst.comments = JSON.parse(esgst.comments);
                    }
                    esgst.giveaways = GM_getValue(`giveaways`);
                    if (typeof esgst.giveaways === `undefined`) {
                        GM_setValue(`giveaways`, `{}`);
                        esgst.giveaways = {};
                    } else {
                        esgst.giveaways = JSON.parse(esgst.giveaways);
                    }
                    esgst.games = GM_getValue(`games`);
                    if (typeof esgst.games === `undefined`) {
                        GM_setValue(`games`, `
                            {
                                apps: {},
                                subs: {}
                            }
                        `);
                        esgst.games = {
                            apps: {},
                            subs: {}
                        };
                    } else {
                        esgst.games = JSON.parse(esgst.games);
                    }
                    esgst.values = {};
                    esgst.features = [
                        {
                            id: `esgst`,
                            name: `Enable ESGST for SteamTrades.`,
                            st: true,
                            type: `other`
                        },
                        {
                            id: `enableByDefault`,
                            name: `Enable new features and functionalities by default.`,
                            sg: true,
                            st: true,
                            type: `other`
                        },
                        {
                            id: `showChangelog`,
                            name: `Show changelog from the new version when updating.`,
                            sg: true,
                            st: true,
                            type: `other`
                        },
                        {
                            description: `
                                <ul>
                                    <li>Allows the header to stay fixed at the top while you scroll down the page.</li>
                                </ul>
                            `,
                            id: `fh`,
                            name: `Fixed Header`,
                            sg: true,
                            st: true,
                            type: `general`
                        },
                        {
                            description: `
                                <ul>
                                    <li>Allows the sidebar to stay fixed at the side while you scroll down the page.</li>
                                </ul>
                            `,
                            id: `fs`,
                            load: loadFs,
                            name: `Fixed Sidebar`,
                            sg: true,
                            type: `general`,
                        },
                        {
                            description: `
                                <ul>
                                    <li>Allows the main page heading to stay fixed at the top while you scroll down the page.</li>
                                </ul>
                            `,
                            id: `fmph`,
                            load: loadFmph,
                            name: `Fixed Main Page Heading`,
                            sg: true,
                            st: true,
                            type: `general`
                        },
                        {
                            description: `
                                <ul>
                                    <li>Allows the footer to stay fixed at the bottom while you scroll down the page.</li>
                                </ul>
                            `,
                            id: `ff`,
                            name: `Fixed Footer`,
                            sg: true,
                            st: true,
                            type: `general`
                        },
                        {
                            description: `
                                <ul>
                                    <li>Refreshes the header icons (created/won/messages for SG and messages for ST) and the points on SG every 60 seconds.</li>
                                </ul>
                            `,
                            features: [
                                {
                                    id: `hr_b`,
                                    name: `Keep refreshing in the background when you go to another tab or minimize the browser.`,
                                    sg: true,
                                    st: true
                                },
                                {
                                    id: `hr_w`,
                                    name: `Change the color of the tab icon to red if there are unviewed keys for won gifts.`,
                                    sg: true
                                },
                                {
                                    id: `hr_m`,
                                    name: `Show the number of unread messages in the tab icon.`,
                                    sg: true,
                                    st: true
                                },
                                {
                                    id: `hr_p`,
                                    name: `Show the number of points in the tab title.`,
                                    sg: true
                                },
                            ],
                            id: `hr`,
                            load: loadHr,
                            name: `Header Refresher`,
                            sg: true,
                            st: true,
                            type: `general`
                        },
                        {
                            description: `
                                <ul>
                                    <li>Shows your level progress in the main button of the page.</li>
                                </ul>
                                <img src="https://camo.githubusercontent.com/5226f7a5e2012c40d201d9d2a44f19dd9df8ab18/687474703a2f2f696d6775722e636f6d2f524a6d436e70522e706e67"/>
                            `,
                            id: `lpv`,
                            load: loadLpv,
                            name: `Level Progress Visualizer`,
                            sg: true,
                            type: `general`
                        },
                        {
                            description: `
                                <ul>
                                    <li>Moves the pagination navigation to the top of the page.</li>
                                </ul>
                            `,
                            id: `pnot`,
                            name: `Pagination Navigation On Top`,
                            sg: true,
                            st: true,
                            type: `general`
                        },
                        {
                            description: `
                                <ul>
                                    <li>Adds a "Last Page" link to some places that are missing it, for example: discussion pages with 100+ pages, user pages, group pages with 100+ pages.</li>
                                </ul>
                            `,
                            id: `lpl`,
                            load: loadLpl,
                            name: `Last Page Link`,
                            sg: true,
                            type: `general`
                        },
                        {
                            description: `
                                <ul>
                                    <li>Shows all attached images by default.</li>
                                </ul>
                                <img src="https://camo.githubusercontent.com/e12760aaef77b2d9f6832190291ca43fab1d0622/687474703a2f2f692e696d6775722e636f6d2f496f5a374a684b2e706e67"/>
                            `,
                            features: [
                                {
                                    id: `vai_gifv`,
                                    name: `Rename .gifv images to .gif, so they are properly attached.`,
                                    sg: true,
                                    st: true
                                }
                            ],
                            id: `vai`,
                            load: loadVai,
                            name: `Visible Attached Images`,
                            sg: true,
                            st: true,
                            type: `general`
                        },
                        {
                            description: `
                                <ul>
                                    <li>Embeds YouTube and Vimeo videos into the page.</li>
                                </ul>
                                <p>Videos are only embedded if they are the only content in a line. For example:</p´>
                                <ul>
                                    <li>[Orange Sphincter To The Rescue](https://www.youtube.com/watch?v=cD1e0BNNifk) -> Gets embedded.</li>
                                    <li>I watched [https://www.youtube.com/watch?v=cD1e0BNNifk](https://www.youtube.com/watch?v=cD1e0BNNifk) and it was hilarious. -> Does not get embedded.</li>
                                </ul>
                            `,
                            id: `ev`,
                            load: loadEv,
                            name: `Embedded Videos`,
                            sg: true,
                            st: true,
                            type: `general`
                        },
                        {
                            description: `
                                <ul>
                                    <li>Shows accurate timestamps. For example, "1/1/2017, 0:00:00 AM" instead of "2 hours ago".</li>
                                </ul>
                            `,
                            features: [
                                {
                                    id: `at_24`,
                                    name: `Use a 24-hour clock.`,
                                    sg: true,
                                    st: true
                                },
                                {
                                    id: `at_s`,
                                    name: `Show seconds.`,
                                    sg: true,
                                    st: true
                                },
                                {
                                    id: `at_g`,
                                    name: `Enable for giveaways in the main page.`,
                                    sg: true
                                }
                            ],
                            id: `at`,
                            name: `Accurate Timestamps`,
                            sg: true,
                            st: true,
                            type: `general`
                        },
                        {
                            description: `
                                <ul>
                                    <li>Hides blacklist stats in the stats page.</li>
                                </ul>
                                <img src="https://camo.githubusercontent.com/96accb906d4bb1554a2f9ddfaeb0abce1b54b808/687474703a2f2f692e696d6775722e636f6d2f794233705153492e706e67"/>
                            `,
                            id: `hbs`,
                            load: loadHbs,
                            name: `Hidden Blacklist Stats`,
                            sg: true,
                            type: `general`
                        },
                        {
                            description: `
                                <ul>
                                    <li>Keeps track of your visited giveaways/discussions/tickets/trades and fades them.</li>
                                </ul>
                            `,
                            features: [
                                {
                                    id: `gdttt_g`,
                                    name: `Fade visited giveaways.`,
                                    sg: true
                                }
                            ],
                            id: `gdttt`,
                            load: loadGdttt,
                            name: `Giveaways/Discussions/Tickets/Trades Tracker`,
                            sg: true,
                            st: true,
                            type: `general`
                        },
                        {
                            description: `
                                <ul>
                                    <li>Hides the featured container in the main pages.</li>
                                </ul>
                            `,
                            id: `hfc`,
                            name: `Hidden Featured Container`,
                            sg: true,
                            type: `giveaways`
                        },
                        {
                            description: `
                                <ul>
                                    <li>Allows you to quickly go to wishlist/recommended/group/new giveaways from any page.</li>
                                </ul>
                                <img src="https://camo.githubusercontent.com/e831648032c40835a77ba90a0cad0a38be1ca9e2/687474703a2f2f696d6775722e636f6d2f4e4467717a466a2e706e67"/>
                            `,
                            id: `qgb`,
                            load: loadQgb,
                            name: `Quick Giveaway Browsing`,
                            sg: true,
                            type: `giveaways`
                        },
                        {
                            description: `
                                <ul>
                                    <li>Allows you to easily search giveaways using SG's <a href="https://www.steamgifts.com/discussion/8SzdT/">search parameters</a>.</li>
                                </ul>
                                <img src="https://camo.githubusercontent.com/bf5009c96f65689933567f1a34718682533b7836/687474703a2f2f692e696d6775722e636f6d2f5248596d4147732e706e67"/>
                            `,
                            id: `ags`,
                            name: `Advanced Giveaway Search`,
                            sg: true,
                            type: `giveaways`
                        },
                        {
                            description: `
                                <ul>
                                    <li>Shows giveaways as a grid.</li>
                                </ul>
                                <img src="https://camo.githubusercontent.com/daaefaee73d0f1f51fb7f830064cdd97d0455998/687474703a2f2f692e696d6775722e636f6d2f6a6864316d34412e706e67"/>
                            `,
                            id: `gv`,
                            name: `Grid View`,
                            sg: true,
                            type: `giveaways`
                        },
                        {
                            description: `
                                <ul>
                                    <li>Allows you to filter giveaways.</li>
                                    <li>Supports Game Categories.</li>
                                </ul>
                                <img src="https://camo.githubusercontent.com/d302b8f1a79edae54fd32c943201f452e6378802/687474703a2f2f692e696d6775722e636f6d2f457a344e794d6d2e706e67"/>
                            `,
                            id: `gf`,
                            name: `Giveaway Filters`,
                            sg: true,
                            type: `giveaways`
                        },
                        {
                            description: `
                                <ul>
                                    <li>Allows you to collapse the pinned giveaways container after expanding it.</li>
                                </ul>
                                <img src="https://camo.githubusercontent.com/50049f73629b0d6dc17a41fcd52e2184d69b2035/687474703a2f2f692e696d6775722e636f6d2f6f6958644c78332e706e67"/>
                            `,
                            id: `pgb`,
                            load: loadPgb,
                            name: `Pinned Giveaways Button`,
                            sg: true,
                            type: `giveaways`
                        },
                        {
                            description: `
                                <ul>
                                    <li>Removes SG's default fade for entered giveaways.</li>
                                </ul>
                            `,
                            id: `ueg`,
                            load: loadUeg,
                            name: `Unfaded Entered Giveaways`,
                            sg: true,
                            type: `giveaways`
                        },
                        {
                            description: `
                                <ul>
                                    <li>Allows you to bookmark giveaways to enter later.</li>
                                </ul>
                                <img src="https://camo.githubusercontent.com/a774e048e349d066cdc7b8122e3a9a58da58adc2/687474703a2f2f692e696d6775722e636f6d2f36653855794c332e706e67"/>
                            `,
                            features: [
                                {
                                    description: `
                                        <ul>
                                            <li>Giveaways that have not started yet will not appear in the list of bookmarked giveaways. Instead, they will stay in a sort of hidden state until they start. When they start, the header bookmark button will turn green, indicating that you must open the list of bookmarked giveaways so that the started giveaways can be updated with their end times.</li>
                                            <li>When giveaways are about to end, the button will red.</li>
                                            <li>If there are both started and ending giveaways, the button will be colored with a brown-ish color.</li>
                                            <li>Hovering over the button also gives you more details about how many giveaways have started and/or are ending.</li>
                                        </ul>
                                        <img src="https://camo.githubusercontent.com/b049009beacaba74aa340d8c6760c39c200b8366/687474703a2f2f692e696d6775722e636f6d2f6b4e7845445a562e706e67"/>
                                        <img src="https://camo.githubusercontent.com/6366d5af053ed27538ddc352a2dffb0f75da1756/687474703a2f2f692e696d6775722e636f6d2f374f41595861392e706e67"/>
                                    `,
                                    id: `gb_h`,
                                    input: true,
                                    name: `Highlight the button when giveaways have started and/or are about to end.`,
                                    sg: true
                                }
                            ],
                            id: `gb`,
                            load: loadGb,
                            name: `Giveaway Bookmarks`,
                            sg: true,
                            type: `giveaways`
                        },
                        {
                            id: `ged`,
                            load: loadGed,
                            name: `Giveaway Encrypter/Decrypter`,
                            sg: true,
                            type: `giveaways`
                        },
                        {
                            description: `
                                <ul>
                                    <li>Allows you to hide giveaways with one click.</li>
                                </ul>
                            `,
                            id: `ochgb`,
                            load: loadOchgb,
                            name: `One-Click Hide Giveaway Button`,
                            sg: true,
                            type: `giveaways`
                        },
                        {
                            description: `
                                <ul>
                                    <li>Adds more details to the created/entered/won pages, such as the number of points, the link to the Steam store page of the game, the name of the creator, the type of the giveaway and the level. It also loads the giveaway groups below the giveaway if Giveaway Groups Loader is enabled.</li>
                                </ul>
                            `,
                            id: `cewgd`,
                            load: loadCewgd,
                            name: `Created/Entered/Won Giveaway Details`,
                            sg: true,
                            type: `giveaways`
                        },
                        {
                            description: `
                                <ul>
                                    <li>Calculates your winning chance for a giveaway.</li>
                                </ul>
                                <img src="https://camo.githubusercontent.com/3f161b5a39d4723ac361a93e74b7beedc3cd5cd5/687474703a2f2f692e696d6775722e636f6d2f50696235546f6d2e706e67"/>
                            `,
                            id: `gwc`,
                            load: loadGwc,
                            name: `Giveaway Winning Chance`,
                            sg: true,
                            type: `giveaways`
                        },
                        {
                            description: `
                                <ul>
                                    <li>Calculates your winning ratio for a giveaway.</li>
                                </ul>
                                <img src="https://camo.githubusercontent.com/3f161b5a39d4723ac361a93e74b7beedc3cd5cd5/687474703a2f2f692e696d6775722e636f6d2f50696235546f6d2e706e67"/>
                            `,
                            id: `gwr`,
                            load: loadGwr,
                            name: `Giveaway Winning Ratio`,
                            sg: true,
                            type: `giveaways`
                        },
                        {
                            description: `
                                <ul>
                                    <li>Allows you to quickly enter giveaways from any page.</li>
                                </ul>
                            `,
                            features: [
                                {
                                    id: `elgb_d`,
                                    name: `Pop up the giveaway description before entering, if any.`,
                                    sg: true
                                },
                                {
                                    id: `elgb_r`,
                                    name: `Pop up a box to reply to the giveaway when entering.`,
                                    sg: true
                                }
                            ],
                            id: `elgb`,
                            load: loadElgb,
                            name: `Enter/Leave Giveaway Button`,
                            sg: true,
                            type: `giveaways`
                        },
                        {
                            description: `
                                <ul>
                                    <li>Allows you to easily see the list of groups for a giveaway.</li>
                                    <li>Groups that you are a member of are highlighted.</li>
                                </ul>
                                <img src="https://camo.githubusercontent.com/47417953189500c9f18a5d30bf528e1b8ce30342/687474703a2f2f692e696d6775722e636f6d2f504e37337068762e706e67"/>
                            `,
                            features: [
                                {
                                    id: `ggl_m`,
                                    name: `Only show groups that you're a member of.`,
                                    sg: true
                                },
                                {
                                    id: `ggl_p`,
                                    name: `Only load groups after clicking the group icon in the giveaway, as a popup.`,
                                    sg: true
                                }
                            ],
                            id: `ggl`,
                            load: loadGgl,
                            name: `Giveaway Groups Loader`,
                            sg: true,
                            type: `giveaways`
                        },
                        {
                            description: `
                                <ul>
                                    <li>Adds a link to the winners page of ended giveaways.</li>
                                </ul>
                                <img src="https://camo.githubusercontent.com/c7253c39157cbde30b3337b90267260de33e4cab/687474703a2f2f692e696d6775722e636f6d2f67326b614644392e706e67"/>
                            `,
                            id: `gwl`,
                            load: loadGwl,
                            name: `Giveaway Winners Link`,
                            sg: true,
                            type: `giveaways`
                        },
                        {
                            description: `
                                <ul>
                                    <li>Allows you to save giveaway templates for later use.</li>
                                </ul>
                            `,
                            id: `gts`,
                            name: `Giveaway Templates`,
                            sg: true,
                            type: `giveaways`
                        },
                        {
                            description: `
                                <ul>
                                    <li>Allows you to create multiple giveaways or a train of giveaways (multiple giveaways that are linked to one another).</li>
                                    <li>You can view detailed information about a giveaway by hovering over it.</li>
                                    <li>You can re-order/remove the giveaways by dragging and dropping them in the correspondent areas.</li>
                                    <li>All giveaways will be created without reviewing or validating, so make sure all fields are filled correctly, or the giveaway creation will fail (if a train is being created, the failed giveaway will be disconnected and the previous giveaway will be connected to the next instead).</li>
                                </ul>
                                <img src="https://camo.githubusercontent.com/1b21ba088a8cdeefbc8787636e7084eddb1c5b84/687474703a2f2f692e696d6775722e636f6d2f5066396a37674e2e706e67"/>
                            `,
                            id: `mgc`,
                            load: loadMgc,
                            name: `Multiple Giveaways Creator`,
                            sg: true,
                            type: `giveaways`
                        },
                        {
                            description: `
                                <ul>
                                    <li>Allows you to sticky groups so that they appear at the top of the group list while creating a giveaway.</li>
                                </ul>
                                <img src="https://camo.githubusercontent.com/171d8b4db67798b71e9d758ae1e25e5314c5dd4b/687474703a2f2f692e696d6775722e636f6d2f3551654b4f37652e706e67"/>
                            `,
                            id: `sgg`,
                            load: loadSgg,
                            name: `Stickied Giveaway Groups`,
                            sg: true,
                            type: `giveaways`
                        },
                        {
                            decription: `
                                <ul>
                                    <li>Calculates how much real CV you should get for a giveaway.</li>
                                    <li>It's only accurate if you have synced the bundle list from the settings menu and also scanned your sent giveaways using User Giveaways Data. But even then, it's only 100% accurate if the user has 0 not received giveaways, since User Giveaways Data doesn't currently know if the giveaways have been received or not.</li>
                                </ul>
                                <p>In the example below, as I had previously given away 3 copies of Max Payne 3, the sixth copy is worth 10% less (18P). So the 3 new copies would equal 58P:</p>
                                <img src="https://camo.githubusercontent.com/7b57fc903dddbf988ec3b700412fbfcd16bfed3a/687474703a2f2f692e696d6775722e636f6d2f6f4347537455712e706e67"/>
                            `,
                            id: `rcvc`,
                            load: loadRcvc,
                            name: `Real CV Calculator`,
                            sg: true,
                            type: `giveaways`
                        },
                        {
                            description: `
                                <ul>
                                    <li>Allows you to send all your unsent gifts directly from your created page.</li>
                                </ul>
                                <img src="https://camo.githubusercontent.com/2c54c2015bc7bd8c3aa5f79afa3a4065e4d6e94a/687474703a2f2f692e696d6775722e636f6d2f363977626b55502e706e67"/>
                            `,
                            id: `ugs`,
                            load: loadUgs,
                            name: `Unsent Gifts Sender`,
                            sg: true,
                            type: `giveaways`
                        },
                        {
                            description: `
                                <ul>
                                    <li>Allows you to remove entries for your owned games.</li>
                                </ul>
                                <p>The feature removes new games faster if you use a Steam API key (insert it in section 9).</p>
                            `,
                            features: [
                                {
                                    id: `er_s`,
                                    name: `Remove entries when syncing through SG.`,
                                    sg: true
                                }
                            ],
                            id: `er`,
                            load: loadEr,
                            name: `Entries Remover`,
                            sg: true,
                            type: `giveaways`
                        },
                        {
                            description: `
                                <ul>
                                    <li>Allows you to easily activate won games.</li>
                                    <li>The key is automatically copied when clicking the button.</li>
                                </ul>
                                <img src="https://camo.githubusercontent.com/e16ae91d578df91e788ec62ea9623984b71247b9/687474703a2f2f692e696d6775722e636f6d2f30686e593079442e706e67"/>
                            `,
                            id: `sal`,
                            load: loadSal,
                            name: `Steam Activation Links`,
                            sg: true,
                            type: `giveaways`
                        },
                        {
                            description: `
                                <ul>
                                    <li>Disables the enter button for giveaways for games that you have hidden.</li>
                                </ul>
                            `,
                            id: `hgebd`,
                            name: `[NEW] Hidden Games Enter Button Disabler`,
                            sg: true,
                            type: `giveaways`
                        },
                        {
                            description: `
                                <ul>
                                    <li>Adds Is There Any Deal? info to giveaway pages, including the best current deal, the historical lowest price (optional) and the list of bundles that the game has been in, with a cache that can be updated after 24 hours since the last check.</li>
                                </ul>
                                <img src="https://camo.githubusercontent.com/0d413190b988c4d78ca53abd89f4101b60693491/687474703a2f2f692e696d6775722e636f6d2f65704632616d332e706e67"/>
                            `,
                            features: [
                                {
                                    id: `itadi_h`,
                                    name: `Also load the historical lowest price of the game (takes longer).`,
                                    sg: true
                                }
                            ],
                            id: `itadi`,
                            load: loadItadi,
                            name: `Is There Any Deal? Info`,
                            sg: true,
                            type: `giveaways`
                        },
                        {
                            description: `
                                <ul>
                                    <li>Allows you to move across trains using hotkeys (use Ctrl with the hotkeys to open the giveaways in new tabs). Does not work if you are typing in an input/text area.</li>
                                </ul>
                            `,
                            id: `npth`,
                            load: loadNpth,
                            name: `Next/Previous Train Hotkeys`,
                            input: true,
                            sg: true,
                            type: `giveaways`
                        },
                        {
                            description: `
                                <ul>
                                    <li>Extracts all giveaways from a train, so you don't need to navigate through the entire train to find the ones you're interested in.</li>
                                </ul>
                            `,
                            id: `tge`,
                            name: `[NEW] Train Giveaways Extractor`,
                            sg: true,
                            type: `giveaways`
                        },
                        {
                            // by Royalgamer06
                            description: `
                                <ul>
                                    <li>Provides search links for the game when you cannot access a giveaway.</li>
                                </ul>
                                <img src="https://camo.githubusercontent.com/030a1474fdbb0b0bbc12b5e0e07937934de227eb/687474703a2f2f692e696d6775722e636f6d2f474d36625833732e706e67"/>
                            `,
                            id: `gesl`,
                            load: loadGesl,
                            name: `Giveaway Error Search Links`,
                            sg: true,
                            type: `giveaways`
                        },
                        {
                            description: `
                                <ul>
                                    <li>Allows you to search the archive by exact title/app id.</li>
                                </ul>
                            `,
                            id: `as`,
                            name: `Archive Searcher`,
                            sg: true,
                            type: `giveaways`
                        },
                        {
                            description: `
                                <ul>
                                    <li>Moves the active discussions to the top/sidebar of the page.</li>
                                </ul>
                                <p>More about the sidebar option:</p>
                                <ul>
                                    <li>If you have Advanced Giveaway Search enabled, it will be hidden and triggered when hovering hover the search field.</li>
                                    <li>The username and avatar of the user who last posted will be removed (the button to go to the last comment will remain intact).</li>
                                    <li>Accurate Timestamps will not run for any timestamps inside the active discussions.</li>
                                    <li>Any user tags you might have saved for users will be hidden inside the active discussions (they will still be visible if you click the tag button to edit them).</li>
                                </ul>
                                <img src="https://camo.githubusercontent.com/9f0ebf4ffbf3489529819653853c6cc725cc0047/687474703a2f2f692e696d6775722e636f6d2f584565726f566e2e706e67"/>
                            `,
                            id: `adots`,
                            load: loadAdots,
                            name: `Active Discussions On Top/Sidebar`,
                            options: {
                                title: `Move to:`,
                                values: [`Top`, `Sidebar`]
                            },
                            sg: true,
                            type: `discussions`
                        },
                        {
                            description: `
                                <ul>
                                    <li>Allows you to sort discussions by creation date (from newest to oldest).</li>
                                </ul>
                                <img src="https://camo.githubusercontent.com/9fd9d276d5c6fc9377b2b9f36fe69c8d4d39562d/687474703a2f2f692e696d6775722e636f6d2f704d416f5671392e706e67"/>
                            `,
                            id: `ds`,
                            name: `Discussions Sorter`,
                            sg: true,
                            type: `discussions`
                        },
                        {
                            description: `
                                <ul>
                                    <li>Allows you to highlight discussions.</li>
                                </ul>
                                <img src="https://camo.githubusercontent.com/62f0877abb79ad392f24d92bc096c947398f9344/687474703a2f2f692e696d6775722e636f6d2f41326f313479772e706e67"/>
                            `,
                            id: `dh`,
                            load: loadDh,
                            name: `Discussions Highlighter`,
                            sg: true,
                            type: `discussions`
                        },
                        {
                            description: `
                                <ul>
                                    <li>Skips to the comments of a discussion if you've used pagination navigation. For example, you enter a discussion and go to page 2, on page 2 the feature will skip the main post and take you directly to the comments.</li>
                                </ul>
                            `,
                            id: `mps`,
                            load: loadMps,
                            name: `Main Post Skipper`,
                            sg: true,
                            type: `discussions`
                        },
                        {
                            description: `
                                <ul>
                                    <li>Hides the main post of discussions and adds a button that pops it up.</li>
                                </ul>
                                <img src="https://camo.githubusercontent.com/8bc51996cbe378add7adecf071cdc747a711e384/687474703a2f2f692e696d6775722e636f6d2f6c4139514e4c4d2e706e67"/>
                            `,
                            features: [
                                {
                                    id: `mpp_r`,
                                    name: `Only hide the main post if it has been marked as read (requires Comment Tracker).`,
                                    sg: true
                                }
                            ],
                            id: `mpp`,
                            name: `Main Post Popup`,
                            sg: true,
                            type: `discussions`
                        },
                        {
                            description: `
                                <ul>
                                    <li>Detects if the discussion you're posting a comment to has been edited since the time you opened it and saves your comment correctly.</li>
                                    <li>This fixes a bug on SteamGifts that does not save your comment to a discussion if you submit it after the discussion has been edited.</li>
                                    <li>The feature also replaces every single native "Submit" button with its own "Submit" button, to gather info about comments when posting, which is required for some comment features, like Comment History.</li>
                                </ul>
                            `,
                            id: `ded`,
                            load: loadDed,
                            name: `Discussion Edits Detector`,
                            sg: true,
                            st: true,
                            type: `discussions`
                        },
                        {
                            load: startDiscussionFeatures
                        },
                        {
                            description: `
                                <ul>
                                    <li>Adds a mention link to the comment replied to.</li>
                                </ul>
                                <img src="https://camo.githubusercontent.com/696ce80a48aa3b78f15dc9deb856fa321a88fd68/687474703a2f2f692e696d6775722e636f6d2f5367457a6a58432e706e67"/>
                            `,
                            id: `rml`,
                            load: loadRml,
                            name: `Reply Mention Link`,
                            sg: true,
                            st: true,
                            type: `comments`
                        },
                        {
                            description: `
                                <ul>
                                    <li>Adds a panel that helps you with comment formatting.</li>
                                    <li>Has an option that automatically formats pasted links/images.</li>
                                </ul>
                                <img src="https://camo.githubusercontent.com/b542cdc0dfcc08a52936603e1da2dcc855ebd33a/687474703a2f2f692e696d6775722e636f6d2f673943336530672e706e67"/>
                            `,
                            features: [
                                {
                                    id: `cfh_i`,
                                    name: `Italic`,
                                    sg: true,
                                    st: true
                                },
                                {
                                    id: `cfh_b`,
                                    name: `Bold`,
                                    sg: true,
                                    st: true
                                },
                                {
                                    id: `cfh_s`,
                                    name: `Spoiler`,
                                    sg: true,
                                    st: true
                                },
                                {
                                    id: `cfh_st`,
                                    name: `Strikethrough`,
                                    sg: true,
                                    st: true
                                },
                                {
                                    id: `cfh_h1`,
                                    name: `Heading 1`,
                                    sg: true,
                                    st: true
                                },
                                {
                                    id: `cfh_h2`,
                                    name: `Heading 2`,
                                    sg: true,
                                    st: true
                                },
                                {
                                    id: `cfh_h3`,
                                    name: `Heading 3`,
                                    sg: true,
                                    st: true
                                },
                                {
                                    id: `cfh_bq`,
                                    name: `Blockquote`,
                                    sg: true,
                                    st: true
                                },
                                {
                                    id: `cfh_lb`,
                                    name: `Line Break`,
                                    sg: true,
                                    st: true
                                },
                                {
                                    id: `cfh_ol`,
                                    name: `Ordered List`,
                                    sg: true,
                                    st: true
                                },
                                {
                                    id: `cfh_ul`,
                                    name: `Unordered List`,
                                    sg: true,
                                    st: true
                                },
                                {
                                    id: `cfh_ic`,
                                    name: `Inline Code`,
                                    sg: true,
                                    st: true
                                },
                                {
                                    id: `cfh_lc`,
                                    name: `Line Code`,
                                    sg: true,
                                    st: true
                                },
                                {
                                    id: `cfh_pc`,
                                    name: `Paragraph Code`,
                                    sg: true,
                                    st: true
                                },
                                {
                                    id: `cfh_l`,
                                    name: `Link`,
                                    sg: true,
                                    st: true
                                },
                                {
                                    id: `cfh_img`,
                                    name: `Image`,
                                    sg: true,
                                    st: true
                                },
                                {
                                    id: `cfh_t`,
                                    name: `Table`,
                                    sg: true,
                                    st: true
                                },
                                {
                                    id: `cfh_e`,
                                    name: `Emojis`,
                                    sg: true,
                                    st: true
                                },
                                {
                                    id: `cfh_g`,
                                    name: `Giveaway Encrypter`,
                                    sg: true,
                                    st: true
                                }
                            ],
                            id: `cfh`,
                            load: loadCfh,
                            name: `Comment Formatting Helper`,
                            sg: true,
                            st: true,
                            type: `comments`
                        },
                        {
                            description: `
                                <ul>
                                    <li>Moves the reply box to the top of the page.</li>
                                </ul>
                            `,
                            id: `rbot`,
                            load: loadRbot,
                            name: `Reply Box On Top`,
                            sg: true,
                            st: true,
                            type: `comments`
                        },
                        {
                            description: `
                                <ul>
                                    <li>Adds a button that pops up a box which allows you to add comments to the page.</li>
                                    <li>Has Discussion Edit Detector built-in.</li>
                                </ul>
                                <img src="https://camo.githubusercontent.com/7227b3cad4190a531ee5d109303fec7fe747b65d/687474703a2f2f692e696d6775722e636f6d2f436c477a424e532e706e67"/>
                            `,
                            id: `rbp`,
                            name: `Reply Box Popup`,
                            sg: true,
                            st: true,
                            type: `comments`
                        },
                        {
                            description: `
                                <ul>
                                    <li>Allows you to reply to multiple comments at the same time, since each comment has their own comment box and the page isn't reloaded after submitting it.</li>
                                    <li>Has Discussion Edit Detector built-in.</li>
                                </ul>
                            `,
                            id: `mr`,
                            load: loadMr,
                            name: `Multi-Reply`,
                            sg: true,
                            st: true,
                            type: `comments`
                        },
                        {
                            description: `
                                <ul>
                                    <li>Allows you to reply to your messages directly from your inbox.</li>
                                    <li>Has Multi-Reply built-in.</li>
                                </ul>
                            `,
                            id: `rfi`,
                            load: loadRfi,
                            name: `Reply From Inbox`,
                            sg: true,
                            st: true,
                            type: `comments`
                        },
                        {
                            description: `
                                <ul>
                                    <li>Fades giveaways / discussions / support tickets / trades you have already visited. Note that this does not mean every comment inside the page has been read, it simply means you have visited it.</li>
                                    <li>Keeps track of comments / editions.</li>
                                    <li>To mark a comment as read/unread, click on the eye icon below it.</li>
                                    <li>Keeps track of discussion comments and shows how many comments are unread on the discussions page.</li>
                                    <li>Allows you to go to the first unread comment of a discussion or mark all its comments as read directly from the discussions page.</li>
                                </ul>
                                <img src="https://camo.githubusercontent.com/2688dcd381fc20a68c3f7d8e5c3aa4b7366efa99/687474703a2f2f692e696d6775722e636f6d2f366e414c6838792e706e67"/>
                                <img src="https://camo.githubusercontent.com/3f0bbfef8a301dcfc91bec0d62e9d20c0b6c45e9/687474703a2f2f692e696d6775722e636f6d2f554362353576692e706e67"/>
                                <img src="https://camo.githubusercontent.com/94672a1b6ebb4adeaad8c311c184ddded32f6afc/687474703a2f2f692e696d6775722e636f6d2f3866504d776a472e706e67"/>
                            `,
                            features: [
                                {
                                    id: `ct_r`,
                                    name: `Search for the first unread comment in reverse order (from newest to oldest).`,
                                    sg: true,
                                    st: true
                                }
                            ],
                            id: `ct`,
                            load: loadCt,
                            name: `Comment Tracker`,
                            sg: true,
                            st: true,
                            type: `comments`
                        },
                        {
                            description: `
                                <ul>
                                    <li>Keeps track of the comments you make (they can be seen from header menu).</li>
                                    <li>This feature <strong>only</strong> works with Main Comment Box Popup, Discussion Edit Detector and Multi-Reply / Reply From Inbox. If you submit a comment though SG's native comment box, the comment will not be tracked.</li>
                                </ul>
                            `,
                            id: `ch`,
                            name: `Comment History`,
                            sg: true,
                            st: true,
                            type: `comments`
                        },
                        {
                            load: startCommentFeatures
                        },
                        {
                            description: `
                                <ul>
                                    <li>Keeps track of users from the database and detects username changes every month and every time someone loads the username history of a user.</li>
                                    <li>Users that are not already in the database are added when a user loads their username history.</li>
                                </ul>
                            `,
                            id: `uh`,
                            load: loadUh,
                            name: `Username History`,
                            sg: true,
                            type: `users`
                        },
                        {
                            description: `
                                <ul>
                                    <li>Allows you to add notes to users.</li>
                                    <li>The notes are tied to the user's Steam id, so they do not vanish when a user changes their username.</li>
                                    <li>If a user has notes saved, the icon will be full. Otherwise it will be empty.</li>
                                </ul>
                            `,
                            features: [
                                {
                                    id: `un_p`,
                                    name: `Pop up when whitelisting/blacklisting a user.`,
                                    sg: true
                                }
                            ],
                            id: `un`,
                            load: loadUn,
                            name: `User Notes`,
                            sg: true,
                            st: true,
                            type: `users`
                        },
                        {
                            description: `
                                <ul>
                                    <li>Allows you to filter users' giveaways, discussions and posts.</li>
                                </ul>
                            `,
                            features: [
                                {
                                    id: `uf_g`,
                                    name: `Automatically hide giveaways from blacklisted users.`,
                                    sg: true
                                },
                                {
                                    id: `uf_d`,
                                    name: `Automatically hide discussions from blacklisted users.`,
                                    sg: true
                                },
                                {
                                    id: `uf_p`,
                                    name: `Automatically hide posts from blacklisted users.`,
                                    sg: true
                                }
                            ],
                            id: `uf`,
                            load: loadUf,
                            name: `User Filters`,
                            sg: true,
                            type: `users`
                        },
                        {
                            description: `
                                <ul>
                                    <li>Allows you to see which groups you have in common with a user.</li>
                                </ul>
                            `,
                            id: `sgc`,
                            load: loadSgc,
                            name: `Shared Groups Checker`,
                            sg: true,
                            type: `users`
                        },
                        {
                            description: `
                                <ul>
                                    <li>Allows you to view the real won/sent CV of users directly from their profile.</li>
                                </ul>
                            `,
                            features: [
                                {
                                    id: `rwscvl_a`,
                                    name: `Automatically load the CV when opening a user's profile.`,
                                    sg: true
                                },
                                {
                                    id: `rwscvl_r`,
                                    name: `Link SGTool's reverse page (from newest to oldest).`,
                                    sg: true
                                }
                            ],
                            id: `rwscvl`,
                            load: loadRwscvl,
                            name: `Real Won/Sent CV Links`,
                            sg: true,
                            type: `users`
                        },
                        {
                            description: `
                                <ul>
                                    <li>Shows data about a user's giveaways.</li>
                                </ul>
                            `,
                            id: `ugd`,
                            load: loadUgd,
                            name: `User Giveaways Data`,
                            sg: true,
                            type: `users`
                        },
                        {
                            description: `
                                <ul>
                                    <li>Allows you to check if a user has any not activated/multiple wins.</li>
                                </ul>
                            `,
                            features: [
                                {
                                    description: ``,
                                    features: [
                                        {
                                            description: ``,
                                            id: `namwc_h_i`,
                                            name: `Use icons instead of colors.`,
                                            sg: true
                                        },
                                        {
                                            id: `namwc_h_f`,
                                            name: `Only highlight users who failed to pass the check.`,
                                            sg: true
                                        },
                                        {
                                            id: `namwc_h_m`,
                                            name: `Highlight multiple wins as positive.`,
                                            sg: true
                                        }
                                    ],
                                    id: `namwc_h`,
                                    name: `Highlight checked users.`,
                                    sg: true,
                                    st: true
                                }
                            ],
                            id: `namwc`,
                            load: loadNamwc,
                            name: `Not Activated/Multiple Wins Checker`,
                            sg: true,
                            type: `users`
                        },
                        {
                            description: ``,
                            id: `nrf`,
                            load: loadNrf,
                            name: `Not Received Finder`,
                            sg: true,
                            type: `users`
                        },
                        {
                            description: ``,
                            id: `swr`,
                            load: loadSwr,
                            name: `Sent/Won Ratio`,
                            sg: true,
                            type: `users`
                        },
                        {
                            description: ``,
                            id: `luc`,
                            load: loadLuc,
                            name: `Level Up Calculator`,
                            sg: true,
                            type: `users`
                        },
                        {
                            description: `
                                <ul>
                                    <li>Allows you to easily go to a user's SteamGifts profile from SteamTrades.</li>
                                </ul>
                            `,
                            id: `sgpb`,
                            load: loadSgpb,
                            name: `SteamGifts Profile Button`,
                            st: true,
                            type: `users`
                        },
                        {
                            description: `
                                <ul>
                                    <li>Allows you to easily go to a user's SteamTrades profile from SteamGifts.</li>
                                </ul>
                            `,
                            id: `stpb`,
                            load: loadStpb,
                            name: `SteamTrades Profile Button`,
                            sg: true,
                            type: `users`
                        },
                        {
                            description: ``,
                            features: [
                                {
                                    id: `wbc_b`,
                                    name: `Show blacklist information.`,
                                    sg: true
                                },
                                {
                                    id: `wbc_h`,
                                    name: `Highlight users who have whitelisted/blacklisted you.`,
                                    sg: true,
                                    st: true
                                },
                                {
                                    id: `wbc_n`,
                                    name: `Save automatic notes to users that you returned whitelist/blacklist for.`,
                                    sg: true
                                }
                            ],
                            id: `wbc`,
                            load: loadWbc,
                            name: `Whitelist/Blacklist Checker`,
                            sg: true,
                            type: `users`
                        },
                        {
                            features: [
                                {
                                    colors: true,
                                    id: `wbh_w`,
                                    name: `Color whitelisted users instead of adding a heart icon next to their username.`,
                                    sg: true,
                                    st: true
                                },
                                {
                                    colors: true,
                                    id: `wbh_b`,
                                    name: `Color blacklisted users instead of adding a heart icon next to their username.`,
                                    sg: true,
                                    st: true
                                }
                            ],
                            id: `wbh`,
                            load: loadWbh,
                            name: `Whitelist/Blacklist Highlighter`,
                            sg: true,
                            st: true,
                            type: `users`
                        },
                        {
                            id: `wbs`,
                            name: `Whitelist/Blacklist Sorter`,
                            sg: true,
                            type: `users`
                        },
                        {
                            id: `iwh`,
                            load: loadIwh,
                            name: `Inbox Winners Highlighter`,
                            sg: true,
                            type: `users`
                        },
                        {
                            description: `
                                <ul>
                                    <li>Highlights groups that you are a member of.</li>
                                </ul>
                            `,
                            id: `gh`,
                            load: loadGh,
                            name: `Groups Highlighter`,
                            sg: true,
                            type: `groups`
                        },
                        {
                            id: `gs`,
                            load: loadGs,
                            name: `Group Stats`,
                            sg: true,
                            type: `groups`
                        },
                        {
                            description: `
                                <ul>
                                    <li>When you click on a Steam store link from SG or ST, you get redirected to the Steam Community or SteamDB page of the game if it has been removed.</li>
                                </ul>
                            `,
                            id: `rgr`,
                            load: loadRgr,
                            name: `Removed Game Redirecter`,
                            options: {
                                title: `Redirect to:`,
                                values: [`Steam Community`, `SteamDB`]
                            },
                            sg: true,
                            st: true,
                            type: `games`
                        },
                        {
                            features: [
                                {
                                    id: `egh_t`,
                                    name: `Enable for discussion tables.`,
                                    sg: true
                                }
                            ],
                            id: `egh`,
                            load: loadEgh,
                            name: `Entered Games Highlighter`,
                            sg: true,
                            type: `games`
                        },
                        {
                            features: [
                                {
                                    id: `gt_t`,
                                    name: `Enable for discussion tables.`,
                                    sg: true
                                }
                            ],
                            id: `gt`,
                            load: loadGt,
                            name: `Game Tags`,
                            sg: true,
                            type: `games`
                        },
                        {
                            description: `
                                <ul>
                                    <li>Shows information about games.</li>
                                </ul>
                            `,
                            features: [
                                {
                                    id: `gc_t`,
                                    name: `Enable for discussion tables.`,
                                    sg: true
                                },
                                {
                                    features: [
                                        {
                                            id: `gc_s_i`,
                                            name: `Use icons instead of initials.`,
                                            sg: true
                                        }
                                    ],
                                    id: `gc_s`,
                                    name: `Enable the simplified version (shows initials instead of full names).`,
                                    sg: true
                                },
                                {
                                    colors: true,
                                    id: `gc_h`,
                                    name: `[NEW] Hidden`,
                                    sg: true
                                },
                                {
                                    colors: true,
                                    description: `
                                        <ul>
                                            <li>Shows how many giveaways you have already made for a game and how much CV you should get for a new giveaway.</li>
                                            <li>In order for the feature to work properly, you must scan your profile with User Giveaways Data (currently this must be done every time your giveaways end, if you want to keep it updated).</li>
                                            <li>The information is not 100% accurate because it cannot know if all the copies were sent when it comes to giveaways with multiple copies, at the moment.</li>
                                        </ul>
                                    `,
                                    id: `gc_gi`,
                                    name: `[NEW] Giveaway Info`,
                                    sg: true
                                },
                                {
                                    features: [
                                        {
                                            id: `gc_r_s`,
                                            name: `Show the percentage and number of reviews next to the icon.`,
                                            sg: true
                                        }
                                    ],
                                    id: `gc_r`,
                                    name: `Rating`,
                                    sg: true
                                },
                                {
                                    colors: true,
                                    features: [
                                        {
                                            id: `gc_b_r`,
                                            name: `Reverse (show only if not bundled).`,
                                            sg: true
                                        }
                                    ],
                                    id: `gc_b`,
                                    name: `Bundled`,
                                    sg: true
                                },
                                {
                                    colors: true,
                                    id: `gc_o`,
                                    name: `Owned`,
                                    sg: true
                                },
                                {
                                    colors: true,
                                    id: `gc_w`,
                                    name: `Wishlisted`,
                                    sg: true
                                },
                                {
                                    colors: true,
                                    id: `gc_i`,
                                    name: `Ignored`,
                                    sg: true
                                },
                                {
                                    colors: true,
                                    id: `gc_rm`,
                                    name: `Removed`,
                                    sg: true
                                },
                                {
                                    colors: true,
                                    id: `gc_ea`,
                                    name: `Early Access`,
                                    sg: true
                                },
                                {
                                    colors: true,
                                    id: `gc_tc`,
                                    name: `Trading Cards`,
                                    sg: true
                                },
                                {
                                    colors: true,
                                    id: `gc_a`,
                                    name: `Achievements`,
                                    sg: true
                                },
                                {
                                    colors: true,
                                    id: `gc_mp`,
                                    name: `Multiplayer`,
                                sg: true
                                },
                                {
                                    colors: true,
                                    id: `gc_sc`,
                                    name: `Steam Cloud`,
                                    sg: true
                                },
                                {
                                    colors: true,
                                    id: `gc_l`,
                                    name: `Linux`,
                                    sg: true
                                },
                                {
                                    colors: true,
                                    id: `gc_m`,
                                    name: `Mac`,
                                    sg: true
                                },
                                {
                                    colors: true,
                                    id: `gc_dlc`,
                                    name: `DLC`,
                                    sg: true
                                },
                                {
                                    colors: true,
                                    id: `gc_p`,
                                    name: `Package`,
                                    sg: true
                                },
                                {
                                    colors: true,
                                    features: [
                                        {
                                            id: `gc_g_udt`,
                                            name: `User-Defined Tags`,
                                            sg: true
                                        }
                                    ],
                                    id: `gc_g`,
                                    name: `Genres`,
                                    sg: true
                                }
                            ],
                            id: `gc`,
                            load: loadGc,
                            name: `Game Categories`,
                            sg: true,
                            type: `games`
                        },
                        {
                            description: ``,
                            id: `ut`,
                            load: loadUt,
                            name: `User Tags`,
                            sg: true,
                            st: true,
                            type: `users`
                        },
                        {
                            description: `
                                <ul>
                                    <li>Pops out user/group info when hovering their avatars.</li>
                                </ul>
                            `,
                            id: `ap`,
                            load: loadAp,
                            name: `Avatar Popout`,
                            sg: true,
                            type: `general`
                        },
                        {
                            load: startProfileFeatures
                        },
                        {
                            load: startGameFeatures
                        },
                        {
                            load: startGiveawayFeatures
                        },
                        {
                            load: startUserFeatures
                        },
                        {
                            description: `
                                <ul>
                                    <li>Allows you to endlessly scroll through pages.</li>
                                </ul>
                            `,
                            features: [
                                {
                                    id: `es_g`,
                                    name: `Enable for giveaways in the main page.`,
                                    sg: true
                                },
                                {
                                    id: `es_d`,
                                    name: `Enable for discussions/tickets.`,
                                    sg: true
                                },
                                {
                                    id: `es_t`,
                                    name: `Enable for trades`,
                                    st: true
                                },
                                {
                                    id: `es_c`,
                                    name: `Enable for comments.`,
                                    sg: true,
                                    st: true
                                },
                                {
                                    id: `es_l`,
                                    name: `Enable for lists.`,
                                    sg: true,
                                    st: true
                                },
                                {
                                    id: `es_r`,
                                    name: `Enable reverse scrolling.`,
                                    sg: true
                                }
                            ],
                            id: `es`,
                            load: loadEs,
                            name: `Endless Scrolling`,
                            sg: true,
                            st: true,
                            type: `general`
                        },
                        {
                            description: `
                                <ul>
                                    <li>Opens all links in the same tab.</li>
                                </ul>
                            `,
                            id: `sto`,
                            load: loadSto,
                            name: `Same Tab Opener`,
                            sg: true,
                            st: true,
                            type: `general`
                        }
                    ];
                    esgst.endlessFeatures = [];
                    esgst.gameFeatures = [];
                    esgst.userFeatures = [];
                    esgst.giveawayFeatures = [];
                    esgst.currentGiveaways = [];
                    esgst.popupGiveaways = [];
                    esgst.discussions = [];
                    esgst.discussionFeatures = [];
                    esgst.commentFeatures = [];
                    esgst.profileFeatures = [];
                    for (var key in esgst.defaultValues) {
                        esgst[key] = getValue(key);
                    }
                    if (esgst.sg) {
                        checkSync();
                    }
                    addStyles();
                    esgst.toExecute = [];
                    for (i = 0, n = esgst.features.length; i < n; ++i) {
                        loadFeature(esgst.features[i]);
                    }
                    delete esgst.settings.users;
                    delete esgst.settings.comments;
                    delete esgst.settings.giveaways;
                    delete esgst.settings.groups;
                    GM_setValue(`settings`, JSON.stringify(esgst.settings));
                    addHeaderMenu();
                    checkNewVersion();
                    var sibling, height;
                    style += `
                        .esgst-pgb-button, .esgst-gf-button {
                            border: 1px solid #d2d6e0;
                            border-top: none;
                            background-color: #e1e6ef;
                            background-image: linear-gradient(rgba(255, 255, 255, 0.15) 0%, rgba(255, 255, 255, 0) 100%);color: #6b7a8c;
                            cursor: pointer;
                            margin-bottom: 15px;
                            padding: 3px;
                            text-align: center;
                            border-radius: 0 0 4px 4px;
                        }
                        .esgst-pgb-button:hover, .esgst-gf-button:hover {
                            background-image:linear-gradient(rgba(255, 255, 255, 0.4) 0%, rgba(255, 255, 255, 0) 100%);
                        }
                    `;
                    if (esgst.fh) {
                        esgst.header.classList.add(`esgst-fh`);
                        if (esgst.featuredContainer && ((esgst.hfc && !esgst.giveawaysPath) || !esgst.hfc)) {
                            sibling = esgst.featuredContainer;
                        } else {
                            sibling = esgst.pageOuterWrap;
                        }
                        sibling.classList.add(`esgst-fh-sibling`);
                        height = esgst.header.offsetHeight;
                        esgst.pageTop += height;
                        esgst.commentsTop += height;
                        style += `
                            .esgst-fh-sibling {
                                margin-top: ${height}px;
                            }
                        `;
                    }
                    if (esgst.ff) {
                        esgst.footer.classList.add(`esgst-ff`);
                        esgst.pageOuterWrap.classList.add(`esgst-ff-sibling`);
                    }
                    if ((esgst.pnot || esgst.es) && esgst.paginationNavigation && esgst.mainPageHeading) {
                        esgst.paginationNavigation.classList.add(`page_heading_btn`);
                        esgst.mainPageHeading.appendChild(esgst.paginationNavigation);
                    }
                    var button, button1, button2, button3, title, html, rows, mainPageHeadingBefore = document.createDocumentFragment();
                    if (esgst.sg) {
                        if (esgst.wbc) {
                            esgst.wbcButton = button = document.createElement(`div`);
                            button.className = `esgst-hidden esgst-heading-button`;
                            if (esgst.wbc_b) {
                                title = `Check for whitelists/blacklists.`;
                                html = `
                                    <i class="fa fa-heart"></i>
                                    <i class="fa fa-ban"></i>
                                    <i class="fa fa-question-circle"></i>
                                `;
                            } else {
                                title = `Check for whitelists.`;
                                html = `
                                    <i class="fa fa-heart"></i>
                                    <i class="fa fa-question-circle"></i>
                                `;
                            }
                            button.title = title;
                            button.innerHTML = html;
                            mainPageHeadingBefore.appendChild(button);
                            addWBCButton(true, button);
                        }
                    }
                    if (esgst.giveawaysPath) {
                        if (esgst.hfc && esgst.featuredContainer) {
                            esgst.featuredContainer.classList.add(`esgst-hidden`);
                        }
                        if (esgst.at && esgst.at_g) {
                            esgst.endlessFeatures.push(getTimestamps);
                            getTimestamps(document);
                        }
                        if (esgst.ags) {
                            addAgsPanel();
                            style += `
                                .esgst-ags-panel {
                                    margin: 0 0 15px 0;
                                }

                                .esgst-ags-panel >* {
                                    display: block;
                                    font-size: 0;
                                }

                                .esgst-ags-filter {
                                    display: inline-block;
                                    font-size: 0;
                                    margin: 5px;
                                }

                                .esgst-ags-filter >* {
                                    display: inline-block;
                                    font-size: 12px;
                                    padding: 0 5px !important;
                                    width: 74px;
                                }

                                .esgst-ags-checkbox-filter {
                                    font-size: 12px;
                                    margin: 5px;
                                }
                            `;
                        }
                        if (esgst.gv) {
                            loadGv();
                        }
                        if (esgst.gf) {
                            addGfContainer();
                        }
                        if (esgst.gwc) {
                            button = document.createElement(`div`);
                            button.className = `esgst-heading-button`;
                            button.title = `Sort giveaways by winning chance (highest to lowest).`;
                            button.innerHTML = `
                                <i class="fa fa-area-chart"></i>
                                <i class="fa fa-sort-numeric-desc"></i>
                            `;
                            mainPageHeadingBefore.appendChild(button);
                            addGwcSortButton(button);
                        }
                    } else {
                        if (esgst.groupPath && esgst.gf) {
                            addGfContainer();
                        }
                        if (esgst.createdPath) {
                            if (esgst.ugs) {
                                button = document.createElement(`div`);
                                button.className = `esgst-heading-button`;
                                button.title = `Send unsent gifts.`;
                                button.innerHTML = `
                                    <i class="fa fa-gift"></i>
                                    <i class="fa fa-send"></i>
                                `;
                                mainPageHeadingBefore.appendChild(button);
                                addUGSButton(button);
                            }
                        } else if (esgst.enteredPath) {
                            if (esgst.er) {
                                button = document.createElement(`div`);
                                button.className = `esgst-heading-button`;
                                button.title = `Remove entries for owned games.`;
                                button.innerHTML = `
                                    <i class="fa fa-tag"></i>
                                    <i class="fa fa-times-circle"></i>
                                `;
                                mainPageHeadingBefore.appendChild(button);
                                addERButton(button);
                            }
                            if (esgst.gwc) {
                                esgst.endlessFeatures.push(addGwcrHeading);
                                addGwcrHeading(document, true);
                                button = document.createElement(`div`);
                                button.className = `esgst-heading-button`;
                                button.title = `Sort giveaways by winning chance (highest to lowest).`;
                                button.innerHTML = `
                                    <i class="fa fa-area-chart"></i>
                                    <i class="fa fa-sort-numeric-desc"></i>
                                `;
                                mainPageHeadingBefore.appendChild(button);
                                addGwcSortButton(button);
                            }
                        } else if (esgst.giveawayPath) {
                            if (esgst.hgebd) {
                                var entryButton = esgst.sidebar.getElementsByClassName(`sidebar__entry-insert`)[0];
                                var errorButton = esgst.sidebar.getElementsByClassName(`sidebar__error`)[0];
                                var hideButton = document.getElementsByClassName(`featured__giveaway__hide`)[0];
                                if ((entryButton || errorButton) && !hideButton) {
                                    var parent = (entryButton || errorButton).parentElement;
                                    if (entryButton) {
                                        entryButton.remove();
                                    }
                                    if (errorButton) {
                                        errorButton.remove();
                                    }
                                    parent.insertAdjacentHTML(`afterBegin`, `
                                        <div class="sidebar__error is-disabled">
                                            <i class="fa fa-exclamation-circle"></i> Hidden Game
                                        </div>
                                    `);
                                }
                            }
                        } else if (esgst.discussionsPath) {
                            if (esgst.ds) {
                                button = document.createElement(`div`);
                                button.className = `esgst-heading-button`;
                                button.title = `Sort discussions by creation date (newest to oldest).`;
                                button.innerHTML = `
                                    <i class="fa fa-sort-amount-asc"></i>
                                `;
                                mainPageHeadingBefore.appendChild(button);
                                addDsButton(button);
                            }
                        }
                        if (esgst.commentsPath) {
                            if (esgst.giveawayCommentsPath) {
                                if (esgst.tge) {
                                    button = document.createElement(`div`);
                                    button.className = `esgst-heading-button`;
                                    button.title = `Extract train giveaways.`;
                                    button.innerHTML = `
                                        <i class="fa fa-train"></i>
                                        <i class="fa fa-search"></i>
                                    `;
                                    mainPageHeadingBefore.appendChild(button);
                                    button.addEventListener(`click`, extractTgeGiveaways.bind(null, {
                                        button: button
                                    }));
                                }
                            } else if (esgst.discussionPath) {
                                if (esgst.mpp) {
                                    button = document.createElement(`div`);
                                    button.className = `esgst-heading-button`;
                                    button.title = `Open the main post.`;
                                    button.innerHTML = `
                                        <i class="fa fa-home"></i>
                                    `;
                                    mainPageHeadingBefore.appendChild(button);
                                    loadMpp(button);
                                }
                            }
                            if (esgst.replyBox) {
                                button = document.createElement(`div`);
                                button.className = `esgst-heading-button`;
                                button.title = `Add a comment.`;
                                button.innerHTML = `
                                    <i class="fa fa-comment"></i>
                                `;
                                mainPageHeadingBefore.appendChild(button);
                                loadRbp(button);
                            }
                            if (esgst.ct) {
                                button1 = document.createElement(`div`);
                                button1.className = `esgst-heading-button`;
                                button1.title = `Go to the first unread comment of this page.`;
                                button1.innerHTML = `
                                    <i class="fa fa-comments-o"></i>
                                `;
                                mainPageHeadingBefore.appendChild(button1);
                                button2 = document.createElement(`div`);
                                button2.className = `esgst-heading-button`;
                                button2.title = `Mark all comments in this page as read.`;
                                button2.innerHTML = `
                                    <i class="fa fa-eye"></i>
                                `;
                                mainPageHeadingBefore.appendChild(button2);
                                button3 = document.createElement(`div`);
                                button3.className = `esgst-heading-button`;
                                button3.title = `Mark all comments in this page as unread.`;
                                button3.innerHTML = `
                                    <i class="fa fa-eye-slash"></i>
                                `;
                                mainPageHeadingBefore.appendChild(button3);
                                addCtCommentPanel(button1, button2, button3);
                            }
                        } else if (esgst.inboxPath) {
                            if (esgst.ct) {
                                button1 = document.createElement(`div`);
                                button1.className = `esgst-heading-button`;
                                button1.title = `Go to the first unread comment of this page.`;
                                button1.innerHTML = `
                                    <i class="fa fa-comments-o"></i>
                                `;
                                mainPageHeadingBefore.appendChild(button1);
                                button2 = document.createElement(`div`);
                                button2.className = `esgst-heading-button`;
                                button2.title = `Mark all comments in this page as read.`;
                                button2.innerHTML = `
                                    <i class="fa fa-eye"></i>
                                `;
                                mainPageHeadingBefore.appendChild(button2);
                                button3 = document.createElement(`div`);
                                button3.className = `esgst-heading-button`;
                                button3.title = `Mark all comments in this page as unread.`;
                                button3.innerHTML = `
                                    <i class="fa fa-eye-slash"></i>
                                `;
                                mainPageHeadingBefore.appendChild(button3);
                                addCtCommentPanel(button1, button2, button3);
                            }
                        } else if (esgst.winnersPath) {
                            if (esgst.namwc) {
                                button = document.createElement(`div`);
                                button.className = `esgst-heading-button`;
                                button.title = `Check for not activated/multiple wins.`;
                                button.innerHTML = `
                                    <i class="fa fa-trophy"></i>
                                    <i class="fa fa-question-circle"></i>
                                `;
                                mainPageHeadingBefore.appendChild(button);
                                setNAMWCPopup(button);
                            }
                        } else if (esgst.archivePath) {
                            if (esgst.as) {
                                button = document.createElement(`div`);
                                button.className = `esgst-heading-button`;
                                button.title = `Search archive.`;
                                button.innerHTML = `
                                    <i class="fa fa-folder"></i>
                                    <i class="fa fa-search"></i>
                                `;
                                mainPageHeadingBefore.appendChild(button);
                                loadAs(button);
                            }
                        } else if (esgst.whitelistPath) {
                            if (esgst.wbs) {
                                button1 = document.createElement(`div`);
                                button1.className = `esgst-heading-button`;
                                button1.title = `Sort by added date from oldest to newest.`;
                                button1.innerHTML = `
                                    <i class="fa fa-sort-amount-asc"></i>
                                `;
                                mainPageHeadingBefore.appendChild(button1);
                                button2 = document.createElement(`div`);
                                button2.className = `esgst-heading-button`;
                                button2.title = `Sort by added date from newest to oldest.`;
                                button2.innerHTML = `
                                    <i class="fa fa-sort-amount-desc"></i>
                                `;
                                mainPageHeadingBefore.appendChild(button2);
                                addWbsButton(`whitelistedDate`, `whitelist`, `whitelisted`, button1, button2);
                            }
                        } else if (esgst.blacklistPath) {
                            if (esgst.wbs) {
                                button1 = document.createElement(`div`);
                                button1.className = `esgst-heading-button`;
                                button1.title = `Sort by added date from oldest to newest.`;
                                button1.innerHTML = `
                                    <i class="fa fa-sort-amount-asc"></i>
                                `;
                                mainPageHeadingBefore.appendChild(button1);
                                button2 = document.createElement(`div`);
                                button2.className = `esgst-heading-button`;
                                button2.title = `Sort by added date from newest to oldest.`;
                                button2.innerHTML = `
                                    <i class="fa fa-sort-amount-desc"></i>
                                `;
                                mainPageHeadingBefore.appendChild(button2);
                                addWbsButton(`blacklistedDate`, `blacklist`, `blacklisted`, button1, button2);
                            }
                        }
                        if (esgst.newGiveawayPath) {
                            rows = document.getElementsByClassName(`form__rows`)[0];
                            if (rows) {
                                button = document.createElement(`div`);
                                button.className = `esgst-gts-button esgst-heading-button`;
                                button.title = `View/apply templates.`;
                                button.innerHTML = `
                                    <i class="fa fa-file"></i>
                                `;
                                mainPageHeadingBefore.appendChild(button);
                                addGtsButtonSection(button, rows);
                            }
                        }
                        if (esgst.at) {
                            esgst.endlessFeatures.push(getTimestamps);
                            getTimestamps(document);
                        }
                    }
                    esgst.mainPageHeading.insertBefore(mainPageHeadingBefore, esgst.mainPageHeading.firstElementChild);
                    for (i = 0, n = esgst.toExecute.length; i < n; ++i) {
                        esgst.toExecute[i]();
                    }
                    goToComment(esgst.originalHash);
                    window.addEventListener("beforeunload", function (event) {
                        if (document.getElementsByClassName("esgst-busy")[0]) {
                            event.returnValue = true;
                            return true;
                        }
                    });
                    window.addEventListener("hashchange", function () {
                        goToComment();
                    });
                    GM_addStyle(style);
                }
            }
        } else if ((esgst.settings.rgr_sg || esgst.settings.rgr_st) && esgst.steam) {
            checkRgrRemoved();
        }
    }

    function loadFeature(feature) {
        var i, id, n;
        id = feature.id;
        if (id) {
            esgst[id] = getValue(id, feature.sg, feature.st);
            if (esgst[id] && feature.load) {
                esgst.toExecute.push(feature.load);
            }
        } else if (feature.load) {
            esgst.toExecute.push(feature.load);
        }
        if (feature.features) {
            for (i = 0, n = feature.features.length; i < n; ++i) {
                loadFeature(feature.features[i]);
            }
        }
    }

    function setValue(id, value, sg, st) {
        var localId, settings = JSON.parse(GM_getValue(`settings`, `{}`));
        if (sg) {
            id = `${id}_sg`;
        } else if (st) {
            id = `${id}_st`;
        }
        settings[id] = value;
        GM_setValue(`settings`, JSON.stringify(settings));
        esgst.settings[id] = value;
    }

    function getValue(key, sg, st) {
        var defaultValue, localKey;
        if ((esgst.name === `sg` && sg) || (esgst.name === `st` && st) || (!sg && !st)) {
            if (sg || st) {
                localKey = `${key}_${esgst.name}`;
            } else {
                localKey = key;
            }
            if (typeof esgst.settings[localKey] === `undefined` && (key[0] === key[0].toLowerCase())) {
                defaultValue = esgst.defaultValues[key];
                if (typeof defaultValue === `undefined`) {
                    defaultValue = esgst.enableByDefault || false;
                }
                esgst.settings[localKey] = GM_getValue(esgst.oldValues[key] || key, defaultValue);
            }
            return esgst.settings[localKey];
        }
    }

    function addHeaderMenu() {
        var arrow, button, chRow, changelogRow, className, context, dropdown, html, menu, position, uhRow, updateRow;
        html = `
            <div class="esgst-header-menu">
                <div class="esgst-header-menu-relative-dropdown esgst-hidden">
                    <div class="esgst-header-menu-absolute-dropdown">
                        <div class="esgst-header-menu-row">
                            <i class="fa fa-fw fa-refresh blue"></i>
                            <div>
                                <p class="esgst-header-menu-name">Update Hax</p>
                                <p class="esgst-header-menu-description">See if there's a fucking update.</p>
                            </div>
                        </div>
                        <a class="" href="https://www.youtube.com/strmods">
                        </a>
                        <a class="" href="https://www.steamgifts.com/discussion/TDyzv/">
                        </a>
                        <div class="esgst-header-menu-row">
                            <i class="fa fa-fw fa-user red"></i>
                            <div>
                                <p class="esgst-header-menu-name">Recent Username Changes</p>
                                <p class="esgst-header-menu-description">Check out the recent username changes.</p>
                            </div>
                        </div>
                        <div class="esgst-header-menu-row">
                            <i class="fa fa-fw fa-comments yellow"></i>
                            <div>
                                <p class="esgst-header-menu-name">Comment History</p>
                                <p class="esgst-header-menu-description">Check out your comment history.</p>
                            </div>
                        </div>
                        <div class="esgst-header-menu-row">
                            <i class="fa fa-fw fa-file-text-o grey"></i>
                            <div>
                                <p class="esgst-header-menu-name">Changelog</p>
                                <p class="esgst-header-menu-description">See what Ste has done this time...</p>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="esgst-header-menu-button">
                    <i class="fa">
                        <img src="${GM_getResourceURL(`esgstIcon`)}"/>
                    </i>
                    <span>Hax Script Settings</span>
                </div>
                <div class="esgst-header-menu-button arrow">
                    <i class="fa fa-angle-down"></i>
                </div>
            </div>
        `;
        if (esgst.sg) {
            className = `nav__left-container`;
            position = `beforeEnd`;
        } else {
            className = `nav_logo`;
            position = `afterEnd`;
        }
        context = document.getElementsByClassName(className)[0];
        menu = insertHtml(context, position, html);
        dropdown = menu.firstElementChild;
        button = dropdown.nextElementSibling;
        arrow = button.nextElementSibling;
        updateRow = dropdown.firstElementChild.firstElementChild;
        uhRow = updateRow.nextElementSibling.nextElementSibling.nextElementSibling;
        chRow = uhRow.nextElementSibling;
        changelogRow = chRow.nextElementSibling;
        if (esgst.uh) {
            setSMRecentUsernameChanges(uhRow);
        } else {
            uhRow.classList.add(`esgst-hidden`);
        }
        if (esgst.ch) {
            setSMCommentHistory(chRow);
        } else {
            chRow.classList.add(`esgst-hidden`);
        }
        button.addEventListener(`click`, loadSMMenu);
        arrow.addEventListener(`click`, toggleHeaderMenu.bind(null, arrow, dropdown));
        document.addEventListener(`click`, closeHeaderMenu.bind(null, arrow, dropdown, menu), true);
        changelogRow.addEventListener(`click`, loadChangelog);
        updateRow.addEventListener(`click`, checkUpdate);
    }

    function toggleHeaderMenu(arrow, dropdown) {
        if (esgst.sg) {
            $(`nav .nav__button`).removeClass(`is-selected`);
            $(`nav .nav__relative-dropdown`).addClass(`is-hidden`);
        } else {
            $(`.nav_btn_dropdown`).removeClass(`is_selected`);
            $(`.page_heading_btn_dropdown`).removeClass(`is_selected`);
            $(`.dropdown`).addClass(`is_hidden`);
        }
        arrow.classList.toggle(`selected`);
        dropdown.classList.toggle(`esgst-hidden`);
    }

    function closeHeaderMenu(arrow, dropdown, menu, event) {
        if (!menu.contains(event.target) && arrow.classList.contains(`selected`)) {
            arrow.classList.remove(`selected`);
            dropdown.classList.add(`esgst-hidden`);
        }
    }

    function loadChangelog() {
        makeRequest(null, `https://raw.githubusercontent.com/gimmedemmaps/keks/master/changelog.txt`, null, function (response) {
            var changelogPopup = createPopup();
            changelogPopup.Icon.classList.add(`fa-file-text-o`);
            changelogPopup.Title.textContent = `Changelog`;
            var html = response.responseText.replace(/\/\*\n\s\*(.+)\n\s\*\//g, function (m, p1) {
                return `<strong>${p1}</strong>`;
            }).replace(/\* (.+)/g, function (m, p1) {
                return `<li>${p1}</li>`;
            }).replace(/\n/g, `<br/>`).replace(/#(\d+)/g, function (m, p1) {
                return `<a href="https://github.com/revilheart/ESGST/issues/${p1}">#${p1}</a>`;
            });
            changelogPopup.Description.insertAdjacentHTML(`afterBegin`, html);
            changelogPopup.Description.classList.add(`left`);
            changelogPopup.popUp();
        });
    }

    function checkUpdate() {
        makeRequest(null, `https://raw.githubusercontent.com/revilheart/ESGST/master/ESGST.meta.js`, null, function (response) {
            var version = response.responseText.match(/@version (.+)/);
            if (version) {
                if (version[1] != GM_info.script.version) {
                    window.location.href = `https://raw.githubusercontent.com/revilheart/ESGST/master/ESGST.user.js`;
                } else {
                    window.alert(`No ESGST updates found!`);
                }
            } else {
                window.alert(`No ESGST updates found!`);
            }
        });
    }

    function getTimestamp(unixTimestamp, clock24, showSeconds) {
        var months, date, month, day, year, hours, period, minutes, seconds;
        months = [`Jan`, `Feb`, `Mar`, `Apr`, `May`, `Jun`, `Jul`, `Aug`, `Sep`, `Oct`, `Nov`, `Dec`];
        date = new Date(unixTimestamp * 1e3);
        month = date.getMonth();
        day = date.getDate();
        year = date.getFullYear();
        hours = date.getHours();
        if (clock24) {
            period = ``;
        } else {
            if (hours < 12) {
                period = `am`;
            } else {
                period = `pm`;
            }
            hours %= 12;
            if (hours === 0) {
                hours = 12;
            }
        }
        minutes = `0${date.getMinutes()}`.slice(-2);
        if (showSeconds) {
            seconds = `0${date.getSeconds()}`.slice(-2);
            seconds = `:${seconds}`;
        } else {
            seconds = ``;
        }
        return `${months[month]} ${day}, ${year}, ${hours}:${minutes}${seconds}${period}`;
    }

    function queueRequest(Element, Data, URL, Callback) {
        var CurrentDate, HTML;
        HTML = Element.Progress ? Element.Progress.innerHTML : "";
        Element.Request = setInterval(function () {
            CurrentDate = new Date().getTime();
            if ((CurrentDate - GM_getValue("LastRequest", 0)) > 5000) {
                clearInterval(Element.Request);
                GM_setValue("LastRequest", CurrentDate);
                if (Element.Progress) {
                    Element.Progress.innerHTML = HTML;
                }
                makeRequest(Data, URL, Element.Progress, function (Response) {
                    GM_setValue("LastRequest", 0);
                    Callback(Response);
                });
            } else if (Element.Progress) {
                Element.Progress.innerHTML =
                    "<i class=\"fa fa-clock-o\"></i> " +
                    "<span>Waiting for a free request slot...</span>";
            }
        }, 500);
    }

    function makeRequest(Data, URL, Context, Callback) {
        GM_xmlhttpRequest({
            data: Data,
            headers: {
                "Content-Type": "application/x-www-form-urlencoded"
            },
            method: (Data ? "POST" : "GET"),
            timeout: 300000,
            url: URL,
            onerror: function () {
                displayMessage(Context, "An error has ocurred.");
            },
            ontimeout: function () {
                displayMessage(Context, "The connection has timed out.");
            },
            onload: Callback
        });
    }

    function displayMessage(Context, Message) {
        if (Context) {
            Context.innerHTML =
                "<i class=\"fa fa-times-circle\"></i> " +
                "<span>" + Message + "</span>";
        } else {
            console.log(Message);
        }
    }

    function insertHtml(context, position, html) {
        context.insertAdjacentHTML(position, html);
        var positions = {
            beforeBegin: `previousElementSibling`,
            afterBegin: `firstElementChild`,
            beforeEnd: `lastElementChild`,
            afterEnd: `nextElementSibling`
        };
        return context[positions[position]];
    }

    /* User Saving System */

    function getUser(savedUsers, user) {
        var savedUser, steamId;
        if (!savedUsers) {
            savedUsers = JSON.parse(GM_getValue(`users`));
        }
        if (user.steamId) {
            savedUser = savedUsers.users[user.steamId];
            if (savedUser) {
                user.id = savedUser.id;
                user.username = savedUser.username;
                return savedUser;
            } else {
                return null;
            }
        } else if (user.username) {
            steamId = savedUsers.steamIds[user.username];
            if (steamId) {
                user.steamId = steamId;
                return savedUsers.users[steamId];
            } else {
                return null;
            }
        } else {
            return null;
        }
    }

    function saveUser(list, savedUsers, user, callback) {
        var savedUser;
        if (!savedUsers) {
            savedUsers = JSON.parse(GM_getValue(`users`));
        }
        savedUser = getUser(savedUsers, user);
        if (savedUser) {
            if (list) {
                if (!user.steamId) {
                    user.steamId = savedUsers.steamIds[user.username];
                }
                list.existing.push(user);
                list.count += 1;
            } else {
                continueSavingUser(user, callback);
            }
        } else {
            if (user.steamId && user.username) {
                if (list) {
                    list.new.push(user);
                    list.count += 1;
                } else {
                    addUser(user, callback);
                }
            } else if (user.steamId) {
                getUsername(list, true, user, callback);
            } else {
                getSteamId(list, true, user, callback);
            }
        }
    }

    function continueSavingUser(user, callback) {
        createLock(`userLock`, 300, lockAndSaveUser.bind(null, user, callback));
    }

    function lockAndSaveUser(user, callback, deleteLock) {
        var key, savedUsers;
        savedUsers = JSON.parse(GM_getValue(`users`));
        for (key in user.values) {
            if (key !== `tags`) {
                savedUsers.users[user.steamId][key] = user.values[key];
            }
        }
        checkUsernameChange(savedUsers, user);
        GM_setValue(`users`, JSON.stringify(savedUsers));
        deleteLock();
        if (callback) {
            callback();
        }
    }

    function checkUsernameChange(savedUsers, user) {
        var i, n;
        if (typeof savedUsers.users[user.steamId].username !== `undefined` && savedUsers.users[user.steamId].username !== user.username) {
            delete savedUsers.steamIds[savedUsers.users[user.steamId].username];
            savedUsers.users[user.steamId].username = user.username;
            savedUsers.steamIds[user.username] = user.steamId;
            if (user.values.tags) {
                if (!savedUsers.users[user.steamId].tags) {
                    savedUsers.users[user.steamId].tags = [];
                }
                for (i = 0, n = user.values.tags.length; i < n; ++i) {
                    if (savedUsers.users[user.steamId].tags.indexOf(user.values.tags[i]) < 0) {
                        savedUsers.users[user.steamId].tags.push(user.values.tags[i]);
                    }
                }
            }
        } else if (user.values.tags) {
            savedUsers.users[user.steamId].tags = user.values.tags;
        }
    }

    function addUser(user, callback) {
        createLock(`userLock`, 300, addAndSaveUser.bind(null, user, callback));
    }

    function addAndSaveUser(user, callback, deleteLock) {
        var key, savedUser, savedUsers;
        savedUsers = JSON.parse(GM_getValue(`users`));
        savedUser = getUser(savedUsers, user);
        if (!savedUser) {
            savedUsers.users[user.steamId] = {};
        }
        if (user.id) {
            savedUsers.users[user.steamId].id = user.id;
        }
        if (user.username) {
            savedUsers.users[user.steamId].username = user.username;
            savedUsers.steamIds[user.username] = user.steamId;
        }
        for (key in user.values) {
            if (key !== `tags`) {
                savedUsers.users[user.steamId][key] = user.values[key];
            }
        }
        checkUsernameChange(savedUsers, user);
        GM_setValue(`users`, JSON.stringify(savedUsers));
        deleteLock();
        if (callback) {
            callback();
        }
    }

    function getUsername(list, save, user, callback) {
        request(null, false, `https://www.steamgifts.com/go/user/${user.steamId}`, lockAndGetUsername.bind(null, list, save, user, callback));
    }

    function lockAndGetUsername(list, save, user, callback, response) {
        var input, match, responseHtml;
        match = response.finalUrl.match(/\/user\/(.+)/);
        responseHtml = DOM.parse(response.responseText);
        if (match) {
            user.username = match[1];
            input = responseHtml.querySelector(`[name="child_user_id"]`);
            if (input) {
                user.id = input.value;
            }
        }
        if (save) {
           if (list) {
                list.new.push(user);
                list.count += 1;
            } else {
                addUser(user, callback);
            }
        } else {
            callback();
        }
    }

    function getSteamId(list, save, user, callback) {
        var savedUsers, steamId;
        if (save) {
            request(null, false, `https://www.steamgifts.com/user/${user.username}`, lockAndGetSteamId.bind(null, list, save, user, callback));
        } else {
            savedUsers = JSON.parse(GM_getValue(`users`));
            steamId = savedUsers.steamIds[user.username];
            if (steamId) {
                user.steamId = steamId;
                callback();
            } else {
                request(null, false, `https://www.steamgifts.com/user/${user.username}`, lockAndGetSteamId.bind(null, list, save, user, callback));
            }
        }
    }

    function lockAndGetSteamId(list, save, user, callback, response) {
        var input, responseHtml;
        responseHtml = DOM.parse(response.responseText);
        user.steamId = responseHtml.querySelector(`[href*="/profiles/"]`).getAttribute(`href`).match(/\d+/)[0];
        input = responseHtml.querySelector(`[name="child_user_id"]`);
        if (input) {
            user.id = input.value;
        }
        if (save) {
            if (list) {
                list.new.push(user);
                list.count += 1;
            } else {
                addUser(user, callback);
            }
        } else {
            callback();
        }
    }

    function saveUsers(users, callback) {
        var i, list, n, savedUsers;
        list = {
            count: 0,
            existing: [],
            new: []
        };
        savedUsers = JSON.parse(GM_getValue(`users`));
        for (i = 0, n = users.length; i < n; ++i) {
            saveUser(list, savedUsers, users[i]);
        }
        window.setTimeout(checkUserSavingComplete, 1000, list, n, callback);
    }

    function checkUserSavingComplete(list, total, callback) {
        if (list.count === total) {
            createLock(`userLock`, 300, completeUserSaving.bind(null, list, callback));
        } else {
            window.setTimeout(checkUserSavingComplete, 1000, list, total, callback);
        }
    }

    function completeUserSaving(list, callback, deleteLock) {
        var i, key, n, savedUser, savedUsers, user;
        savedUsers = JSON.parse(GM_getValue(`users`));
        for (i = 0, n = list.new.length; i < n; ++i) {
            user = list.new[i];
            savedUser = getUser(savedUsers, user);
            if (!savedUser) {
                savedUsers.users[user.steamId] = {};
            }
            if (user.id) {
                savedUsers.users[user.steamId].id = user.id;
            }
            if (user.username) {
                savedUsers.users[user.steamId].username = user.username;
                savedUsers.steamIds[user.username] = user.steamId;
            }
            for (key in user.values) {
                if (key !== `tags`) {
                    savedUsers.users[user.steamId][key] = user.values[key];
                }
            }
            checkUsernameChange(savedUsers, user);
        }
        for (i = 0, n = list.existing.length; i < n; ++i) {
            user = list.existing[i];
            for (key in user.values) {
                if (key !== `tags`) {
                    savedUsers.users[user.steamId][key] = user.values[key];
                }
            }
            checkUsernameChange(savedUsers, user);
        }
        GM_setValue(`users`, JSON.stringify(savedUsers));
        deleteLock();
        callback();
    }

    function deleteUserValues(values, callback) {
        createLock(`userLock`, 300, lockAndDeleteValues.bind(null, values, callback));
    }

    function lockAndDeleteValues(values, callback, deleteLock) {
        var i, key, n, savedUsers;
        savedUsers = JSON.parse(GM_getValue(`users`));
        for (key in savedUsers.users) {
            for (i = 0, n = values.length; i < n; ++i) {
                delete savedUsers.users[key][values[i]];
            }
        }
        GM_setValue(`users`, JSON.stringify(savedUsers));
        deleteLock();
        callback();
    }

    function getUserId(user, callback) {
        if (user.username) {
            getSteamId(null, false, user, callback);
        } else {
            getUsername(null, false, user, callback);
        }
    }

    /* */

    function queueSave(Element, Callback) {
        var CurrentDate;
        Element.Save = setInterval(function () {
            CurrentDate = new Date().getTime();
            if ((CurrentDate - GM_getValue("LastSave", 0)) > 5000) {
                clearInterval(Element.Save);
                GM_setValue("LastSave", CurrentDate);
                if (Element.Progress) {
                    Element.Progress.innerHTML = "";
                }
                Callback();
            } else if (Element.Progress) {
                Element.Progress.innerHTML =
                    "<i class=\"fa fa-clock-o\"></i> " +
                    "<span>Waiting for a free save slot...</span>";
            }
        }, 100);
    }

    function saveComment(TradeCode, ParentID, Description, URL, DEDStatus, Callback, DEDCallback) {
        var Data;
        Data = "xsrf_token=" + esgst.xsrfToken + "&do=" + (esgst.sg ? "comment_new" : "comment_insert") + "&trade_code=" + TradeCode + "&parent_id=" + ParentID + "&description=" +
            encodeURIComponent(Description);
        makeRequest(Data, URL, DEDStatus, function (Response) {
            var Match, ResponseJSON;
            if (esgst.sg) {
                Match = Response.finalUrl.match(/(.+?)(#(.+))?$/);
                if (Match[3]) {
                    Callback();
                    if (esgst.ch) {
                        saveChComment(Match[3], Date.now());
                    }
                    if (DEDCallback) {
                        DEDCallback(Response, DEDStatus);
                    } else {
                        window.location.href = "/go/comment/" + Match[3];
                    }
                } else if (URL != Match[1]) {
                    makeRequest(Data, Match[1], DEDStatus, function (Response) {
                        Callback();
                        Match = Response.finalUrl.match(/(.+?)(#(.+))?$/);
                        if (esgst.ch) {
                            saveChComment(Match[3], Date.now());
                        }
                        if (DEDCallback) {
                            DEDCallback(Response, DEDStatus);
                        } else {
                            window.location.href = "/go/comment/" + Match[3];
                        }
                    });
                } else {
                    Callback();
                    if (DEDCallback) {
                        DEDCallback(Response, DEDStatus);
                    } else {
                        DEDStatus.innerHTML =
                            "<i class=\"fa fa-times-circle\"></i> " +
                            "<span>Failed!</span>";
                    }
                }
            } else {
                ResponseJSON = JSON.parse(Response.responseText);
                if (ResponseJSON.success) {
                    Callback();
                    var id = DOM.parse(ResponseJSON.html).getElementsByClassName("comment_outer")[0].id;
                    if (esgst.ch) {
                        saveChComment(id, Date.now());
                    }
                    if (DEDCallback) {
                        DEDCallback(Response, DEDStatus);
                    } else {
                        window.location.href = "/go/comment/" + id;
                    }
                } else {
                    Callback();
                    if (DEDCallback) {
                        DEDCallback(Response, DEDStatus);
                    } else {
                        DEDStatus.innerHTML =
                            "<i class=\"fa fa-times-circle\"></i> " +
                            "<span>Failed!</span>";
                    }
                }
            }
        });
    }

    function checkSync(menu, callback) {
        if (menu) {
            if (esgst.sg) {
                setValue(`username`, document.getElementsByClassName(`nav__avatar-outer-wrap`)[0].href.match(/\/user\/(.+)/)[1]);
                setValue(`avatar`, document.getElementsByClassName(`nav__avatar-inner-wrap`)[0].style.backgroundImage.match(/\("(.+)"\)/)[1]);
            } else {
                setValue(`avatar`, document.getElementsByClassName(`nav_avatar`)[0].style.backgroundImage.match(/\("(.+)"\)/)[1]);
            }
            setSync(callback);
        } else if (esgst.syncFrequency && Date.now() - esgst.lastSync > esgst.syncFrequency * 86400000) {
            if (esgst.sg) {
                setValue(`username`, document.getElementsByClassName(`nav__avatar-outer-wrap`)[0].href.match(/\/user\/(.+)/)[1]);
                setValue(`avatar`, document.getElementsByClassName(`nav__avatar-inner-wrap`)[0].style.backgroundImage.match(/\("(.+)"\)/)[1]);
            } else {
                setValue(`avatar`, document.getElementsByClassName(`nav_avatar`)[0].style.backgroundImage.match(/\("(.+)"\)/)[1]);
            }
            window.open(`/esgst-sync`);
        }
    }

    function setSync(mainCallback) {
        var popup, syncer;
        syncer = {
            canceled: false
        };
        if (mainCallback) {
            popup = createPopup_v6(`fa-refresh`, `Sync`);
            createToggleSwitch(popup.description, `syncGroups`, false, `Sync Steam groups.`, false, false, null, esgst.syncGroups);
            createToggleSwitch(popup.description, `syncWhitelist`, false, `Sync whitelist.`, false, false, null, esgst.syncWhitelist);
            createToggleSwitch(popup.description, `syncBlacklist`, false, `Sync blacklist.`, false, false, null, esgst.syncBlacklist);
            createToggleSwitch(popup.description, `syncHiddenGames`, false, `Sync hidden games.`, false, false, null, esgst.syncHiddenGames);
            createToggleSwitch(popup.description, `syncGames`, false, `Sync owned/wishlisted/ignored games.`, false, false, null, esgst.syncGames);
            syncer.progress = insertHtml(popup.description, `beforeEnd`, `
                <div class="esgst-hidden esgst-popup-progress"></div>
            `);
            popup.description.appendChild(createButtonSet(`green`, `grey`, `fa-refresh`, `fa-times`, `Sync`, `Cancel`, sync.bind(null, syncer, mainCallback), cancelSync.bind(null, syncer, mainCallback)).set);
            popup.onClose = mainCallback;
            popup.open();
        } else {
            document.body.innerHTML = ``;
            syncer.progress = insertHtml(document.body, `beforeEnd`, `
                <div class="description esgst-hidden esgst-popup-progress"></div>
            `);
            sync(syncer, null, window.close);
        }
    }

    function cancelSync(syncer, callback) {
        syncer.canceled = true;
        callback();
    }

    function sync(syncer, mainCallback, callback) {
        setValue(`lastSync`, Date.now());
        syncer.progress.classList.remove(`esgst-hidden`);
        syncer.progress.innerHTML = `
            <i class="fa fa-circle-o-notch fa-spin"></i>
            <span></span>
        `;
        if (!esgst.steamId && esgst.username) {
            syncer.progress.lastElementChild.textContent = `Syncing your Steam id...`;
            request(null, false, `https://www.steamgifts.com/user/${esgst.username}`, getSteamIdAndContinueSync.bind(null, syncer, completeSync.bind(null, syncer, mainCallback, callback)));
        } else {
            continueSyncStep1(syncer, completeSync.bind(null, syncer, mainCallback, callback));
        }
    }

    function completeSync(syncer, mainCallback, callback) {
        var currentDate;
        syncer.progress.innerHTML = `Synced!`;
        currentDate = new Date();
        setValue(`lastSync`, currentDate.getTime());
        callback();
        if (mainCallback) {
            mainCallback(currentDate);
        }
    }

    function getSteamIdAndContinueSync(syncer, callback, response) {
        setValue(`steamId`, DOM.parse(response.responseText).querySelector(`a[href*="/profiles/"]`).getAttribute(`href`).match(/\d+/)[0]);
        continueSyncStep1(syncer, callback);
    }

    function continueSyncStep1(syncer, callback) {
        if (esgst.settings.syncGroups) {
            syncer.progress.lastElementChild.textContent = `Syncing your Steam groups...`;
            syncer.groups = {};
            syncGroups(1, syncer, `https://www.steamgifts.com/account/steam/groups/search?page=`, continueSyncStep2.bind(null, syncer, callback));
        } else {
            continueSyncStep2(syncer, callback);
        }
    }

    function syncGroups(nextPage, syncer, url, callback) {
        if (!syncer.canceled) {
            request(null, false, `${url}${nextPage}`, getGroupsAndContinueSync.bind(null, nextPage, syncer, url, callback));
        }
    }

    function getGroupsAndContinueSync(nextPage, syncer, url, callback, response) {
        var element, elements, heading, i, match, n, pagination, responseHtml;
        responseHtml = DOM.parse(response.responseText);
        elements = responseHtml.getElementsByClassName(`table__row-outer-wrap`);
        for (i = 0, n = elements.length; i < n; ++i) {
            element = elements[i];
            heading = element.getElementsByClassName(`table__column__heading`)[0];
            match = heading.getAttribute(`href`).match(/\/group\/(.+?)\/(.+)/);
            syncer.groups[match[2]] = {
                avatar: element.getElementsByClassName(`table_image_avatar`)[0].style.backgroundImage.match(/\/avatars\/(.+)_medium/)[1],
                code: match[1],
                member: true,
                name: heading.textContent
            };
        }
        pagination = responseHtml.getElementsByClassName(`pagination__navigation`)[0];
        if (pagination && !pagination.lastElementChild.classList.contains(`is-selected`)) {
            window.setTimeout(syncGroups, 0, ++nextPage, syncer, url, callback);
        } else if (!syncer.canceled) {
            lockAndSaveGroups(syncer.groups, true, callback);
        }
    }

    function continueSyncStep2(syncer, callback) {
        if (esgst.settings.syncWhitelist || esgst.settings.syncBlacklist) {
            syncWhitelistBlacklist(syncer, continueSyncStep3.bind(null, syncer, callback));
        } else {
            continueSyncStep3(syncer, callback);
        }
    }

    function syncWhitelistBlacklist(syncer, callback) {
        if (!syncer.canceled) {
            deleteUserValues([`whitelisted`, `whitelistedDate`, `blacklisted`, `blacklistedDate`], continueWhitelistBlacklistSync.bind(null, syncer, callback));
        }
    }

    function continueWhitelistBlacklistSync(syncer, callback) {
        if (esgst.settings.syncWhitelist) {
            syncer.progress.lastElementChild.textContent = `Syncing your whitelist...`;
            syncer.users = [];
            getWhitelistBlacklist(`whitelisted`, 1, syncer, `https://www.steamgifts.com/account/manage/whitelist/search?page=`, checkBlacklistSync.bind(null, syncer, callback));
        } else {
            syncer.progress.lastElementChild.textContent = `Syncing your blacklist...`;
            syncer.users = [];
            getWhitelistBlacklist(`blacklisted`, 1, syncer, `https://www.steamgifts.com/account/manage/blacklist/search?page=`, completeWhitelistBlacklistSync.bind(null, syncer, callback));
        }
    }

    function getWhitelistBlacklist(key, nextPage, syncer, url, callback) {
        if (!syncer.canceled) {
            request(null, false, `${url}${nextPage}`, getWhitelistBlacklistAndContinueSync.bind(null, key, nextPage, syncer, url, callback));
        }
    }

    function getWhitelistBlacklistAndContinueSync(key, nextPage, syncer, url, callback, response) {
        var element, elements, i, n, pagination, responseHtml, user;
        responseHtml = DOM.parse(response.responseText);
        elements = responseHtml.getElementsByClassName(`table__row-outer-wrap`);
        for (i = 0, n = elements.length; i < n; ++i) {
            element = elements[i];
            user = {
                id: element.querySelector(`[name="child_user_id"]`).value,
                username: element.getElementsByClassName(`table__column__heading`)[0].textContent,
                values: {}
            };
            user.values[key] = true;
            user.values[`${key}Date`] = parseInt(element.querySelector(`[data-timestamp]`).getAttribute(`data-timestamp`)) * 1e3;
            syncer.users.push(user);
        }
        pagination = responseHtml.getElementsByClassName(`pagination__navigation`)[0];
        if (pagination && !pagination.lastElementChild.classList.contains(`is-selected`)) {
            window.setTimeout(getWhitelistBlacklist, 0, key, ++nextPage, syncer, url, callback);
        } else if (!syncer.canceled) {
            callback();
        }
    }

    function checkBlacklistSync(syncer, callback) {
        if (esgst.settings.syncBlacklist) {
            syncer.progress.lastElementChild.textContent = `Syncing your blacklist...`;
            getWhitelistBlacklist(`blacklisted`, 1, syncer, `https://www.steamgifts.com/account/manage/blacklist/search?page=`, completeWhitelistBlacklistSync.bind(null, syncer, callback));
        } else {
            completeWhitelistBlacklistSync(syncer, callback);
        }
    }

    function completeWhitelistBlacklistSync(syncer, callback) {
        if (!syncer.canceled) {
            syncer.progress.lastElementChild.textContent = `Saving your whitelist/blacklist (this may take a while)...`;
            saveUsers(syncer.users, callback);
        }
    }

    function continueSyncStep3(syncer, callback) {
        if (esgst.settings.syncHiddenGames) {
            syncer.progress.lastElementChild.textContent = `Syncing your wishlisted/owned/ignored games...`;
            syncer.hiddenGames = {
                apps: [],
                subs: []
            };
            syncHiddenGames(1, syncer, `https://www.steamgifts.com/account/settings/giveaways/filters/search?page=`, continueSyncStep4.bind(null, syncer, callback));
        } else {
            continueSyncStep4(syncer, callback);
        }
    }

    function syncHiddenGames(nextPage, syncer, url, callback) {
        request(null, false, `${url}${nextPage}`, getHiddenGames.bind(null, nextPage, syncer, url, callback));
    }

    function getHiddenGames(nextPage, syncer, url, callback, response) {
        var elements, i, match, n, pagination, responseHtml;
        responseHtml = DOM.parse(response.responseText);
        elements = responseHtml.querySelectorAll(`.table__column__secondary-link[href*="store.steampowered.com"]`);
        for (i = 0, n = elements.length; i < n; ++i) {
            match = elements[i].getAttribute(`href`).match(/(app|sub)\/(\d+)/);
            if (match) {
                syncer.hiddenGames[`${match[1]}s`].push(match[2]);
            }
        }
        pagination = responseHtml.getElementsByClassName(`pagination__navigation`)[0];
        if (pagination && !pagination.lastElementChild.classList.contains(`is-selected`)) {
            window.setTimeout(syncHiddenGames, 0, ++nextPage, syncer, url, callback);
        } else {
            createLock(`gameLock`, 300, saveHiddenGames.bind(null, syncer, callback));
        }
    }

    function saveHiddenGames(syncer, callback, deleteLock) {
        var key, i, n, savedGames;
        savedGames = JSON.parse(GM_getValue(`games`));
        for (key in savedGames.apps) {
            delete savedGames.apps[key].hidden;
        }
        for (key in savedGames.subs) {
            delete savedGames.subs[key].hidden;
        }
        for (i = 0, n = syncer.hiddenGames.apps.length; i < n; ++i) {
            if (!savedGames.apps[syncer.hiddenGames.apps[i]]) {
                savedGames.apps[syncer.hiddenGames.apps[i]] = {};
            }
            savedGames.apps[syncer.hiddenGames.apps[i]].hidden = true;
        }
        for (i = 0, n = syncer.hiddenGames.subs.length; i < n; ++i) {
            if (!savedGames.subs[syncer.hiddenGames.subs[i]]) {
                savedGames.subs[syncer.hiddenGames.subs[i]] = {};
            }
            savedGames.subs[syncer.hiddenGames.subs[i]].hidden = true;
        }
        GM_setValue(`games`, JSON.stringify(savedGames));
        deleteLock();
        callback();
    }

    function continueSyncStep4(syncer, callback) {
        if (esgst.settings.syncGames) {
            syncer.progress.lastElementChild.textContent = `Syncing your wishlisted/owned/ignored games...`;
            syncGames(syncer, callback);
        } else {
            callback();
        }
    }

    function syncGames(syncer, callback) {
        if (esgst.steamApiKey) {
            request(null, false, `http://api.steampowered.com/IPlayerService/GetOwnedGames/v0001/?key=${esgst.steamApiKey}&steamid=${esgst.steamId}&format=json`, getApiResponseAndContinueSync.bind(null, syncer, callback));
        } else {
            request(null, false, `http://store.steampowered.com/dynamicstore/userdata`, getStoreResponseAndContinueSync.bind(null, syncer, callback, null));
        }
    }

    function getApiResponseAndContinueSync(syncer, callback, response) {
        request(null, false, `http://store.steampowered.com/dynamicstore/userdata`, getStoreResponseAndContinueSync.bind(null, syncer, callback, response));
    }

    function getStoreResponseAndContinueSync(syncer, callback, response1, response2) {
        createLock(`gameLock`, 300, continueGameSync.bind(null, syncer, callback, response1, response2));
    }

    function continueGameSync(syncer, callback, response1, response2, deleteLock) {
        var i, id, j, key, mainKey, n, numOwned, numValues, oldValue, owned, ownedGames, responseJson, responseText, result, savedGames, type, types, values;
        owned = 0;
        savedGames = JSON.parse(GM_getValue(`games`));
        for (key in savedGames.apps) {
            delete savedGames.apps[key].wishlist;
            delete savedGames.apps[key].wishlisted;
            delete savedGames.apps[key].owned;
            delete savedGames.apps[key].ignored;
            if (!Object.keys(savedGames.apps[key]).length) {
                delete savedGames.apps[key];
            }
        }
        for (key in savedGames.subs) {
            delete savedGames.subs[key].wishlist;
            delete savedGames.subs[key].wishlisted;
            delete savedGames.subs[key].owned;
            delete savedGames.subs[key].ignored;
            if (!Object.keys(savedGames.subs[key]).length) {
                delete savedGames.subs[key];
            }
        }
        if (response1) {
            responseText = response1.responseText;
            if (!responseText.match(/<title>Forbidden<\/title>/)) {
                ownedGames = JSON.parse(responseText).response.games;
                for (i = 0, n = ownedGames.length; i < n; ++i) {
                    id = ownedGames[i].appid;
                    if (!savedGames.apps[id]) {
                        savedGames.apps[id] = {};
                    }
                    savedGames.apps[id].owned = true;
                    ++owned;
                }
            }
        }
        if (response2) {
            responseJson = JSON.parse(response2.responseText);
            numOwned = responseJson.rgOwnedApps.length;
            if (numOwned > 0) {
                types = [
                    {
                        key: `wishlisted`,
                        mainKey: `apps`,
                        name: `rgWishlist`
                    },
                    {
                        key: `owned`,
                        mainKey: `apps`,
                        name: `rgOwnedApps`
                    },
                    {
                        key: `owned`,
                        mainKey: `subs`,
                        name: `rgOwnedPackages`
                    },
                    {
                        key: `ignored`,
                        mainKey: `apps`,
                        name: `rgIgnoredApps`
                    },
                    {
                        key: `ignored`,
                        mainKey: `subs`,
                        name: `rgIgnoredPackages`
                    }
                ];
                for (i = 0, n = types.length; i < n; ++i) {
                    type = types[i];
                    key = type.key;
                    mainKey = type.mainKey;
                    values = responseJson[type.name];
                    for (j = 0, numValues = values.length; j < numValues; ++j) {
                        id = values[j];
                        if (!savedGames[mainKey][id]) {
                            savedGames[mainKey][id] = {};
                        }
                        oldValue = savedGames[mainKey][id][key];
                        savedGames[mainKey][id][key] = true;
                        if (key === `owned` && !oldValue) {
                            ++owned;
                        }
                        if (key === `wishlisted` && savedGames[mainKey][id].subs) {
                            for (var k = 0, numPackages = savedGames[mainKey][id].subs.length; k < numPackages; ++k) {
                                var subid = savedGames[mainKey][id].subs[k];
                                if (!savedGames.subs[subid]) {
                                    savedGames.subs[subid] = {};
                                }
                                savedGames.subs[subid].wishlisted = true;
                            }
                        }
                    }
                }
            }
        }
        if (response1 || response2) {
            if (owned !== GM_getValue(`ownedGames`, 0)) {
                GM_setValue(`ownedGames`, owned);
                result = 1;
            } else {
                result = 2;
            }
        } else {
            result = 3;
        }
        GM_setValue(`games`, JSON.stringify(savedGames));
        deleteLock();
        callback(result, savedGames);
    }

    function lockAndSaveGiveaways(giveaways) {
        createLock(`giveawayLock`, 300, saveGiveaways.bind(null, giveaways));
    }

    function saveGiveaways(giveaways, deleteLock) {
        var key, savedGiveaways, subKey;
        savedGiveaways = JSON.parse(GM_getValue(`giveaways`, `{}`));
        for (key in giveaways) {
            if (savedGiveaways[key]) {
                for (subKey in giveaways[key]) {
                    savedGiveaways[key][subKey] = giveaways[key][subKey];
                }
            } else {
                savedGiveaways[key] = giveaways[key];
            }
        }
        GM_setValue(`giveaways`, JSON.stringify(savedGiveaways));
        deleteLock();
    }

    function lockAndSaveGroups(groups, sync, callback) {
        createLock(`groupLock`, 300, saveGroups.bind(null, groups, sync, callback));
    }

    function saveGroups(groups, sync, callback, deleteLock) {
        var key, savedGroups, subKey;
        savedGroups = JSON.parse(GM_getValue(`groups`, `{}`));
        if (sync) {
            for (key in savedGroups) {
                delete savedGroups[key].member;
            }
        }
        for (key in groups) {
            if (savedGroups[key]) {
                for (subKey in groups[key]) {
                    savedGroups[key][subKey] = groups[key][subKey];
                }
            } else {
                savedGroups[key] = groups[key];
            }
        }
        GM_setValue(`groups`, JSON.stringify(savedGroups));
        deleteLock();
        if (callback) {
            callback();
        }
    }

    function sortArray(Array) {
        return Array.sort(function (A, B) {
            return A.localeCompare(B, {
                sensitivity: "base"
            });
        });
    }

    function sortArrayByKey(array, key) {
        return array.sort(function (a, b) {
            return a[key].localeCompare(b[key], {
                sensitivity: "base"
            });
        });
    }

    function setSiblingsOpacity(Element, Opacity) {
        var Siblings, I, N;
        Siblings = Element.parentElement.children;
        for (I = 0, N = Siblings.length; I < N; ++I) {
            if (Siblings[I] != Element) {
                Siblings[I].style.opacity = Opacity;
            }
        }
    }

    function setHoverOpacity(Element, EnterOpacity, LeaveOpacity) {
        Element.addEventListener("mouseenter", function () {
            Element.style.opacity = EnterOpacity;
        });
        Element.addEventListener("mouseleave", function () {
            Element.style.opacity = LeaveOpacity;
        });
    }

    /*
     * Helper Functions
     */

    /* Lock */

    function createUuid(c) {
        var r, v;
        r = Math.random() * 16 | 0;
        v = c == `x` ? r : (r & 0x3 | 0x8);
        return v.toString(16);
    }

    function createLock(key, threshold, callback) {
        var lock;
        lock = {
            callback: callback,
            continue: false,
            key: key,
            threshold: threshold,
            uuid: `xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx`.replace(/[xy]/g, createUuid)
        };
        checkLock(lock);
    }

    function checkLock(lock) {
        var locked;
        locked = JSON.parse(GM_getValue(lock.key, `{}`));
        if (!locked || !locked.uuid || locked.timestamp < Date.now() - (lock.threshold + 1000)) {
            GM_setValue(lock.key, JSON.stringify({
                timestamp: Date.now(),
                uuid: lock.uuid
            }));
            window.setTimeout(function () {
                locked = JSON.parse(GM_getValue(lock.key, `{}`));
                if (locked && locked.uuid === lock.uuid) {
                    window.setTimeout(lock.callback, 0, function () {
                        GM_setValue(lock.key, `{}`);
                    });
                } else {
                    window.setTimeout(checkLock, 0, lock);
                }
            }, lock.threshold / 2);
        } else {
            window.setTimeout(checkLock, lock.threshold / 3, lock);
        }
    }

    /* Request */

    function request(data, queue, url, callback) {
        if (queue) {
            createLock(`requestLock`, 1000, function (closeLock) {
                continueRequest(data, url, callback, closeLock);
            });
        } else {
            continueRequest(data, url, callback);
        }
    }

    function continueRequest(data, url, callback, closeLock) {
        GM_xmlhttpRequest({
            data: data,
            headers: {
                "Content-Type": `application/x-www-form-urlencoded`
            },
            method: data ? `POST` : `GET`,
            url: url,
            onload: function (response) {
                if (closeLock) {
                    closeLock();
                }
                callback(response);
            }
        });
    }

    /* Popup */

    function createPopup_v6(icon, title, temp) {
        var popup;
        popup = {};
        popup.popup = insertHtml(document.body, `beforeEnd`, `
            <div class="esgst-hidden esgst-popup">
                <div class="popup_summary">
                    <div class="popup_icon">
                        <i class="popup__icon fa ${icon} esgst-popup-icon"></i>
                    </div>
                    <div class="popup__heading popup_heading">
                        <div class="popup_heading_h2 esgst-popup-title">${title}</div>
                    </div>
                </div>
                <div class="popup_description esgst-popup-description"></div>
                <div class="popup__actions popup_actions">
                    <span class="b-close">Close</span>
                </div>
            </div>
        `);
        popup.description = popup.popup.firstElementChild.nextElementSibling;
        popup.open = function (callback) {
            popup.popup.classList.remove(`esgst-hidden`);
            popup.opened = $(popup.popup).bPopup({
                amsl: [0],
                fadeSpeed: 200,
                followSpeed: 500,
                modalColor: `#3c424d`,
                scrollbar: true,
                onClose: function () {
                    if (temp) {
                        popup.popup.remove();
                    } else {
                        popup.popup.classList.add(`esgst-hidden`);
                    }
                    if (popup.onClose) {
                        popup.onClose();
                    }
                }
            }, callback);
        };
        popup.close = function () {
            popup.opened.close();
        };
        popup.reposition = function () {
            if (popup.opened) {
                popup.opened.reposition();
            }
        };
        popup.popup.addEventListener(`click`, popup.reposition);
        return popup;
    }

    /* */

    function createPopup(Temp) {
        var Popup;
        document.body.insertAdjacentHTML(
            "beforeEnd",
            "<div class=\"popup page__outer-wrap page_outer_wrap rhPopup\">" +
            "    <div class=\"popup_summary\">" +
            "        <div class=\"popup_icon\">" +
            "            <i class=\"fa popup__icon rhPopupIcon\"></i>" +
            "        </div>" +
            "        <div class=\"popup_heading popup__heading\">" +
            "            <div class=\"popup_heading_h2 rhPopupTitle\"></div>" +
            "        </div>" +
            "    </div>" +
            "    <div class=\"rhPopupDescription\">" +
            "        <textarea class=\"rhPopupTextArea rhHidden\"></textarea>" +
            "        <input class=\"rhPopupTextInput rhHidden\"/>" +
            "        <ul class=\"rhPopupOptions\"></ul>" +
            "        <div class=\"rhPopupButton\"></div>" +
            "        <div class=\"rhPopupStatus\">" +
            "            <div class=\"rhPopupProgress\"></div>" +
            "            <div class=\"rhPopupOverallProgress\"></div>" +
            "        </div>" +
            "        <ul class=\"rhPopupResults\"></ul>" +
            "    </div>" +
            "    <div class=\"popup__actions popup_actions\">" +
            "        <a href=\"https://www.steamgifts.com/account#ESGST\">Manage</a>" +
            "        <span class=\"b-close rhPopupClose\">Close</span>" +
            "    </div>" +
            "</div>"
        );
        Popup = {};
        Popup.Popup = document.body.lastElementChild;
        Popup.Icon = Popup.Popup.getElementsByClassName("rhPopupIcon")[0];
        Popup.Title = Popup.Popup.getElementsByClassName("rhPopupTitle")[0];
        Popup.Description = Popup.Popup.getElementsByClassName("rhPopupDescription")[0];
        Popup.TextArea = Popup.Popup.getElementsByClassName("rhPopupTextArea")[0];
        Popup.TextInput = Popup.Popup.getElementsByClassName("rhPopupTextInput")[0];
        Popup.Options = Popup.Popup.getElementsByClassName("rhPopupOptions")[0];
        Popup.Button = Popup.Popup.getElementsByClassName("rhPopupButton")[0];
        Popup.Status = Popup.Popup.getElementsByClassName("rhPopupStatus")[0];
        Popup.Progress = Popup.Popup.getElementsByClassName("rhPopupProgress")[0];
        Popup.OverallProgress = Popup.Popup.getElementsByClassName("rhPopupOverallProgress")[0];
        Popup.Results = Popup.Popup.getElementsByClassName("rhPopupResults")[0];
        Popup.Close = Popup.Popup.getElementsByClassName("rhPopupClose")[0];
        if (esgst.st) {
            Popup.Popup.classList.remove(`popup`);
            Popup.Popup.classList.add(`esgst-hidden`);
        }
        var popup;
        Popup.popUp = function (Callback) {
            if (esgst.st) {
                Popup.Popup.classList.add(`popup`);
                Popup.Popup.classList.remove(`esgst-hidden`);
            }
            popup = $(Popup.Popup).bPopup({
                amsl: [0],
                fadeSpeed: 200,
                followSpeed: 500,
                modalColor: "#3c424d",
                opacity: 0.85,
                onClose: function () {
                    if (esgst.st) {
                        Popup.Popup.classList.remove(`popup`);
                        Popup.Popup.classList.add(`esgst-hidden`);
                    }
                    if (Temp) {
                        Popup.Popup.remove();
                    }
                }
            }, Callback);
            return popup;
        };
        Popup.Popup.addEventListener(`click`, function () {
            if (popup) {
                popup.reposition();
            }
        });
        return Popup;
    }

    /* Popout */

    function createPopout_v6(className, click) {
        var currentContext, popout, timeout;
        popout = {};
        popout.popout = insertHtml(document.body, `beforeEnd`, `<div class="${className} esgst-popout esgst-hidden"></div>`);
        popout.open = function(context) {
            currentContext = context;
            popout.popout.classList.remove(`esgst-hidden`);
            popout.reposition(context);
        };
        popout.close = function() {
            popout.popout.classList.add(`esgst-hidden`);
        };
        popout.reposition = function() {
            var contextLeft, contextRect, contextTop, contextWidth, contextHeight, popoutHeight, popoutWidth;
            popout.popout.style.left = `0`;
            popout.popout.style.top = `0`;
            contextRect = currentContext.getBoundingClientRect();
            contextLeft = contextRect.left;
            contextTop = contextRect.top;
            contextWidth = contextRect.width;
            contextHeight = contextRect.height;
            popoutHeight = popout.popout.offsetHeight;
            popoutWidth = popout.popout.offsetWidth;
            if (contextLeft + popoutWidth > document.documentElement.clientWidth) {
                popout.popout.style.left = `${contextLeft - popoutWidth + contextWidth}px`;
            } else {
                popout.popout.style.left = `${contextLeft}px`;
            }
            if (contextTop + popoutHeight > document.documentElement.clientHeight) {
                popout.popout.style.top = `${contextTop - popoutHeight + window.scrollY}px`;
            } else {
                popout.popout.style.top = `${contextTop + contextHeight + window.scrollY}px`;
            }
        };
        if (click) {
            document.addEventListener(`click`, function (event) {
                if (currentContext && !currentContext.contains(event.target) && !popout.popout.contains(event.target)) {
                    popout.close();
                }
            });
        } else {
            popout.popout.addEventListener(`mouseenter`, function(event) {
                if (timeout) {
                    window.clearTimeout(timeout);
                    timeout = null;
                }
            });
            popout.popout.addEventListener(`mouseleave`, function(event) {
                timeout = window.setTimeout(function() {
                    if (!currentContext.contains(event.relatedTarget)) {
                        popout.close();
                    }
                }, 1000);
            });
        }
        return popout;
    }

    function createPopout(Context) {
        var Popout;
        Context.insertAdjacentHTML("beforeEnd", "<div class=\"page__outer-wrap page_outer_wrap rhPopout rhHidden\"></div>");
        Popout = {
            Popout: Context.lastElementChild,
            customRule: function () {
                return true;
            },
            popOut: function (Context, Callback) {
                if (Callback) {
                    Callback(Popout.Popout);
                }
                Popout.reposition(Context);
            },
            reposition: function (Context) {
                Popout.Popout.classList.remove("rhHidden");
                Popout.Popout.removeAttribute("style");
                repositionPopout(Popout.Popout, Context);
            }
        };
        document.addEventListener("click", function (Event) {
            if (!Popout.Popout.classList.contains("rhHidden") && document.body.contains(Event.target) && !Popout.Popout.contains(Event.target) && Popout.customRule(Event.target)) {
                Popout.Popout.classList.add("rhHidden");
            }
        });
        return Popout;
    }

    function repositionPopout(Popout, Context) {
        var PopoutRect, PopoutLeft, PopoutWidth, PopoutTop, PopoutHeight, ContextRect, ContextLeft, ContextWidth, ContextTop, ContextHeight;
        PopoutRect = Popout.getBoundingClientRect();
        PopoutLeft = PopoutRect.left;
        PopoutWidth = PopoutRect.width;
        PopoutTop = PopoutRect.top;
        PopoutHeight = PopoutRect.height;
        ContextRect = Context.getBoundingClientRect();
        ContextLeft = ContextRect.left;
        ContextWidth = ContextRect.width;
        ContextTop = ContextRect.top;
        ContextHeight = ContextRect.height;
        Popout.style.marginLeft = ((PopoutLeft + PopoutWidth) > document.documentElement.clientWidth) ?
            (-(PopoutWidth - ContextWidth - (ContextLeft - PopoutLeft)) + "px") : ((ContextLeft - PopoutLeft) + "px");
        if ((PopoutHeight + ContextTop + ContextHeight + 44) > document.documentElement.clientHeight) {
            Popout.style.marginTop = (PopoutTop > ContextTop) ? (-(PopoutHeight + (PopoutTop - ContextTop)) + "px") : (-(PopoutHeight - (ContextTop - PopoutTop)) + "px");
        } else {
            Popout.style.marginTop = (PopoutTop > ContextTop) ? (((ContextTop - PopoutTop) + ContextHeight) + "px") : (-((PopoutTop - ContextTop) - ContextHeight) + "px");
        }
    }

    /* Button Set */

    function createButtonSet(color1, color2, icon1, icon2, title1, title2, callback1, callback2) {
        var button1, button2, classes, i, n, set;
        set = {
            dependencies: []
        };
        set.set = document.createElement(`div`);
        set.set.className = `esgst-button-set`;
        classes = {
            green: `form__submit-button`,
            grey: `form__saving-button`,
            red: `sidebar__error`,
            yellow: `sidebar__entry-delete`
        };
        set.set.innerHTML = `
            <div class="${classes[color1]} btn_action ${color1}">
                <i class="fa ${icon1}"></i>
                <span>${title1}</span>
            </div>
            <div class="${classes[color2]} btn_action ${color2} is-disabled is_disabled esgst-hidden">
                <i class="fa ${icon2}"></i>
                <span>${title2}</span>
            </div>
        `;
        button1 = set.set.firstElementChild;
        button2 = set.set.lastElementChild;
        set.toggle = function (callback) {
            for (i = 0, n = set.dependencies.length; i < n; ++i) {
                set.dependencies[i].classList.toggle(`esgst-hidden`);
            }
            button1.classList.toggle(`esgst-hidden`);
            button2.classList.toggle(`esgst-hidden`);
            if (callback) {
                callback(set.toggle);
            }
        };
        set.trigger = function () {
            set.toggle(callback1);
        };
        button1.addEventListener(`click`, set.toggle.bind(null, callback1));
        if (callback2) {
            button2.classList.remove(`is-disabled`, `is_disabled`);
            button2.addEventListener(`click`, set.toggle.bind(null, callback2));
        }
        return set;
    }

    /* */

    function createButton(Context, DefaultIcon, DefaultName, OnClickIcon, OnClickName, DefaultCallback, OnClickCallback, White, Yellow) {
        var DefaultButton, OnClickButton;
        Context.innerHTML =
            "<div class=\"" + (White ? "form__saving-button white" : (Yellow ? "sidebar__entry-delete" : "form__submit-button green")) + " btn_action rhDefaultButton\">" +
            "    <i class=\"fa " + DefaultIcon + "\"></i>" +
            "    <span>" + DefaultName + "</span>" +
            "</div>" +
            "<div class=\"form__saving-button btn_action grey is-disabled is_disabled rhOnClickButton rhHidden\">" +
            "    <i class=\"fa " + OnClickIcon + "\"></i>" +
            "    <span>" + OnClickName + "</span>" +
            "</div>";
        DefaultButton = Context.firstElementChild;
        OnClickButton = Context.lastElementChild;
        DefaultButton.addEventListener("click", function () {
            DefaultButton.classList.add("rhHidden");
            OnClickButton.classList.remove("rhHidden");
            DefaultCallback(function () {
                OnClickButton.classList.add("rhHidden");
                DefaultButton.classList.remove("rhHidden");
            });
        });
        if (OnClickCallback) {
            OnClickButton.classList.remove("is-disabled", "is_disabled");
            OnClickButton.addEventListener("click", function () {
                OnClickButton.classList.add("rhHidden");
                DefaultButton.classList.remove("rhHidden");
                OnClickCallback();
            });
        }
    }

    function createCheckbox(Context, Default) {
        var Checkbox, Input, Disabled, Hover, Enabled;
        Context.innerHTML =
            "<span class=\"rhCheckbox\">" +
            "    <input class=\"rhHidden\" type=\"checkbox\">" +
            "    <i class=\"fa fa-circle-o\"></i>" +
            "    <i class=\"fa fa-circle rhHidden\"></i>" +
            "    <i class=\"fa fa-check-circle rhHidden\"></i>" +
            "</span>";
        Checkbox = Context.firstElementChild;
        Input = Checkbox.firstElementChild;
        Disabled = Input.nextElementSibling;
        Hover = Disabled.nextElementSibling;
        Enabled = Hover.nextElementSibling;
        Input.checked = Default;
        Checkbox.addEventListener("mouseenter", setCheckboxHover);
        Checkbox.addEventListener("mouseleave", setCheckboxDisabled);
        Checkbox.addEventListener("click", function () {
            Input.checked = Input.checked ? false : true;
            setCheckboxEnabled();
        });
        setCheckboxEnabled();

        function setCheckboxHover() {
            Disabled.classList.add("rhHidden");
            Enabled.classList.add("rhHidden");
            Hover.classList.remove("rhHidden");
        }

        function setCheckboxDisabled() {
            Hover.classList.add("rhHidden");
            Enabled.classList.add("rhHidden");
            Disabled.classList.remove("rhHidden");
        }

        function setCheckboxEnabled() {
            if (Input.checked) {
                Disabled.classList.add("rhHidden");
                Hover.classList.add("rhHidden");
                Enabled.classList.remove("rhHidden");
                Checkbox.removeEventListener("mouseenter", setCheckboxHover);
                Checkbox.removeEventListener("mouseleave", setCheckboxDisabled);
            } else {
                Enabled.classList.add("rhHidden");
                Disabled.classList.remove("rhHidden");
                Checkbox.addEventListener("mouseenter", setCheckboxHover);
                Checkbox.addEventListener("mouseleave", setCheckboxDisabled);
            }
        }

        return {
            Checkbox: Input,
            check: function () {
                Input.checked = true;
                setCheckboxEnabled();
            },
            uncheck: function () {
                Input.checked = false;
                setCheckboxEnabled();
            },
            toggle: function () {
                Input.checked = Input.checked ? false : true;
                setCheckboxEnabled();
            }
        };
    }

    function createCheckbox_v6(context, defaultValue, threeState) {
        var html = `
<span class="esgst-checkbox">
<input class="esgst-hidden" type="checkbox">
<i class="fa fa-circle-o"></i>
<i class="fa fa-circle"></i>
<i class="fa fa-check-circle"></i>
</span>
`;
        context.insertAdjacentHTML(`afterBegin`, html);
        var checkbox = {
            value: defaultValue,
            threeState: threeState
        };
        checkbox.checkbox = context.firstElementChild;
        checkbox.input = checkbox.checkbox.firstElementChild;
        checkbox.disabled = checkbox.input.nextElementSibling;
        checkbox.none = checkbox.disabled.nextElementSibling;
        checkbox.enabled = checkbox.none.nextElementSibling;
        checkbox.showNone = showNoneCheckbox.bind(null, checkbox);
        checkbox.hideNone = hideNoneCheckbox.bind(null, checkbox);
        if (!checkbox.threeState) {
            if (checkbox.value) {
                checkbox.input.checked = true;
                checkbox.disabled.classList.add(`esgst-hidden`);
                checkbox.none.classList.add(`esgst-hidden`);
            } else {
                checkbox.input.checked = false;
                checkbox.none.classList.add(`esgst-hidden`);
                checkbox.disabled.classList.add(`esgst-hidden`);
                checkbox.checkbox.addEventListener(`mouseenter`, checkbox.showNone);
                checkbox.checkbox.addEventListener(`mouseleave`, checkbox.hideNone);
            }
            checkbox.checkbox.addEventListener(`click`, changeCheckboxState.bind(null, checkbox, true));
            changeCheckboxState(checkbox);
        } else {
            if (checkbox.value == `disabled`) {
                checkbox.none.classList.add(`esgst-hidden`);
                checkbox.enabled.classList.add(`esgst-hidden`);
            } else if (checkbox.value == `none`) {
                checkbox.disabled.classList.add(`esgst-hidden`);
                checkbox.enabled.classList.add(`esgst-hidden`);
            } else {
                checkbox.disabled.classList.add(`esgst-hidden`);
                checkbox.none.classList.add(`esgst-hidden`);
            }
            checkbox.checkbox.addEventListener(`click`, changeCheckboxState.bind(null, checkbox));
        }
        checkbox.check = checkCheckbox.bind(null, checkbox);
        checkbox.uncheck = uncheckCheckbox.bind(null, checkbox);
        checkbox.toggle = toggleCheckbox.bind(null, checkbox);
        return checkbox;
    }

    function showNoneCheckbox(checkbox) {
        checkbox.disabled.classList.add(`esgst-hidden`);
        checkbox.none.classList.remove(`esgst-hidden`);
    }

    function hideNoneCheckbox(checkbox) {
        checkbox.disabled.classList.remove(`esgst-hidden`);
        checkbox.none.classList.add(`esgst-hidden`);
    }

    function checkCheckbox(checkbox) {
        checkbox.input.checked = true;
        changeCheckboxState(checkbox);
    }

    function uncheckCheckbox(checkbox) {
        checkbox.input.checked = false;
        changeCheckboxState(checkbox);
    }

    function toggleCheckbox(checkbox) {
        if (checkbox.input.checked) {
            checkbox.input.checked = false;
        } else {
            checkbox.input.checked = true;
        }
        changeCheckboxState(checkbox);
    }

    function changeCheckboxState(checkbox, toggle) {
        if (!checkbox.threeState) {
            if (toggle) {
                if (checkbox.input.checked) {
                    checkbox.input.checked = false;
                } else {
                    checkbox.input.checked = true;
                }
            }
            if (checkbox.input.checked) {
                checkbox.value = true;
                checkbox.disabled.classList.add("esgst-hidden");
                checkbox.none.classList.add("esgst-hidden");
                checkbox.enabled.classList.remove("esgst-hidden");
                checkbox.checkbox.removeEventListener("mouseenter", checkbox.showNone);
                checkbox.checkbox.removeEventListener("mouseleave", checkbox.hideNone);
            } else {
                checkbox.value = false;
                checkbox.enabled.classList.add("esgst-hidden");
                checkbox.disabled.classList.remove("esgst-hidden");
                checkbox.checkbox.addEventListener("mouseenter", checkbox.showNone);
                checkbox.checkbox.addEventListener("mouseleave", checkbox.hideNone);
            }
        } else {
            if (checkbox.value == `disabled`) {
                checkbox.disabled.classList.add(`esgst-hidden`);
                checkbox.none.classList.remove(`esgst-hidden`);
                checkbox.value = `none`;
            } else if (checkbox.value == `none`) {
                checkbox.none.classList.add(`esgst-hidden`);
                checkbox.enabled.classList.remove(`esgst-hidden`);
                checkbox.value = `enabled`;
            } else {
                checkbox.enabled.classList.add(`esgst-hidden`);
                checkbox.disabled.classList.remove(`esgst-hidden`);
                checkbox.value = `disabled`;
            }
        }
    }

    function createToggleSwitch(context, id, inline, name, sg, st, tooltip, value) {
        var i, inputHtml, n, toggleSwitch, tooltipp, tooltipHtml;
        toggleSwitch = {
            dependencies: []
        };
        if (inline) {
            inline = `inline`;
        } else {
            inline = ``;
        }
        if (tooltip) {
            tooltipHtml = `<i class="fa fa-question-circle" title="${tooltip}"></i>`;
        } else {
            tooltipHtml = ``;
        }
        toggleSwitch.container = insertHtml(context, `beforeEnd`, `
            <div class="esgst-toggle-switch-container ${inline}">
                <label class="esgst-toggle-switch">
                    <input type="checkbox">
                    <div class="esgst-toggle-switch-slider"></div>
                </label>
                <span>${name}</span>
                ${tooltipHtml}
            </div>
        `);
        toggleSwitch.input = toggleSwitch.container.firstElementChild.firstElementChild;
        toggleSwitch.input.checked = value;
        toggleSwitch.input.addEventListener(`change`, function () {
            if (id) {
                setValue(id, toggleSwitch.input.checked, sg, st);
                esgst[id] = toggleSwitch.input.checked;
            }
            if (toggleSwitch.input.checked) {
                for (i = 0, n = toggleSwitch.dependencies.length; i < n; ++i) {
                    toggleSwitch.dependencies[i].classList.remove(`esgst-hidden`);
                }
            } else {
                for (i = 0, n = toggleSwitch.dependencies.length; i < n; ++i) {
                    toggleSwitch.dependencies[i].classList.add(`esgst-hidden`);
                }
            }
        });
        return toggleSwitch;
    }

    function createOptions(Context, Element, Options) {
        var I, N;
        for (I = 0, N = Options.length; I < N; ++I) {
            createOption(Context, Options[I], Element);
        }
    }

    function createOption(Context, Option, Element) {
        var Name, Checkbox, Key, ID, Dependency;
        Context.insertAdjacentHTML(
            "beforeEnd",
            "<li" + (Option.Check() ? "" : " class=\"rhHidden\"") + ">" +
            "    <span></span>" +
            "    <span>" + Option.Description + "</span>" +
            "    <i class=\"fa fa-question-circle\" title=\"" + Option.Title + "\"></i>" +
            "</li>"
        );
        Name = Option.Name;
        Element[Name] = Context.lastElementChild;
        Checkbox = Element[Name].firstElementChild;
        Key = Option.Key;
        ID = Option.ID;
        Element[Key] = createCheckbox(Checkbox, GM_getValue(ID, false)).Checkbox;
        Dependency = Option.Dependency;
        Checkbox.addEventListener("click", function () {
            GM_setValue(ID, Element[Key].checked);
            if (Dependency) {
                Element[Dependency].classList.toggle("rhHidden");
            }
        });
    }

    function createResults(Context, Element, Results) {
        var I, N, Key;
        for (I = 0, N = Results.length; I < N; ++I) {
            Context.insertAdjacentHTML(
                "beforeEnd",
                "<li class=\"rhHidden\">" + Results[I].Icon +
                "    <span class=\"rhBold\">" + Results[I].Description + " (<span>0</span>):</span>" +
                "    <span class=\"popup__actions\"></span>" +
                "</li>"
            );
            Key = Results[I].Key;
            Element[Key] = Context.lastElementChild;
            Element[Key + "Count"] = Element[Key].firstElementChild.nextElementSibling.firstElementChild;
            Element[Key + "Users"] = Element[Key].lastElementChild;
        }
    }

    function createDescription(Description) {
        return (
            "<form>" +
            "    <div class=\"form__input-description rhDescription\">" +
            "        <div class=\"input_description\">" + Description + "</div>" +
            "    </div>" +
            "</form>"
        );
    }

    function createNavigationSection(Name, Items) {
        var Section, I, N;
        Section =
            "<h3 class=\"sidebar__heading\">" + Name + "</h3>" +
            "<ul class=\"sidebar__navigation\">";
        for (I = 0, N = Items.length; I < N; ++I) {
            Section += createNavigationItem(Items[I].Name, Items[I].URL, Items[I].Title);
        }
        Section += "</ul>";
        return Section;
    }

    function createNavigationItem(Name, URL, Title) {
        return (
            "<li class=\"sidebar__navigation__item" + (Name ? (" " + Name) : "") + "\">" +
            "    <a class=\"sidebar__navigation__item__link\" href=\"" + URL + "\">" +
            "        <div class=\"sidebar__navigation__item__name\">" + Title + "</div>" +
            "        <div class=\"sidebar__navigation__item__underline\"></div>" +
            "    </a>" +
            "</li>"
        );
    }

    function addStyles() {
        var Temp, Positive, Negative, Unknown;
        var colors = [
            {
                id: `gc_h`,
                key: `hidden`,
                mainKey: `esgst-gc`
            },
            {
                id: `gc_gi`,
                key: `giveawayInfo`,
                mainKey: `esgst-gc`
            },
            {
                id: `gc_b`,
                key: `bundled`,
                mainKey: `esgst-gc`
            },
            {
                id: `gc_b_r`,
                key: `bundled`,
                mainKey: `esgst-gc`
            },
            {
                id: `gc_w`,
                key: `wishlisted`,
                mainKey: `esgst-gc`
            },
            {
                id: `gc_o`,
                key: `owned`,
                mainKey: `esgst-gc`
            },
            {
                id: `gc_i`,
                key: `ignored`,
                mainKey: `esgst-gc`
            },
            {
                id: `gc_rm`,
                key: `removed`,
                mainKey: `esgst-gc`
            },
            {
                id: `gc_ea`,
                key: `earlyAccess`,
                mainKey: `esgst-gc`
            },
            {
                id: `gc_tc`,
                key: `tradingCards`,
                mainKey: `esgst-gc`
            },
            {
                id: `gc_a`,
                key: `achievements`,
                mainKey: `esgst-gc`
            },
            {
                id: `gc_mp`,
                key: `multiplayer`,
                mainKey: `esgst-gc`
            },
            {
                id: `gc_sc`,
                key: `steamCloud`,
                mainKey: `esgst-gc`
            },
            {
                id: `gc_l`,
                key: `linux`,
                mainKey: `esgst-gc`
            },
            {
                id: `gc_m`,
                key: `mac`,
                mainKey: `esgst-gc`
            },
            {
                id: `gc_dlc`,
                key: `dlc`,
                mainKey: `esgst-gc`
            },
            {
                id: `gc_p`,
                key: `package`,
                mainKey: `esgst-gc`
            },
            {
                id: `gc_g`,
                key: `genres`,
                mainKey: `esgst-gc`
            },
            {
                id: `wbh_w`,
                key: `whitelisted`,
                mainKey: `esgst-wbh-highlight`
            },
            {
                id: `wbh_b`,
                key: `blacklisted`,
                mainKey: `esgst-wbh-highlight`
            }
        ];
        var style;
        for (var i = 0, n = colors.length; i < n; ++i) {
            var color = esgst[`${colors[i].id}_color`];
            var backgroundColor = esgst[`${colors[i].id}_bgColor`];
            style = `
.${colors[i].mainKey}.${colors[i].key} {
color: ${color} !important;
background-color: ${backgroundColor} !important;
}
`;
            GM_addStyle(style);
        }
        document.body.insertAdjacentHTML(
            "beforeEnd",
            "<span class=\"dropdown_btn\">" +
            "    <i class=\"icon-green green\"></i>" +
            "    <i class=\"icon-red red\"></i>" +
            "    <i class=\"icon-grey grey\"></i>" +
            "</span>"
        );
        Temp = document.body.lastElementChild;
        Positive = Temp.firstElementChild;
        Negative = Positive.nextElementSibling;
        Unknown = Negative.nextElementSibling;
        Positive = window.getComputedStyle(Positive).color;
        Negative = window.getComputedStyle(Negative).color;
        Unknown = window.getComputedStyle(Unknown).color;
        Temp.remove();
        var maxHeight = window.innerHeight - 300;
        style = `
.esgst-gm-giveaway {
    background-color: #fff;
    border: 1px solid;
    border-radius: 4px;
    cursor: pointer;
    display: inline-block;
    margin: 5px 2px;
    padding: 2px 5px;
}

.esgst-feature-description {
background-color: #fff;
color: #465670;
padding: 10px;
width: 420px;
border-radius: 4px;
}

.esgst-feature-description img {
max-width: 400px;
}

.esgst-gm-giveaway.error {
    background-color: rgba(236, 133, 131, 0.5);
}

.esgst-gm-giveaway.success {
    background-color: rgba(150, 196, 104, 0.5);
}

.esgst-gm-giveaway.connected {
    text-decoration: line-through;
}

.esgst-gts-section >*, .esgst-gm-section >* {
margin: 5px 0;
}

.esgst-gm-section .esgst-button-set {
display: inline-block;
margin: 5px;
}

.esgst-ggl-panel {
color: #6b7a8c;
font-size: 12px;
padding: 5px;
}

.esgst-ggl-panel >* {
display: inline-block;
}

.esgst-ggl-panel >*:not(:last-child) {
margin-right: 10px;
}

.esgst-ggl-panel a:last-child {
border-bottom: 1px dotted;
box-shadow: 0 1px 0 rgba(255,255,255,0.3);
}

.esgst-ggl-panel .table_image_avatar {
cursor: pointer;
display: inline-block;
height: 12px;
width: 12px;
vertical-align: middle;
}

.esgst-ggl-member {
font-weight: bold;
}

.esgst-ggl-button {
cursor: pointer;
}

.esgst-popout {
position: absolute;
left: 0;
top: 0;
z-index: 99999;
}

.esgst-popup {

color: #465670;
max-width: 75%;
overflow: auto;
    padding: 35px 100px;
    position: absolute;
    background-color: #f0f2f5;
    border-radius: 4px;
    text-align: center;
    text-shadow: 1px 1px rgba(255,255,255,0.94);
}

.esgst-popup-progress {
margin: 10px 0;
}

.esgst-popup-description {
max-height: ${maxHeight}px;
overflow: auto;
}

.esgst-popup .popup__keys__list {
max-height: none;
}

.esgst-heading-button {
display: inline-block;
cursor: pointer;
}

.esgst-popup .popup__actions {
margin-top: 25px;
}

.esgst-popup-icon {
height: 48px;
width: 48px;
}

.esgst-popup-title span {
font-weight: bold;
}

.rhPopupDescription.left, .esgst-text-left {
text-align: left;
}
.esgst-hidden {
display: none !important;
}
.esgst-clickable {
cursor: pointer;
}

.fa img {
height: 14px;
width: 14px;
vertical-align: middle;
}
.nav__left-container .fa img {
vertical-align: baseline;
}

.esgst-checkbox, .esgst-hb-update, .esgst-hb-changelog, .esgst-dh-view-button {
cursor: pointer;
}

.esgst-sm-small-number {
font-size: 12px;
display: inline-block;
}

.esgst-toggle-switch-container {
    margin: 2px;
}

.esgst-toggle-switch-container.inline {
    display: inline-block;
}

.esgst-toggle-switch {
  position: relative;
  display: inline-block;
  width: 26px;
  height: 14px;
    vertical-align: top;
}

.esgst-toggle-switch input {display:none;}

.esgst-toggle-switch-slider {
  border-radius: 20px;
  position: absolute;
  cursor: pointer;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: #ccc;
  -webkit-transition: .4s;
  transition: .4s;
}

.esgst-toggle-switch-slider:before {
  border-radius: 50%;
  position: absolute;
  content: "";
  height: 12px;
  width: 12px;
  left: 1px;
  bottom: 1px;
  background-color: white;
  -webkit-transition: .4s;
  transition: .4s;
}

input:checked + .esgst-toggle-switch-slider {
  background-color: #4B72D4;
}

input:focus + .esgst-toggle-switch-slider {
  box-shadow: 0 0 1px #4B72D4;
}

input:checked + .esgst-toggle-switch-slider:before {
  -webkit-transform: translateX(12px);
  -ms-transform: translateX(12px);
  transform: translateX(12px);
}

.esgst-adots, .esgst-rbot {
margin-bottom: 25px;
}

.esgst-float-right {
float: right;
}

.sidebar .esgst-adots {
max-height: 300px;
overflow: auto;
}

.sidebar .esgst-adots {
margin: 0;
}

.sidebar .esgst-adots .PUTTags {
display: none;
}

.sidebar .esgst-adots .esgst-dh-highlighted {
padding: 0 !important;
padding-bottom: 5px !important;
}

.sidebar .esgst-adots .table__column__heading {
display: inline-block;
max-width: 225px;
overflow: hidden;
text-overflow: ellipsis;
vertical-align: middle;
white-space: nowrap;
}

.sidebar .esgst-adots .table__row-outer-wrap {
padding: 0;
padding-bottom: 5px;
border: 0;
box-shadow: none;
}

.sidebar .esgst-adots .table__row-inner-wrap {
display: block;
}

.sidebar .esgst-adots .table__row-inner-wrap >:first-child {
float: left;
width: 45px;
height: 45px;
}

.sidebar .esgst-adots .table__row-inner-wrap >:first-child >* {
width: 45px;
height: 45px;
}

.sidebar .esgst-adots .table__row-inner-wrap >:last-child {
margin-left: 50px;
text-align: left;
width: auto;
}

.sidebar .esgst-adots .table__row-inner-wrap >*:not(:last-child) {
display: inline-block;
}

.sidebar .esgst-adots .table__column--width-fill {
margin-left: 5px;
vertical-align: top;
width: calc(100% - 50px);
}

.esgst-rbot .reply_form .btn_cancel {
display: none;
}

.esgst-lpv-container >* {
background-image: none !important;
}

.esgst-aas-button, .esgst-es-pause-button, .esgst-es-refresh-button {
cursor: pointer;
display: inline-block;
}

.esgst-es-page-heading {
margin-top: 25px;
}

.esgst-gc-panel {
text-align: left;
}

.esgst-gc-panel a {
    text-decoration: none;
}

.esgst-gc-panel.simplified {
display: inline-block;
margin: 0 0 0 5px;
}

.esgst-gc {
display: inline-block;
margin: 0;
margin-bottom: 5px;
margin-top: 5px;
position: static;
text-shadow: none;
}

.esgst-gc.rating i {
color: #fff !important;
}

.esgst-gc.rating.positive {
color: #fff !important;
background-color: #66c0f4;
}

.esgst-gc.rating.negative {
color: #fff !important;
background-color: #a34c25;
}

.esgst-gc.rating.mixed {
color: #fff !important;
background-color: #b9a074;
}

.esgst-gc.genres {
    max-width: 150px;
    overflow: hidden;
    text-overflow: ellipsis;
    vertical-align: middle;
    white-space: nowrap;
}

.esgst-gf-container input {
display: inline-block;
height: 20px;
padding: 0 5px;
width: 100px;
}

.esgst-gf-filters >* {
display: inline-block;
margin: 5px;
vertical-align: top;
}

.esgst-gf-basic-filter {
margin: 10px;
width: 300px;
}

.esgst-gf-basic-filter >* {
margin: 8px;
}

.esgst-gf-type-filter, .esgst-gf-category-filter, .esgst-gf-exception-filter, .esgst-gf-legend {
margin: 5px;
}

.esgst-gf-button {
border-top: 1px;
}

.esgst-wbh-highlight {
border: none !important;
border-radius: 4px;
padding: 2px 5px;
text-shadow: none;
}

.page__heading__breadcrumbs .esgst-wbh-highlight {
padding: 0 2px;
}

.esgst-sm-colors input {
display: inline-block;
padding: 0;
width: 100px;
}

.esgst-sm-colors select {
display: inline-block;
padding: 0;
width: 100px;
}

.esgst-sm-colors-default {
line-height:normal;
padding: 5px 15px;
}

.esgst-ged-icon {
margin: 0 0 0 10px;
}

.PGBContainer, .esgst-gf-box {
border-radius: 0 !important;
margin: 0! important;
}

.ERButton {
cursor: pointer;
display: inline-block;
}

.esgst-egh-icon {
cursor: pointer;
}

.giveaway__row-outer-wrap .esgst-egh-button, .table__row-outer-wrap .esgst-egh-button {
margin-right: 5px;
}

p.table__column__heading {
display: inline-block;
}

.MTGameCheckbox ~ .table__row-outer-wrap {
display: inline-block;
}

.esgst-gt-panel {
border: 0! important;
cursor: pointer;
display: inline-block;
line-height: normal;
text-decoration: none !important;
}

.esgst-gt-tags >* {
display: inline-block !important;
height: auto;
margin: 0;
padding: 2px;
width: auto;
}

.esgst-gt-tags >:not(:first-child) {
margin-left: 5px;
}

.giveaway__row-outer-wrap .esgst-gt-panel, .table__row-outer-wrap .esgst-gt-panel {
margin-left: 5px;
}

.esgst-giveaway-links {
float: left;
margin: 2px;
}

.esgst-giveaway-panel.giveaway__columns {
float: right;
margin: 2px;
}

.esgst-giveaway-panel .esgst-button-set {
border: 0;
padding: 0;
}

.esgst-giveaway-panel .esgst-button-set >* {
line-height: inherit;
margin:0;
}

.esgst-giveaway-panel >:first-child {
margin: 0;
}

.esgst-giveaway-panel >*:not(:first-child) {
margin: 0 0 0 5px;
}

.esgst-giveaway-panel .form__submit-button, .esgst-giveaway-panel .form__saving-button {
margin-bottom: 0;
min-width: 0;
}
`;
        GM_addStyle(style);
        GM_addStyle(
            ".markdown {" +
            "    word-break: break-word;" +
            "}" +
            ".rhHidden {" +
            "    display: none !important;" +
            "}" +
            ".rhBold {" +
            "    font-weight: bold;" +
            "}" +
            ".rhItalic {" +
            "    font-style: italic;" +
            "}" +
            ".esgst-busy >*, .CFHALIPF {" +
            "    opacity: 0.2;" +
            "}" +
            ".rhPopup {" +
            "    max-height: 75%;" +
            "    overflow: auto;" +
            "    min-width: 300px;" +
            "   max-width: 75%;" +
            "}" +
            ".rhPopupLarge {" +
            "    width: 75%;" +
            "}" +
            ".rhPopupIcon {" +
            "    height: 48px;" +
            "    width: 48px;" +
            "}" +
            ".rhPopupTitle span {" +
            "    font-weight: bold;" +
            "}" +
            ".rhPopupTextArea {" +
            "    max-height: 200px !important;" +
            "    min-height: 200px !important;" +
            "}" +
            ".rhPopupOptions, .rhDescription, .SMFeatures {" +
            "    margin: 5px;" +
            "}" +
            ".rhPopupButton {" +
            "    display: flex;" +
            "    justify-content: center;" +
            "    margin: 15px 0 0;" +
            "}" +
            ".rhPopupButton div {" +
            "    justify-content: center;" +
            "    line-height: normal;" +
            "    margin: 0 !important;" +
            "    min-width: 200px;" +
            "    padding: 7px 15px;" +
            "}" +
            ".rhPopupButton div >* {" +
            "    flex: 0;" +
            "}" +
            ".rhPopupStatus {" +
            "    margin: 15px 0;" +
            "}" +
            ".rhPopupResults {" +
            "    margin: 0 0 15px;" +
            "}" +
            ".rhPopupResults >:not(:last-child) {" +
            "    margin: 0 0 15px;" +
            "}" +
            ".rhPopupResults .popup__actions, .comment__actions .RMLLink {" +
            "    margin: 0 0 0 10px;" +
            "}" +
            ".rhPopupResults .popup__actions >* {" +
            "    border: 0;" +
            "    cursor: initial;" +
            "    display: inline-block;" +
            "}" +
            ".rhPopupResults .popup__actions a {" +
            "    border-bottom: 1px dotted;" +
            "}" +
            ".rhPopupResults .table__row-outer-wrap {" +
            "    margin: 0;" +
            "    text-align: left;" +
            "}" +
            ".rhPopout {" +
            "    align-self: baseline;" +
            "    background-color: #fff;" +
            "    border: 1px solid #d2d6e0;" +
            "    border-radius: 5px;" +
            "    cursor: initial;" +
            "    font-size: 12px;" +
            "    height: auto;" +
            "    line-height: normal;" +
            "    max-height: 600px;" +
            "    padding: 5px !important;" +
            "    position: absolute;" +
            "    text-align: left;" +
            "    text-shadow: none;" +
            "    white-space: nowrap;" +
            "    z-index: 997;" +
            "}" +
            ".rhCheckbox, .esgst-ap-avatar {" +
            "    cursor: pointer;" +
            "}" +
            ".rhWBIcon, .esgst-wbh-icon, .esgst-namwc-icon {" +
            "    display: inline-block;" +
            "    line-height: normal;" +
            "    margin: 0 5px 0 0;" +
            "}" +
            ".rhWBIcon i, .esgst-wbh-icon i, .esgst-namwc-icon i {" +
            "    border: 0;" +
            "    line-height: normal;" +
            "    margin: 0;" +
            "    text-shadow: none !important;" +
            "}" +
            ".SMMenu .form__submit-button {" +
            "    margin: 0 5px;" +
            "}" +
            ".SMTags >* {" +
            "    display: none;" +
            "}" +
            ".SMManageDataPopup, .SMImport, .SMExport, .SMDelete, .SMTag {" +
            "    display: block;" +
            "}" +
            ".nav__row.SMRecentUsernameChanges, .nav__row.SMCommentHistory {" +
            "    display: flex;" +
            "}" +
            ".SMRecentUsernameChangesPopup a, .SMComments a {" +
            "    border-bottom: 1px dotted;" +
            "}" +
            ".SMSyncFrequency {" +
            "    display: block;" +
            "    width: 200px;" +
            "}" +
            ".HMBox {" +
            "    position: relative;" +
            "}" +
            ".ESHeading {" +
            "    margin: 0 0 5px;" +
            "}" +
            ".ESRecentDiscussions {" +
            "    margin: 25px 0;" +
            "}" +
            ".ESCommentBox {" +
            "    margin: 5px 0 15px;" +
            "    padding: 0;" +
            "}" +
            ".ESPanel >*:not(:last-child), .esgst-ap-popout .featured__table__row__left:not(.esgst-uh-title), .MRReply, .MREdit {" +
            "    margin: 0 10px 0 0;" +
            "}" +
            ".ESStatus {" +
            "    margin: 5px 0;" +
            "    text-align: center;" +
            "}" +
            ".SMManageData, .SMManageFilteredUsers, .SMRecentUsernameChanges, .SMCommentHistory, .SMManageTags, .ESPanel .pagination__navigation >*, .ESPanel .pagination_navigation >*, .ESRefresh, .ESPause," +
            ".MTButton, .MTAll, .MTNone, .MTInverse, .WBCButton, .NRFButton, .UGDButton, .GTSView, .UGSButton, .GDCBPButton, .CTGoToUnread, .CTMarkRead," +
            ".CTMarkVisited, .MCBPButton, .MPPButton, .ASButton {" +
            "    cursor: pointer;" +
            "    display: inline-block;" +
            "}" +
            ".SGCBox .table__row-inner-wrap {" +
            "    padding: 0 10px;" +
            "}" +
            ".PUTButton i, .MTUserCheckbox i, .MTGameCheckbox i, .CFHPanel span >:first-child >* {" +
            "    margin: 0 !important;" +
            "}" +
            ".PUTButton {" +
            "    border: 0! important;" +
            "    cursor: pointer;" +
            "    display: inline-block;" +
            "    line-height: normal;" +
            "    margin: 0 0 0 5px;" +
            "    text-decoration: none !important;" +
            "}" +
            ".author_name + .PUTButton {" +
            "    margin: 0 5px 0 0;" +
            "}" +
            ".PUTTags {" +
            "    font-size: 10px;" +
            "    font-weight: bold;" +
            "}" +
            ".PUTTags >* {" +
            "    display: inline-block !important;" +
            "    height: auto;" +
            "    margin: 0;" +
            "    padding: 1px 2px;" +
            "    width: auto;" +
            "}" +
            ".PUTTags >:not(:first-child), .CTPanel >:not(:first-child) {" +
            "    margin: 0 0 0 5px;" +
            "}" +
            ".MTTag {" +
            "    display: inline-block;" +
            "}" +
            ".MTUserCheckbox, .MTGameCheckbox {" +
            "    display: inline-block;" +
            "    margin: 0 5px 0 0;" +
            "}" +
            ".esgst-namwc-highlight {" +
            "    font-weight: bold;" +
            "}" +
            ".positive, .positive i {" +
            "    color: " + Positive + " !important;" +
            "}" +
            ".negative, .negative i {" +
            "    color: " + Negative + " !important;" +
            "}" +
            ".unknown, .unknown i {" +
            "    color: " + Unknown + " !important;" +
            "}" +
            ".UGDData {" +
            "    width: 100%;" +
            "}" +
            ".UGDData tr:hover {" +
            "    background-color: rgba(119, 137, 154, 0.2);" +
            "}" +
            ".UGDData th {" +
            "    border: 1px solid;" +
            "    font-weight: bold;" +
            "    padding: 5px;" +
            "}" +
            ".UGDData td {" +
            "    border: 1px solid;" +
            "    padding: 5px;" +
            "}" +
            ".UGDData td:first-child {" +
            "    font-weight: bold;" +
            "}" +
            ".IWHIcon {" +
            "    margin: 0 0 0 5px;" +
            "}" + /* from SquishedPotato's dark theme */ `
.APBox .featured__inner-wrap .APLink[href*="group"] {
	top: -30px;
            }
            .esgst-ap-popout {
                border-radius: 5px;
            	box-shadow: 0 0 10px 2px hsla(0, 0%, 0%, 0.8);
            	min-width: 400px;
                padding: 0;
                text-shadow: none;
                z-index: 9999;
            }

            .esgst-ap-popout .featured__outer-wrap:not(.esgst-uh-box) {
    	        border-radius: 5px;
                padding: 5px;
                width: auto;
                white-space: normal;
            }

            .esgst-ap-popout .featured__inner-wrap {
                align-items: flex-start;
	            padding: 0 5px 0 0;
            }

            .esgst-ap-popout .featured__heading {
                margin: 0;
            }

            .esgst-ap-popout .featured__heading__medium {
                font-size: 18px;
            }

            .esgst-ap-link {
	            width: 100px;
            }

            .esgst-ap-link .global__image-outer-wrap--avatar-large {
	            box-sizing: content-box !important;
	            height: 64px !important;
                margin: 5px;
	            width: 64px !important;
            }

            .esgst-ap-popout .global__image-outer-wrap--avatar-large:hover {
            	background-color: hsla(0, 0%, 25%, 0.2) !important;
            }

            .esgst-ap-link .global__image-inner-wrap {
	            background-size: cover !important;
            }

            .esgst-ap-popout .sidebar__shortcut-outer-wrap {
            	margin: 10px 0;
            }

            .esgst-ap-popout .sidebar__shortcut-inner-wrap i {
	            height: 18px;
	            font-size: 12px;
            }

            .esgst-ap-popout .sidebar__shortcut-inner-wrap * {
            	line-height: 18px;
            	vertical-align: middle;
            }

            .esgst-ap-popout .sidebar__shortcut-inner-wrap img {
            	height: 16px;
            	vertical-align: baseline !important;
            	width: 16px;
            }

            .esgst-ap-popout .featured__table {
                display: inline-block;
                width: 100%;
            }

            .esgst-ap-popout .featured__table__row {
                padding: 2px;
            }

            .esgst-ap-popout .featured__table__row:nth-child(n + 3) {
            	margin-left: -95px;
            }

            .esgst-ap-popout .featured__table__row:last-of-type .featured__table__row__right * {
            	font-size: 11px;
            }

            ` +
            ".GTSApply, .GTSDelete, .esgst-ct-comment-button {" +
            "    cursor: pointer;" +
            "}" +
            ".GTSSave {" +
            "    display: inline-block;" +
            "    margin: 0 0 0 5px;" +
            "}" +
            ".ELGBButton, .ELGBButton + div {" +
            "    background: none;" +
            "    border: 0;" +
            "    box-shadow: none;" +
            "    padding: 0;" +
            "}" +
            ".ELGBButton >*, .ELGBButton + div >* {" +
            "    line-height: inherit;" +
            "    margin: 0;" +
            "}" +
            ".popup__keys__list .esgst-ggl-member, .esgst-dh-highlighted, .esgst-dh-highlighted.table__row-outer-wrap {" +
            "    background-color: " + Positive.replace(/rgb/, "rgba").replace(/\)/, ", 0.2)") + " !important;" +
            "    padding: 5px !important;" +
            "}" +
            ".esgst-gb-highlighted.ending {" +
            "    background-color: rgba(236, 133, 131, 0.8) !important;" +
            "    background-image: none !important;" +
            "}" +
            ".esgst-gb-highlighted.started {" +
            "    background-color: rgba(150, 196, 104, 0.8) !important;" +
            "    background-image: none !important;" +
            "}" +
            ".esgst-gb-highlighted.ending.started {" +
            "    background-color: rgba(193, 165, 118, 0.8) !important;" +
            "    background-image: none !important;" +
            "}" +
            ".esgst-ct-comment-read:hover, .esgst-ct-visited:hover {" +
            "    background-color: " + Unknown.replace(/rgb/, "rgba").replace(/\)/, ", 0.1)") + " !important;" +
            "}" +
            ".esgst-gb-button, .esgst-dh-button {" +
            "    cursor: pointer; display: inline-block;" +
            "    margin: 0 5px 0 0;" +
            "}" +
            ".comment__actions .esgst-ct-comment-button {" +
            "    margin: 0 0 0 10px;" +
            "}" +
            ".comment__actions >:first-child + .esgst-ct-comment-button {" +
            "    margin: 0;" +
            "}" +
            ".CFHPanel {" +
            "    margin: 0 0 2px;" +
            "    text-align: left;" +
            "}" +
            ".CFHPanel >* {" +
            "    display: inline-block;" +
            "    margin: 1px !important;" +
            "    padding: 0;" +
            "}" +
            ".CFHPanel span >:first-child {" +
            "    cursor: pointer;" +
            "    display: flex;" +
            "    padding: 0 5px;" +
            "}" +
            ".CFHPanel span >:not(:first-child), .DEDStatus {" +
            "    display: block;" +
            "}" +
            ".CFHPanel span i {" +
            "    line-height: 22px;" +
            "}" +
            ".CFHPanel .form__saving-button {" +
            "    display: inline-block;" +
            "    margin: 5px;" +
            "    min-width:0;" +
            "}" +
            ".CFHPanel table {" +
            "    display: block;" +
            "    max-height: 200px;" +
            "    max-width: 375px;" +
            "    overflow: auto;" +
            "}" +
            ".CFHPanel table td:first-child {" +
            "   min-width: 25px;" +
            "   text-align: center;" +
            "}" +
            ".CFHPanel table td:not(:first-child) {" +
            "   min-width: 75px;" +
            "   text-align: center;" +
            "}" +
            ".CFHEmojis {" +
            "    display: block !important;" +
            "    font-size: 18px;" +
            "    max-height: 200px;" +
            "    min-height: 30px;" +
            "    overflow: auto;" +
            "    text-align: center;" +
            "}" +
            ".CFHEmojis >* {" +
            "    cursor: pointer;" +
            "    display: inline-block;" +
            "    margin: 2px;" +
            "}" +
            ".CFHPanel ~ textarea {" +
            "    max-height: 475px;" +
            "}" +
            ".CFHPopout {" +
            "    white-space: normal;" +
            "    width: 300px;" +
            "}" +
            ".MPPPostDefault {" +
            "    padding: 0;" +
            "}" +
            ".MPPPostOpen {" +
            "    display: none;" +
            "    max-height: 75%;" +
            "    overflow: auto;" +
            "    padding: 15px;" +
            "    position: absolute;" +
            "    width: 75%;" +
            "}"
        );
    }

    function goToComment(hash, Element) {
        var element, ID, Top, Permalink;
        if (!hash) {
            hash = window.location.hash;
        }
        ID = hash.replace(/#/, "");
        if ((ID || Element) && !window.location.pathname.match(/^\/account/)) {
            if (!Element && ID) {
                Element = document.getElementById(ID);
            }
            if (Element) {
                Top = Element.offsetTop;
                window.scrollTo(0, Top);
                window.scrollBy(0, -esgst.commentsTop);
                Permalink = document.getElementsByClassName(esgst.sg ? "comment__permalink" : "author_permalink")[0];
                if (Permalink) {
                    Permalink.remove();
                }
                element = Element.getElementsByClassName(esgst.sg ? "comment__username" : "author_avatar")[0];
                if (element) {
                    element.insertAdjacentHTML(
                        esgst.sg ? "beforeBegin" : "afterEnd",
                        "<div class=\"comment__permalink\">" +
                        "    <i class=\"fa fa-share author_permalink\"></i>" +
                        "</div>"
                    );
                }
            }
        }
    }

    function syncBundleList(callback) {
        var popup = createPopup();
        popup.Icon.classList.add("fa-refresh");
        popup.Title.textContent = "Syncing...";
        var sync = {};
        createButton(popup.Button, "fa-times-circle", "Cancel", "", "", function () {
            sync.Canceled = true;
            popup.Close.click();
        }, null, true);
        sync.Progress = popup.Progress;
        sync.OverallProgress = popup.OverallProgress;
        popup.popUp().reposition();
        sync.games = JSON.parse(GM_getValue(`games`));
        syncBundles(sync, `/bundle-games/search?page=`, 0, function () {
            queueSave(sync.Progress, function () {
                updateGames(sync.games);
                GM_setValue(`LastSave`, 0);
                popup.Icon.classList.remove("fa-refresh");
                popup.Icon.classList.add("fa-check");
                popup.Title.textContent = "Synced!";
                popup.Button.innerHTML = "";
                sync.Progress.innerHTML = sync.OverallProgress.innerHTML = "";
                popup.Close.click();
                GM_setValue("LastBundleSync", new Date().getTime());
                callback();
            });
        });
    }

    function syncBundles(sync, url, nextPage, callback, context) {
        if (context) {
            var matches = context.getElementsByClassName(`table__column__secondary-link`);
            for (var i = 0, n = matches.length; i < n; ++i) {
                var match = matches[i].textContent.match(/(app|sub)\/(\d+)/);
                if (match) {
                    var type = `${match[1]}s`;
                    var id = match[2];
                    if (!sync.games[type][id]) {
                        sync.games[type][id] = {};
                    }
                    sync.games[type][id].bundled = true;
                }
            }
            var paginationNavigation = context.getElementsByClassName(`pagination__navigation`)[0];
            if (paginationNavigation && !paginationNavigation.lastElementChild.classList.contains(`is-selected`)) {
                window.setTimeout(syncBundles, 0, sync, url, nextPage, callback);
            } else {
                callback();
            }
        } else {
            sync.Progress.innerHTML = `
<i class="fa fa-circle-o-notch fa-spin"></i>
<span>Syncing bundles (page ${nextPage})...</span>
`;
            queueRequest(sync, null, `${url}${nextPage}`, function (response) {
                window.setTimeout(syncBundles, 0, sync, url, ++nextPage, callback, DOM.parse(response.responseText));
            });
        }
    }

    function updateGames(games) {
        var key, subKey;
        var saved = JSON.parse(GM_getValue(`games`));
        for (key in games.apps) {
            if (saved.apps[key]) {
                for (subKey in games.apps[key]) {
                    saved.apps[key][subKey] = games.apps[key][subKey];
                }
            } else {
                saved.apps[key] = games.apps[key];
            }
        }
        for (key in games.subs) {
            if (saved.subs[key]) {
                for (subKey in games.subs[key]) {
                    saved.subs[key][subKey] = games.subs[key][subKey];
                }
            } else {
                saved.subs[key] = games.subs[key];
            }
        }
        GM_setValue(`games`, JSON.stringify(saved));
    }

    function formatDate(EntryDate) {
        var Months, Hours, Minutes, OutputDate, Suffix;
        Months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
        Hours = EntryDate.getHours();
        Minutes = EntryDate.getMinutes();
        Minutes = (Minutes > 9) ? Minutes : ("0" + Minutes);
        OutputDate = Months[EntryDate.getMonth()] + " " + EntryDate.getDate() + ", " + EntryDate.getFullYear() + " ";
        if (Hours >= 12) {
            if (Hours > 12) {
                Hours -= 12;
            }
            Suffix = "pm";
        } else {
            if (Hours === 0) {
                Hours = 12;
            }
            Suffix = "am";
        }
        OutputDate += Hours + ":" + Minutes + " " + Suffix;
        return OutputDate;
    }

    /*
     * Features
     */


    /* [FS] Fixed Sidebar */

    function loadFs() {
        var ad, sibling, top;
        if (esgst.sidebar) {
            ad = esgst.sidebar.getElementsByClassName(`sidebar__mpu`)[0];
            sibling = esgst.sidebar.nextElementSibling;
            document.addEventListener(`scroll`, fixSidebar);
            fixSidebar();
            GM_addStyle(`
                .esgst-fs {
                    position: fixed;
                    top: ${esgst.pageTop}px;
                }
            `);
        }

        function fixSidebar() {
            top = esgst.sidebar.offsetTop - esgst.pageTop;
            if (window.scrollY > top && document.documentElement.offsetHeight > window.innerHeight * 2) {
                document.removeEventListener(`scroll`, fixSidebar);
                esgst.sidebar.classList.add(`esgst-fs`);
                if (ad) {
                    ad.classList.add(`esgst-hidden`);
                }
                sibling.style.marginLeft = `${esgst.sidebar.offsetWidth + 25}px`;
                document.addEventListener(`scroll`, unfixSidebar);
            }
        }

        function unfixSidebar() {
            if (window.scrollY <= top) {
                document.removeEventListener(`scroll`, unfixSidebar);
                esgst.sidebar.classList.remove(`esgst-fs`);
                if (ad) {
                    ad.classList.remove(`esgst-hidden`);
                }
                sibling.style.marginLeft = `25px`;
                document.addEventListener(`scroll`, fixSidebar);
            }
        }
    }

    /* [FMPH] Fixed Main Page Heading */

    function loadFmph() {
        var height, html, width;
        if (esgst.mainPageHeading) {
            html = `
                <div class="esgst-fmph-placeholder esgst-hidden"></div>
                <div class="esgst-fmph-background ${esgst.pageOuterWrapClass} esgst-hidden"></div>
            `;
            esgst.mainPageHeading.insertAdjacentHTML(`afterEnd`, html);
            esgst.mainPageHeadingPlaceholder = esgst.mainPageHeading.nextElementSibling;
            esgst.mainPageHeadingBackground = esgst.mainPageHeadingPlaceholder.nextElementSibling;
            document.addEventListener(`scroll`, fixMainPageHeading);
            fixMainPageHeading();
            height = esgst.mainPageHeading.offsetHeight;
            GM_addStyle(`
                .esgst-fmph {
                    position: fixed;
                    top: ${esgst.pageTop}px;
                    z-index: 998;
                }
                .esgst-fmph-placeholder {
                    height: ${height}px;
                }
                .esgst-fmph-background {
                    height: ${esgst.pageTop + height + 5}px;
                    padding: 0;
                    position: fixed;
                    top: 0;
                    z-index: 997;
                }
            `);
            esgst.commentsTop += height + 30;
        }

        function fixMainPageHeading() {
            if (window.scrollY > (esgst.mainPageHeading.offsetTop - esgst.pageTop)) {
                document.removeEventListener(`scroll`, fixMainPageHeading);
                esgst.mainPageHeading.classList.add(`esgst-fmph`);
                esgst.mainPageHeadingPlaceholder.classList.remove(`esgst-hidden`);
                esgst.mainPageHeadingBackground.classList.remove(`esgst-hidden`);
                width = `${window.getComputedStyle(esgst.mainPageHeading.parentElement).getPropertyValue(`width`)}`;
                esgst.mainPageHeading.style.width = width;
                esgst.mainPageHeadingBackground.style.width = width;
                document.addEventListener(`scroll`, unfixMainPageHeading);
            }
        }

        function unfixMainPageHeading() {
            if (window.scrollY <= (esgst.mainPageHeadingPlaceholder.offsetTop - esgst.pageTop)) {
                document.removeEventListener(`scroll`, unfixMainPageHeading);
                esgst.mainPageHeading.classList.remove(`esgst-fmph`);
                esgst.mainPageHeadingPlaceholder.classList.add(`esgst-hidden`);
                esgst.mainPageHeadingBackground.classList.add(`esgst-hidden`);
                width = ``;
                esgst.mainPageHeading.style.width = width;
                esgst.mainPageHeadingBackground.style.width = width;
                document.addEventListener(`scroll`, fixMainPageHeading);
            }
        }
    }

    /* [HR] Header Refresher */

    function loadHr() {
        var hr;
        hr = {
            lastRefreshName: `${esgst.name}LastHeaderRefresh`,
            refreshedElementsName: `${esgst.name}RefreshedHeaderElements`
        };
        setHrTitle(esgst.headerData.points);
        GM_setValue(hr.refreshedElementsName, JSON.stringify(getHeaderElements()));
        startHeaderRefresher(hr);
        if (!esgst.hr_b) {
            window.addEventListener(`focus`, startHeaderRefresher.bind(null, hr));
            window.addEventListener(`blur`, stopHeaderRefresher.bind(null, hr));
        }
    }

    function refreshHeaderElements(context) {
        var navigation;
        esgst.headerElements = {};
        esgst.headerData = {};
        navigation = context.querySelector(`.nav__right-container, .header_inner_wrap nav`);
        esgst.headerElements.mainButton = navigation.querySelector(`.nav__button--is-dropdown, .nav_btn[href^="/user/"]`);
        if (esgst.sg) {
            esgst.headerElements.pointsContainer = esgst.headerElements.mainButton.firstElementChild;
            esgst.headerData.points = parseInt(esgst.headerElements.pointsContainer.textContent.match(/\d+/)[0]);
            esgst.headerElements.levelContainer = esgst.headerElements.mainButton.lastElementChild;
            esgst.headerData.level = parseInt(esgst.headerElements.levelContainer.textContent.match(/\d+/)[0]);
            esgst.headerElements.createdButton = navigation.getElementsByClassName(`fa-gift`)[0].closest(`.nav__button-container`);
            esgst.headerElements.wonButton = navigation.getElementsByClassName(`fa-trophy`)[0].closest(`.nav__button-container`);
        }
        esgst.headerElements.inboxButton = navigation.getElementsByClassName(`fa-envelope`)[0].closest(`.nav__button-container, .nav_btn_container`);
        esgst.headerElements.messageCountContainer = esgst.headerElements.inboxButton.querySelector(`.nav__notification, .message_count`);
        esgst.headerData.messageCount = esgst.headerElements.messageCountContainer ? esgst.headerElements.messageCountContainer.textContent : ``;
    }

    function getHeaderElements() {
        var elements;
        elements = {
            mainButton: esgst.headerElements.mainButton.outerHTML,
            inboxButton: esgst.headerElements.inboxButton.outerHTML
        };
        if (esgst.sg) {
            elements.createdButton = esgst.headerElements.createdButton.outerHTML;
            elements.wonButton = esgst.headerElements.wonButton.outerHTML;
        }
        return elements;
    }

    function startHeaderRefresher(hr) {
        request(null, false, `/`, function(response) {
            refreshHeaderElements(DOM.parse(response.responseText));
            GM_setValue(hr.refreshedElementsName, JSON.stringify(getHeaderElements()));
            refreshHeader(hr);
            GM_setValue(hr.lastRefreshName, Date.now());
            hr.refresher = window.setTimeout(continueHeaderRefresher, 60000, hr);
        });
    }

    function continueHeaderRefresher(hr) {
        if (Date.now() - GM_getValue(hr.lastRefreshName, 0) > 60000) {
            GM_setValue(hr.lastRefreshName, Date.now());
            request(null, false, `/`, function(response) {
                refreshHeaderElements(DOM.parse(response.responseText));
                GM_setValue(hr.refreshedElementsName, JSON.stringify(getHeaderElements()));
                refreshHeader(hr);
                hr.refresher = window.setTimeout(continueHeaderRefresher, 60000, hr);
            });
        } else {
            refreshHeader(hr);
            window.setTimeout(continueHeaderRefresher, 60000, hr);
        }
    }

    function stopHeaderRefresher(hr) {
        window.clearTimeout(hr.refresher);
    }

    function refreshHeader(hr) {
        var elements, points;
        refreshHeaderElements(document);
        points = esgst.headerData.points;
        elements = JSON.parse(GM_getValue(hr.refreshedElementsName, `{}`));
        esgst.headerElements.mainButton.outerHTML = elements.mainButton;
        if (esgst.sg) {
            esgst.headerElements.createdButton.outerHTML = elements.createdButton;
            esgst.headerElements.wonButton.outerHTML = elements.wonButton;
        }
        esgst.headerElements.inboxButton.outerHTML = elements.inboxButton;
        refreshHeaderElements(document);
        if (esgst.hr) {
            setHrTitle(points);
        }
        if (esgst.lpv) {
            setLpvStyle();
        }
    }

    function setHrTitle(points) {
        var title;
        drawHrIcons();
        if (esgst.sg) {
            if (esgst.headerData.points !== points) {
                updateElgbButtons(esgst.headerData.points);
            }
            if (esgst.hr_p) {
                title = `(${esgst.headerData.points}P) ${esgst.originalTitle}`;
                if (document.title !== title) {
                    document.title = title;
                }
            }
        }
    }

    function drawHrIcons() {
        var canvas, context, delivered, i, image, imageData, index, length, messageCount, pixelArray, x, r, g, b, a;
        if (esgst.sg) {
            delivered = esgst.headerElements.wonButton.getElementsByClassName(`fade_infinite`)[0];
        } else {
            delivered = null;
        }
        messageCount = esgst.headerData.messageCount;
        if ((delivered && esgst.hr_g) || (messageCount > 0 && esgst.hr_m)) {
            canvas = document.createElement(`canvas`);
            image = document.createElement(`img`);
            canvas.width = 16;
            canvas.height = 16;
            context = canvas.getContext(`2d`);
            image.onload = function () {
                context.drawImage(image, 0, 0);
                if (delivered && esgst.hr_g) {
                    imageData = context.getImageData(0, 0, canvas.width, canvas.height);
                    pixelArray = imageData.data;
                    length = pixelArray.length / 4;
                    for (i = 0; i < length; i++) {
                        index = 4 * i;
                        r = pixelArray[index];
                        g = pixelArray[++index];
                        b = pixelArray[++index];
                        a = pixelArray[++index];
                        if (r === 0 && g === 0 && b === 0) {
                            pixelArray[--index] = 42;
                            pixelArray[--index] = 32;
                            pixelArray[--index] = 233;
                        }
                    }
                    context.putImageData(imageData, 0, 0);
                }
                if (messageCount > 0 && esgst.hr_m) {
                    context.fillStyle = `#e9202a`;
                    context.fillRect(8, 6, 8, 10);
                    context.fillStyle = `#fff`;
                    context.font = `bold 10px Arial`;
                    context.textAlign = `left`;
                    if (messageCount > 9) {
                        messageCount = `+`;
                    }
                    context.fillText(messageCount, 9, 14);
                }
                esgst.favicon.href = canvas.toDataURL(`image/png`);
            };
            image.src = GM_getResourceURL(`${esgst.name}Icon`);
        } else {
            esgst.favicon.href = GM_getResourceURL(`${esgst.name}Icon`);
        }
    }

    /* [LPV] Level Progress Visualizer */

    function loadLpv() {
        if (!esgst.hr) {
            setLpvStyle();
        }
    }

    function setLpvStyle() {
        var progress, style;
        progress = `${esgst.headerElements.levelContainer.getAttribute(`title`).match(/\.(\d+)/)[1]}%`;
        style = window.getComputedStyle(esgst.headerElements.mainButton.parentElement).backgroundImage;
        esgst.headerElements.mainButton.parentElement.classList.add(`esgst-lpv-container`);
        esgst.headerElements.mainButton.parentElement.setAttribute(`style`, `background-image: linear-gradient(to right, #609f60 ${progress}, transparent ${progress}), ${style};`);
    }

    /* [LPL] Last Page Link */

    function loadLpl() {
        if (esgst.paginationNavigation) {
            if (esgst.discussionPath) {
                addLplDiscussionLink();
            } else if (esgst.userPath) {
                addLplUserLink();
            } else if (esgst.groupPath) {
                addLplGroupLink();
            }
        }
    }

    function addLplDiscussionLink() {
        var lastLink, url;
        if (esgst.pagination) {
            esgst.lastPage = Math.ceil(parseInt(esgst.pagination.firstElementChild.lastElementChild.textContent.replace(/,/g, ``)) / 25);
        } else {
            esgst.lastPage = 999999999;
        }
        url = `${window.location.pathname.replace(`/search`, ``)}/search?page=${esgst.lastPage}`;
        esgst.lastPageLink = `
            <a data-page-number="${esgst.lastPage}" href="${url}">
                <span>Last</span>
                <i class="fa fa-angle-double-right"></i>
            </a>
        `;
        lastLink = esgst.paginationNavigation.lastElementChild;
        if (!lastLink.classList.contains(`is-selected`) && !lastLink.textContent.match(/Last/)) {
            esgst.paginationNavigation.insertAdjacentHTML(`beforeEnd`, esgst.lastPageLink);
        }
    }

    function addLplUserLink() {
        var lastLink, lastPage, url, username;
        username = window.location.pathname.match(/^\/user\/(.+?)(\/.*?)?$/)[1];
        if (window.location.pathname.match(/\/giveaways\/won/)) {
            esgst.lastPage = Math.ceil(parseInt(document.querySelector(`.featured__table__row__right a[href*="/giveaways/won"]`).textContent.replace(/,/g, ``)) / 25);
            url = `/user/${username}/giveaways/won/search?page=${esgst.lastPage}`;
        } else {
            esgst.lastPage = Math.ceil(parseInt(document.getElementsByClassName(`sidebar__navigation__item__count`)[0].textContent.replace(/,/g, ``)) / 25);
            url = `/user/${username}/search?page=${esgst.lastPage}`;
        }
        esgst.lastPageLink = `
            <a data-page-number="${esgst.lastPage}" href="${url}">
                <span>Last</span>
                <i class="fa fa-angle-double-right"></i>
            </a>
        `;
        lastLink = esgst.paginationNavigation.lastElementChild;
        if (esgst.currentPage !== esgst.lastPage && !lastLink.classList.contains(`is-selected`) && !lastLink.textContent.match(/Last/)) {
            esgst.paginationNavigation.insertAdjacentHTML(`beforeEnd`, esgst.lastPageLink);
        }
    }

    function addLplGroupLink() {
        var group, lastLink, lastPage, url;
        group = window.location.pathname.match(/^\/group\/(.+?\/.+?)(\/.*?)?$/)[1];
        if (window.location.pathname.match(/\/users/)) {
            esgst.lastPage = Math.ceil(parseInt(document.getElementsByClassName(`sidebar__navigation__item__count`)[1].textContent.replace(/,/g, ``)) / 25);
            url = `/group/${group}/users/search?page=${esgst.lastPage}`;
        } else if (esgst.groupWishlistPath) {
            esgst.lastPage = 999999999;
            url = `/group/${group}/wishlist/search?page=${esgst.lastPage}`;
        } else {
            esgst.lastPage = Math.ceil(parseInt(document.getElementsByClassName(`sidebar__navigation__item__count`)[0].textContent.replace(/,/g, ``)) / 25);
            url = `/group/${group}/search?page=${esgst.lastPage}`;
        }
        esgst.lastPageLink = `
            <a data-page-number="${esgst.lastPage}" href="${url}">
                <span>Last</span>
                <i class="fa fa-angle-double-right"></i>
            </a>
        `;
        lastLink = esgst.paginationNavigation.lastElementChild;
        if (esgst.currentPage !== esgst.lastPage && !lastLink.classList.contains(`is-selected`) && !lastLink.textContent.match(/Last/)) {
            esgst.paginationNavigation.insertAdjacentHTML(`beforeEnd`, esgst.lastPageLink);
        }
    }

    /* [VAI] Visible Attached Images */

    function loadVai() {
        esgst.endlessFeatures.push(getVaiImages);
        getVaiImages(document);
    }

    function getVaiImages(context) {
        var images, i, n, image, url;
        images = context.querySelectorAll(`.comment__toggle-attached ~ a img, .view_attached ~ a img`);
        for (i = 0, n = images.length; i < n; ++i) {
            image = images[i];
            url = image.getAttribute(`src`);
            if (url && esgst.vai_gifv) {
                url = url.replace(/\.gifv/, `.gif`);
                image.setAttribute(`src`, url);
            }
            image.classList.remove(`is_hidden`, `is-hidden`);
        }
    }

    /* [EV] Embedded Videos */

    function loadEv() {
        esgst.endlessFeatures.push(getEvVideos);
        getEvVideos(document);
    }

    function getEvVideos(context) {
        var types, i, numTypes, type, videos, j, numVideos, video, previous, next, embedUrl, url, text, title;
        types = [`youtube.com`, `youtu.be`, `vimeo.com`];
        for (i = 0, numTypes = types.length; i < numTypes; ++i) {
            type = types[i];
            videos = context.querySelectorAll(`a[href*="${type}"]`);
            for (j = 0, numVideos = videos.length; j < numVideos; ++j) {
                video = videos[j];
                previous = video.previousSibling;
                next = video.nextSibling;
                if ((!previous || !previous.textContent.trim()) && (!next || !next.textContent.trim())) {
                    // video is the only content in the line
                    url = video.getAttribute(`href`);
                    embedUrl = getVideoEmbedUrl(i, url);
                    if (embedUrl) {
                        text = video.textContent;
                        if (url !== text) {
                            title = `<div>${text}</div>`;
                        } else {
                            title = ``;
                        }
                        video.outerHTML = `
                            <div>
                                ${title}
                                <iframe width="640" height="360" src="${embedUrl}" frameborder="0" allowfullscreen></iframe>
                            </div>
                        `;
                    }
                }
            }
        }
    }

    function getVideoEmbedUrl(i, url) {
        var regExps, regExp, match, baseUrls, baseUrl, code;
        regExps = [
            /youtube.com\/watch\?v=(.+?)(\/.*)?(&.*)?$/,
            /youtu.be\/(.+?)(\/.*)?$/,
            /vimeo.com\/(.+?)(\/.*)?$/
        ];
        regExp = regExps[i];
        match = url.match(regExp);
        if (match) {
            baseUrls = [
                `https://www.youtube.com/embed/`,
                `https://www.youtube.com/embed/`,
                `https://player.vimeo.com/video/`
            ];
            baseUrl = baseUrls[i];
            code = match[1];
            return `${baseUrl}${code}`;
        } else {
            return null;
        }
    }

    /* [AT] Accurate Timestamps */

    function getTimestamps(context) {
        var timestamps, i, n, timestamp, text, edited, seconds, accurateTimestamp;
        timestamps = context.querySelectorAll(`[data-timestamp]`);
        for (i = 0, n = timestamps.length; i < n; ++i) {
            timestamp = timestamps[i];
            if (((esgst.activeDiscussions && ((esgst.activeDiscussions.contains(timestamp) && esgst.adots_index === 0) || !esgst.activeDiscussions.contains(timestamp))) || !esgst.activeDiscussions) && !timestamp.classList.contains(`esgst-at`)) {
                text = timestamp.textContent;
                edited = text.match(/\*/);
                seconds = parseInt(timestamp.getAttribute(`data-timestamp`));
                accurateTimestamp = getTimestamp(seconds, esgst.at_24, esgst.at_s);
                if (edited) {
                    text = ` (Edited ${accurateTimestamp})`;
                } else {
                    text = `${accurateTimestamp} - ${text}`;
                }
                timestamp.classList.add(`esgst-at`);
                timestamp.textContent = text;
            }
        }
    }

    /* [HBS] Hidden Blacklist Stats */

    function loadHbs() {
        var Chart, Match, Points, N, Data, I, CountDate, Year, Month, Day, Count, Context;
        if (window.location.pathname.match(/^\/stats\/personal\/community/)) {
            Chart = document.getElementsByClassName("chart")[4];
            Match = Chart.previousElementSibling.textContent.match(/"Whitelists", data: \[(.+)\]},/)[1];
            Points = Match.split(/\],\[/);
            N = Points.length - 1;
            Points[0] = Points[0].replace(/^\[/, "");
            Points[N] = Points[N].replace(/\/]$/, "");
            Data = [];
            for (I = 0; I <= N; ++I) {
                Match = Points[I].match(/(.+), (.+)/);
                CountDate = Match[1].match(/\((.+?),(.+?),(.+?)\)/);
                Year = parseInt(CountDate[1]);
                Month = parseInt(CountDate[2]);
                Day = parseInt(CountDate[3]);
                Count = parseInt(Match[2]);
                Data.push([Date.UTC(Year, Month, Day), Count]);
            }
            Context = Chart.firstElementChild;
            Context.lastElementChild.remove();
            Context.lastElementChild.remove();
            Context = Context.nextElementSibling;
            Context.textContent = Context.textContent.replace(/and blacklists\s/, "");
            Context = Context.nextElementSibling;
            $(function () {
                chart_options.graph = {
                    colors: ["#6187d4", "#ec656c"],
                    tooltip: {
                        headerFormat: "<p class=\"chart__tooltip-header\">{point.key}</p>",
                        pointFormat: "<p class=\"chart__tooltip-point\" style=\"color: {point.color};\">{point.y:,.0f} {series.name}</p>"
                    },
                    series: [{
                        name: "Whitelists",
                        data: Data
                    }]
                };
                $(Context).highcharts(Highcharts.merge(chart_options.default, chart_options.areaspline, chart_options.datetime, chart_options.graph));
            });
        }
    }

    /* [GDTTT] Giveaways/Discussions/Tickets/Trades Tracker */

    function loadGdttt() {
        if (((esgst.giveawaysPath || esgst.discussionsPath) && !esgst.ct) || (!esgst.giveawaysPath && !esgst.discussionsPath && esgst.discussionsTicketsTradesPath)) {
            esgst.endlessFeatures.push(addCtDiscussionPanels);
            addCtDiscussionPanels(document);
        }
        if (esgst.commentsPath && !esgst.ct) {
            createLock(`commentLock`, 300, function (deleteLock) {
                var savedComments = JSON.parse(GM_getValue(`comments`));
                var match = window.location.pathname.match(/(giveaway|discussion|ticket|trade)\/(.+?)\//);
                var type = `${match[1]}s`;
                var code = match[2];
                if (!savedComments[type][code]) {
                    savedComments[type][code] = {
                        comments: {}
                    };
                }
                savedComments[type][code].visited = true;
                GM_setValue(`comments`, JSON.stringify(savedComments));
                deleteLock();
            });
        }
        esgst.endlessFeatures.push(checkGdtttVisited);
        checkGdtttVisited(document);
    }

    function checkGdtttVisited(context) {
        var code, comments, container, heading, i, match, matches, n, source, type, url;
        comments = JSON.parse(GM_getValue(`comments`));
        matches = context.querySelectorAll(`.table__column__heading, .giveaway__heading__name, .column_flex h3 a`);
        for (i = 0, n = matches.length; i < n; ++i) {
            match = matches[i];
            url = match.getAttribute(`href`);
            if (url) {
                source = url.match(/(giveaway|discussion|ticket|trade)\/(.+?)(\/.*)?$/);
                if (source) {
                    type = `${source[1]}s`;
                    code = source[2];
                    container = match.closest(`.table__row-outer-wrap, .giveaway__row-outer-wrap, .row_outer_wrap`);
                    if (comments[type][code] && comments[type][code].visited && container) {
                        if ((type === `giveaways` && esgst.gdttt_g) || type !== `giveaways`) {
                            container.classList.add(`esgst-ct-visited`);
                            container.style.opacity = `0.5`;
                            setHoverOpacity(container, `1`, `0.5`);
                        }
                    }
                }
            }
        }
    }

    /* [QGB] Quick Giveaway Browsing */

    function loadQgb() {
            document.getElementsByClassName(`nav__absolute-dropdown`)[0].insertAdjacentHTML(`beforeEnd`, `
                <a class="nav__row" href="/giveaways/search?type=wishlist">
                    <div class="nav__row__summary">
                        <p class="nav__row__summary__name">Browse Wishlist Giveaways</p>
                    </div>
                </a>
                <a class="nav__row" href="/giveaways/search?type=recommended">
                    <div class="nav__row__summary">
                        <p class="nav__row__summary__name">Browse Recommended Giveaways</p>
                    </div>
                </a>
                <a class="nav__row" href="/giveaways/search?type=group">
                    <div class="nav__row__summary">
                        <p class="nav__row__summary__name">Browse Group Giveaways</p>
                    </div>
                </a>
                <a class="nav__row" href="/giveaways/search?type=new">
                    <div class="nav__row__summary">
                        <p class="nav__row__summary__name">Browse New Giveaways</p>
                    </div>
                </a>
            `);
    }

    /* [AGS] Advanced Giveaway Search */

    function addAgsPanel() {
        var context, details, element, filter, filterDetails, filters, i, icon, input, match, n, panel, popout, timeout, value;
        context = document.getElementsByClassName(`sidebar__search-container`)[0];
        context.firstElementChild.remove();
        input = insertHtml(context, `afterBegin`, `
            <input class="sidebar__search-input" placeholder="Search..." type="text">
        `);
        icon = input.nextElementSibling;
        icon.classList.add(`esgst-clickable`);
        icon.title = `Use advanced search.`;
        match = window.location.search.match(/q=(.*?)(&.*?)?$/);
        if (match) {
            input.value = decodeURIComponent(match[1]);
        }
        if ((esgst.adots && esgst.adots_index === 0) || !esgst.adots) {
            panel = insertHtml(context, `afterEnd`, `
                <div class="esgst-ags-panel"></div>
            `);
        } else {
            popout = createPopout_v6(`esgst-ags-panel global__image-outer-wrap page__outer-wrap`);
            panel = popout.popout;
            context.addEventListener(`mouseenter`, function () {
                timeout = window.setTimeout(function () {
                    popout.open(context);
                }, 1000);
            });
            context.addEventListener(`mouseleave`, function (event) {
                if (timeout) {
                    window.clearTimeout(timeout);
                    timeout = null;
                }
                if (!panel.contains(event.relatedTarget)) {
                    popout.close();
                }
            });
        }
        filterDetails = [
            {
                maxKey: `ags_maxLevel`,
                minKey: `ags_minLevel`,
                maxParameter: `level_max`,
                minParameter: `level_min`,
                name: `Level`,
                type: `select`
            },
            {
                maxKey: `ags_maxEntries`,
                minKey: `ags_minEntries`,
                maxParameter: `entry_max`,
                minParameter: `entry_min`,
                name: `Entries`,
                type: `input`
            },
            {
                maxKey: `ags_maxCopies`,
                minKey: `ags_minCopies`,
                maxParameter: `copy_max`,
                minParameter: `copy_min`,
                name: `Copies`,
                type: `input`
            },
            {
                maxKey: `ags_maxPoints`,
                minKey: `ags_minPoints`,
                maxParameter: `point_max`,
                minParameter: `point_min`,
                name: `Points`,
                type: `input`
            },
            {
                key: `ags_regionRestricted`,
                name: `Region Restricted`,
                parameter: `region_restricted`,
                type: `checkbox`
            },
            {
                key: `ags_dlc`,
                name: `DLC`,
                parameter: `dlc`,
                type: `checkbox`
            }
        ];
        filters = [];
        for (i = 0, n = filterDetails.length; i < n; ++i) {
            createAgsFilter(filterDetails[i]);
        }
        input.addEventListener(`keydown`, function (event) {
            if (event.key === `Enter`) {
                event.preventDefault();
                searchAgsQuery();
            }
        });
        icon.addEventListener(`click`, function () {
            searchAgsQuery();
        });

        function createAgsFilter(details) {
            var element, filter, html, i, maxFilter, minFilter;
            if (details.type === `checkbox`) {
                element = insertHtml(panel, `beforeEnd`, `
                     <div class="esgst-ags-checkbox-filter">
                         <span>${details.name}</span>
                     </div>
                `);
                filter = createCheckbox_v6(
                    element,
                    esgst[details.key]
                ).input;
                element.addEventListener(`click`, function () {
                    setValue(details.key, filter.checked);
                    esgst[details.key] = filter.checked;
                });
                filters.push({
                    filter: filter,
                    key: `checked`,
                    parameter: details.parameter
                });
            } else {
                if (details.type === `select`) {
                    html = `
                        <select>
                            <option></option>
                    `;
                    for (i = 0; i <= 10; ++i) {
                        html += `
                            <option>${i}</option>
                        `;
                    }
                    html += `
                        </select>
                    `;
                } else {
                    html = `
                        <input type="text">
                    `;
                }
                element = insertHtml(panel, `beforeEnd`, `
                    <div>
                        <div class="esgst-ags-filter">
                            <div>Min ${details.name}</div>
                            ${html}
                        </div>
                        <div class="esgst-ags-filter">
                            <div>Max ${details.name}</div>
                            ${html}
                        </div>
                    </div>
                `);
                maxFilter = element.lastElementChild.lastElementChild;
                maxFilter.value = esgst[details.maxKey];
                maxFilter.addEventListener(`change`, function () {
                    setValue(details.maxKey, maxFilter.value);
                    esgst[details.maxKey] = maxFilter.value;
                });
                minFilter = element.firstElementChild.lastElementChild;
                minFilter.value = esgst[details.minKey];
                minFilter.addEventListener(`change`, function () {
                    setValue(details.minKey, minFilter.value);
                    esgst[details.minKey] = minFilter.value;
                });
                filters.push({
                    filter: minFilter,
                    key: `value`,
                    parameter: details.minParameter
                });
                filters.push({
                    filter: maxFilter,
                    key: `value`,
                    parameter: details.maxParameter
                });
            }
        }

        function searchAgsQuery() {
            var i, match, url;
            url = `https://www.steamgifts.com/giveaways/search?q=${input.value}`;
            match = window.location.search.match(/(type=.*?)(&.*?)?$/);
            if (match) {
                url += `&${match[1]}`;
            }
            for (i = 0, n = filters.length; i < n; ++i) {
                filter = filters[i];
                value = filter.filter[filter.key];
                if (value) {
                    url += `&${filter.parameter}=${value}`;
                }
            }
            window.location.href = url;
        }
    }

    /* [GV] Grid View */

    function loadGv() {
        var button, display, element, elements, i, n, popout, spacing, slider;
            esgst.giveawayFeatures.push(setGvContainers);
            button = insertHtml(esgst.mainPageHeading, `beforeEnd`, `
                <div class="esgst-heading-button" title="Set Grid View spacing.">
                    <i class="fa fa-th-large"></i>
                </div>
            `);
            popout = createPopout_v6(`esgst-gv-spacing global__image-outer-wrap page__outer-wrap`, true);
            spacing = esgst.gv_spacing;
            element = insertHtml(popout.popout, `beforeEnd`, `
                <div>
                    <div></div>
                    <div>${spacing}px</div>
                </div>
            `);
            slider = element.firstElementChild;
            display = slider.nextElementSibling;
            $(slider).slider({
                slide: function (event, ui) {
                    spacing = ui.value;
                    elements = document.getElementsByClassName(`esgst-gv-container`);
                    for (i = 0, n = elements.length; i < n; ++i) {
                        elements[i].style.margin = `${spacing}px`;
                    }
                    popout.reposition();
                    display.textContent = `${spacing}px`;
                    setValue(`gv_spacing`, spacing);
                    esgst.gv_spacing = spacing;
                },
                max: 10,
                value: spacing
            });
            button.addEventListener(`click`, function () {
                if (popout.popout.classList.contains(`esgst-hidden`)) {
                    popout.open(button);
                } else {
                    popout.close();
                }
            });
            GM_addStyle(`
                .esgst-gv-spacing {
                    font-weight: bold;
                    padding: 10px;
                    text-align: center;
                    width: 100px;
                }

                .esgst-gv-view {
                    font-size: 0;
                    padding: 5px 0;
                    text-align: center;
                }

                .esgst-gv-view.pinned-giveaways__inner-wrap--minimized .giveaway__row-outer-wrap:nth-child(-n + 10) {
                    display: inline-block;" +
                }

                .esgst-gv-container {
                    border: 0 !important;
                    box-shadow: none !important;
                    display: inline-block;
                    font-size: 12px;
                    padding: 0;
                    position: relative;
                    vertical-align: top;
                }

                .esgst-gv-box {
                    display: block;
                }

                .esgst-gv-box >*:not(.giveaway__summary) {
                    margin: 0 !important;
                }

                .esgst-gv-box.is-faded:hover {
                    opacity: 1;
                }

                .esgst-gv-icons {
                    bottom: 0;
                    position: absolute;
                    right: 0;
                }

                .esgst-gv-icons >:first-child {
                    background-color: #fff;
                    font-weight: bold;
                }

                .esgst-gv-icons >:first-child i {
                    font-size: 12px;
                    vertical-align: baseline;
                }

                .esgst-gv-icons >* {
                    line-height: normal;
                    margin: 0 !important;
                    padding: 2px;
                }

                .esgst-gv-icons .giveaway__column--contributor-level {
                    padding: 2px 5px;
                }

                .esgst-gv-popout {
                    font-size: 11px;
                    max-width: 174px;
                    position: absolute;
                    width: 174px;
                    z-index: 1;
                }

                .esgst-gv-popout .giveaway__heading {
                    display: block;
                    height: auto;
                }

                .esgst-gv-popout .giveaway__heading__name {
                    display: inline-block;
                    font-size: 12px;
                    max-width: 150px;
                    overflow: hidden;
                    text-overflow: ellipsis;
                    vertical-align: middle;
                }

                .esgst-gv-popout .giveaway__heading__thin {
                    font-size: 11px;
                }

                .esgst-gv-popout .esgst-gc-panel {
                    font-size: 11px;
                    text-align: center;
                }

                .esgst-gv-popout .esgst-gc-panel i, .esgst-gv-popout .giveaway__links i, .esgst-gv-popout .esgst-gwc i, .esgst-gv-popout .esgst-gwr i, .esgst-gv-popout .esgst-ggl-panel, .esgst-gv-popout .esgst-ggl-panel i {
                    font-size: 11px;
                }

                .esgst-gv-popout .esgst-gc.genres {
                    margin: 0;
                }

                .esgst-gv-popout .giveaway__columns:not(.esgst-giveaway-panel):not(.esgst-gv-icons) {
                    display: block;
                    float: left;
                    width: calc(100% - 37px);
                }

                .esgst-gv-popout .giveaway__columns:not(.esgst-giveaway-panel):not(.esgst-gv-icons) >* {
                    margin: 0;
                    text-align: left;
                }

                .esgst-gv-popout .esgst-giveaway-panel {
                    display: block;
                    font-size: 11px;
                }

                .esgst-gv-popout .esgst-giveaway-panel >* {
                    display: inline-block;
                    margin: 0;
                    width: 67px;
                }

                .esgst-gv-popout .esgst-button-set {
                    width: 100%;
                }

                .esgst-gv-popout .esgst-button-set >* {
                    padding: 0;
                    width: 100%;
                }

                .esgst-gv-creator {
                    margin: 5px;
                    width: 132px;
                }

                .esgst-gv-popout .giveaway__links {
                    display: block;
                    height: auto;
                    margin: 5px;
                    text-align: center;
                    width: 132px;
                }

                .esgst-gv-popout .esgst-gt-tags, .esgst-gv-popout .PUTTags {
                    display: none;
                }

                .esgst-gv-popout .giveaway_image_avatar {
                    margin: 5px;
                    position: absolute;
                    right: 10px;
                }

                .esgst-gv-popout .esgst-giveaway-links, .esgst-gv-popout .esgst-giveaway-panel {
                    float: none;
                }
            `);
        
    }

    function setGvContainers(giveaways, main) {
        var elements, i, n, spacing;
        if (main) {
            spacing = esgst.gv_spacing;
            for (i = 0, n = giveaways.length; i < n; ++i) {
                setGvContainer(giveaways[i], spacing);
            }
        }
    }

    function getRemainingTime(time) {
        var d, dif, h, m, s, w;
        dif = time - Date.now();
        if (dif < 0) {
            dif *= -1;
        }
        w = Math.floor(dif / 604800000);
        if (w > 0) {
            return `${w}w`;
        } else {
            d = Math.floor(dif / 86400000);
            if (d > 0) {
                return `${d}d`;
            } else {
                h = Math.floor(dif / 3600000);
                if (h > 0) {
                    return `${h}h`;
                } else {
                    m = Math.floor(dif / 60000);
                    if (m > 0) {
                        return `${m}m`;
                    } else {
                        s = Math.floor(dif / 1000);
                        return `${s}s`;
                    }
                }
            }
        }
    }

    function setGvContainer(giveaway, spacing) {
        var creator, icons;
        giveaway.outerWrap.parentElement.classList.add(`esgst-gv-view`);
        giveaway.outerWrap.classList.add(`esgst-gv-container`);
        giveaway.outerWrap.style.margin = `${spacing}px`;
        giveaway.innerWrap.classList.add(`esgst-gv-box`);
        icons = insertHtml(giveaway.innerWrap, `afterBegin`, `
            <div class="esgst-gv-icons giveaway__columns">
                <div>
                    <span title="Ends ${giveaway.endTimeColumn.lastElementChild.textContent}">${getRemainingTime(giveaway.endTime)}</span>
                    <i class="fa fa-clock-o"></i>
                    <span title="Created ${giveaway.startTimeColumn.lastElementChild.previousElementSibling.textContent}">${getRemainingTime(giveaway.startTime)}</span>
                </div>
            </div>
        `);
        if (giveaway.regionRestricted) {
            icons.appendChild(giveaway.regionRestricted);
        }
        if (giveaway.group) {
            icons.appendChild(giveaway.group);
        }
        if (giveaway.whitelist) {
            icons.appendChild(giveaway.whitelist);
        }
        if (giveaway.levelColumn) {
            giveaway.levelColumn.textContent = giveaway.levelColumn.textContent.replace(/Level\s/, ``);
            icons.appendChild(giveaway.levelColumn);
        }
        giveaway.innerWrap.insertBefore(giveaway.image, giveaway.summary);
        giveaway.summary.classList.add(`esgst-gv-popout`, `esgst-hidden`, `global__image-outer-wrap`);
        giveaway.summary.insertBefore(giveaway.avatar, giveaway.links);
        giveaway.avatar.insertAdjacentHTML(`afterEnd`, `
            <div style="clear: both;"></div>
        `);
        giveaway.headingName.insertAdjacentHTML(`afterEnd`, `<br>`);
        giveaway.pointsContainer.insertAdjacentHTML(`afterEnd`, `<br>`);
        giveaway.endTimeColumn.classList.add(`esgst-hidden`);
        giveaway.startTimeColumn.classList.add(`esgst-hidden`);
        giveaway.entriesLink.lastElementChild.textContent = giveaway.entriesLink.textContent.replace(/[^\d,]+/g, ``);
        giveaway.commentsLink.lastElementChild.textContent = giveaway.commentsLink.textContent.replace(/[^\d,]+/g, ``);
        creator = insertHtml(giveaway.links, `beforeBegin`, `
            <div class="esgst-gv-creator">
                <span>by</span>
            </div>
        `);
        creator.appendChild(giveaway.creatorContainer);
        giveaway.innerWrap.addEventListener(`mouseenter`, function () {
            giveaway.summary.classList.remove(`esgst-hidden`);
            giveaway.summary.style = ``;
            repositionPopout(giveaway.summary, giveaway.outerWrap);
        });
        giveaway.innerWrap.addEventListener(`mouseleave`, function () {
            giveaway.summary.classList.add(`esgst-hidden`);
        });
    }

    /* [GF] Giveaway Filters */

    function addGfContainer(context) {
        var gf, basicFilter, basicFilters, box, button, categoryFilter, categoryFilters, checkbox, collapse, container, exceptionFilter, exceptionFilters, expand, filter, filters, genres, i, id, input, key, maxKey, minKey, maxSaveKey, maxSavedValue, minSaveKey, minSavedValue, maxValue, minValue, multiple, n, name, oldKey, oldSaveKey, saveKey, step, type, typeFilter, typeFilters, value, values;
        if (context) {
            type = `Popup`;
        } else {
            type = window.location.search.match(/type=(wishlist|recommended|group|new)/);
            if (type) {
                type = type[1].replace(/^(.)/, function (m, p1) {
                    return p1.toUpperCase();
                });
            } else if (esgst.groupPath) {
                type = `Groups`;
            } else {
                type = ``;
            }
        }
        gf = {
            type: type,
            advancedSearch: window.location.search.match(/q=/),
            basicFilters: [
                {
                    name: `Level`,
                    minValue: 0,
                    maxValue: 10
                },
                {
                    infinite: true,
                    name: `Entries`,
                    minValue: 0,
                    maxValue: 999999999,
                },
                {
                    infinite: true,
                    name: `Copies`,
                    minValue: 1,
                    maxValue: 999999999,
                },
                {
                    name: `Points`,
                    minValue: 0,
                    maxValue: 100
                },
                {
                    name: `Chance`,
                    minValue: 0,
                    maxValue: 100,
                    step: 0.01
                },
                {
                    name: `Rating`,
                    minValue: 0,
                    maxValue: 100
                }
            ],
            typeFilters: [
                {
                    name: `Pinned`,
                    key: `pinned`
                },
                {
                    name: `Group`,
                    key: `group`
                },
                {
                    name: `Whitelist`,
                    key: `whitelist`
                },
                {
                    name: `Region Restricted`,
                    key: `regionRestricted`
                },
                {
                    name: `Created`,
                    key: `created`
                },
                {
                    name: `Entered`,
                    key: `entered`
                }
            ],
            categoryFilters: [
                {
                    id: `gc_h`,
                    name: `Hidden`,
                    key: `hidden`
                },
                {
                    id: `gc_b`,
                    name: esgst.gc_b_r ? `Not Bundled` : `Bundled`,
                    key: `bundled`
                },
                {
                    id: `gc_o`,
                    name: `Owned`,
                    key: `owned`
                },
                {
                    id: `gc_w`,
                    name: `Wishlisted`,
                    key: `wishlisted`
                },
                {
                    id: `gc_i`,
                    name: `Ignored`,
                    key: `ignored`
                },
                {
                    id: `gc_rm`,
                    name: `Removed`,
                    key: `removed`
                },
                {
                    id: `gc_tc`,
                    name: `Trading Cards`,
                    key: `tradingCards`
                },
                {
                    id: `gc_a`,
                    name: `Achievements`,
                    key: `achievements`
                },
                {
                    id: `gc_mp`,
                    name: `Multiplayer`,
                    key: `multiplayer`
                },
                {
                    id: `gc_sc`,
                    name: `Steam Cloud`,
                    key: `steamCloud`
                },
                {
                    id: `gc_l`,
                    name: `Linux`,
                    key: `linux`
                },
                {
                    id: `gc_m`,
                    name: `Mac`,
                    key: `mac`
                },
                {
                    id: `gc_dlc`,
                    name: `DLC`,
                    key: `dlc`
                },
                {
                    id: `gc_p`,
                    name: `Package`,
                    key: `package`
                },
                {
                    id: `gc_g`,
                    name: `Genres`,
                    key: `genres`
                }
            ],
            exceptionFilters: [
                {
                    name: `Pinned`,
                    key: `exceptionPinned`
                },
                {
                    name: `Wishlist`,
                    key: `exceptionWishlist`
                },
                {
                    name: `Group`,
                    key: `exceptionGroup`
                },
                {
                    name: `Whitelist`,
                    key: `exceptionWhitelist`
                },
                {
                    name: `Region Restricted`,
                    key: `exceptionRegionRestricted`
                },
                {
                    name: `Copies above`,
                    key: `exceptionMultiple`
                }
            ]
        };
        if (gf.type === `Popup`) {
            esgst.gfPopup = gf;
        } else {
            esgst.gf = gf;
        }
        container = insertHtml(context || esgst.pinnedGiveaways || esgst.mainPageHeading, `beforeBegin`, `
            <div class="pinned-giveaways__outer-wrap esgst-gf-container">
                <div class="pinned-giveaways__inner-wrap esgst-gf-box">
                    <div class="esgst-gf-filters esgst-hidden">
                        <div class="esgst-gf-basic-filters esgst-hidden">
                            <div>
                                <strong>Basic Filters:</strong>
                                <i class="fa fa-question-circle" title="The Entries/Copies filters are infinite. To increase/decrease the max value, simply enter the new max value in the input field and it will be changed."></i>
                            </div>
                        </div>
                        <div class="esgst-gf-type-filters">
                            <div>
                                <strong>Type Filters:</strong>
                            </div>
                        </div>
                        <div class="esgst-hidden esgst-gf-category-filters">
                            <div>
                                <strong>Category Filters:</strong>
                            </div>
                        </div>
                        <div class="esgst-gf-exception-filters">
                            <div>
                                <strong>Exception Filters:</strong>
                                <i class="fa fa-question-circle" title="If enabled, the corresponding giveaways will not be filtered by the basic filters, but they **will** be filtered by the type/category filters"></i>
                            </div>
                        </div>
                        <div>
                            <div>
                                <strong>Legend:</strong>
                                <i class="fa fa-question-circle" title="This legend applies to the type/category filters, except where noted"></i>
                            </div>
                            <div class="esgst-gf-legend"><i class="fa fa-circle-o"></i> - Hide all.</div>
                            <div class="esgst-gf-legend"><i class="fa fa-circle"></i> - Show only.</div>
                            <div class="esgst-gf-legend"><i class="fa fa-check-circle"></i> - Show all.</div>
                        </div>
                    </div>
                </div>
                <div class="esgst-gf-button">
                    <span>Expand</span>
                    <span class="esgst-hidden">Collapse</span> giveaway filters (<span>0</span> giveaways currently being filtered).
                </div>
            </div>
        `);
        box = container.firstElementChild;
        filters = box.firstElementChild;
        basicFilters = filters.firstElementChild;
        typeFilters = basicFilters.nextElementSibling;
        categoryFilters = typeFilters.nextElementSibling;
        exceptionFilters = categoryFilters.nextElementSibling;
        button = box.nextElementSibling;
        expand = button.firstElementChild;
        collapse = expand.nextElementSibling;
        gf.filteredCount = collapse.nextElementSibling;
        if (!gf.advancedSearch) {
            basicFilters.classList.remove(`esgst-hidden`);
            for (i = 0, n = gf.basicFilters.length; i < n; ++i) {
                createGfBasicFilter(gf.basicFilters[i]);
            }
        }
        for (i = 0, n = gf.typeFilters.length; i < n; ++i) {
            filter = gf.typeFilters[i];
            key = filter.key;
            if ((key === `regionRestricted` && !gf.advancedSearch) || key !== `regionRestricted`) {
                name = filter.name;
                typeFilter = insertHtml(typeFilters, `beforeEnd`, `
                    <div class="esgst-gf-type-filter">
                        <span>${name}</span>
                    </div>
                `);
                saveKey = `gf_${key}${gf.type}`;
                value = esgst[saveKey];
                gf[key] = value;
                checkbox = createCheckbox_v6(typeFilter, value, true);
                checkbox.checkbox.addEventListener(`click`, saveGfValue.bind(null, gf, key, saveKey, checkbox));
            }
        }
        if (esgst.gc) {
            categoryFilters.classList.remove(`esgst-hidden`);
            for (i = 0, n = gf.categoryFilters.length; i < n; ++i) {
                filter = gf.categoryFilters[i];
                id = filter.id;
                if (((id === `gc_dlc` && !gf.advancedSearch) || id !== `gc_dlc`) && esgst[id]) {
                    name = filter.name;
                    key = filter.key;
                    genres = key === `genres`;
                    categoryFilter = insertHtml(categoryFilters, `beforeEnd`, `
                        <div class="esgst-gf-category-filter">
                            <span>${name} ${genres ? `<i class="fa fa-question-circle" title="If disabled, no games will be filtered by genre; if enabled, only games with the listed genres will appear"></i> <input placeholder="Genre1, Genre2" type="text">` : ``}</span>
                        </div>
                    `);
                    saveKey = `gf_${key}${gf.type}`;
                    value = esgst[saveKey];
                    gf[key] = value;
                    checkbox = createCheckbox_v6(categoryFilter, value, genres ? false : true);
                    checkbox.checkbox.addEventListener(`click`, saveGfValue.bind(null, gf, key, saveKey, checkbox));
                    if (genres) {
                        input = categoryFilter.lastElementChild.lastElementChild;
                        key = `genreList`;
                        saveKey = `gf_${key}${gf.type}`;
                        value = esgst[saveKey].replace(/,(?!\s)/g, `, `);
                        gf[key] = input.value = value;
                        input.addEventListener(`change`, saveGfValue.bind(null, gf, key, saveKey, input));
                    }
                }
            }
        }
        for (i = 0, n = gf.exceptionFilters.length; i < n; ++i) {
            filter = gf.exceptionFilters[i];
            key = filter.key;
            if ((key === `exceptionRegionRestricted` && !gf.advancedSearch) || key !== `exceptionRegionRestricted`) {
                name = filter.name;
                multiple = key === `exceptionMultiple`;
                exceptionFilter = insertHtml(exceptionFilters, `beforeEnd`, `
                    <div class="esgst-gf-exception-filter">
                        <span>${name} ${multiple ? `<input type="number" min="1">` : ``}</span>
                    </div>
                `);
                saveKey = `gf_${key}${gf.type}`;
                value = esgst[saveKey];
                gf[key] = value;
                checkbox = createCheckbox_v6(exceptionFilter, value);
                checkbox.checkbox.addEventListener(`click`, saveGfValue.bind(null, gf, key, saveKey, checkbox));
                if (multiple) {
                    input = exceptionFilter.lastElementChild.firstElementChild;
                    key = `exceptionMultipleCopies`;
                    saveKey = `gf_${key}${gf.type}`;
                    value = esgst[saveKey];
                    gf[key] = input.value = value;
                    input.addEventListener(`change`, saveGfValue.bind(null, gf, key, saveKey, null));
                }
            }
        }
        button.addEventListener(`click`, toggleGfContainer.bind(null, collapse, expand, filters));
        esgst.giveawayFeatures.push(filterGfGiveaways.bind(null, gf));

        function createGfBasicFilter(filter) {
            var display, displayMax, displayMin, max, min, element, infinite, maxKey, minKey, maxSaveKey, minSaveKey, maxSavedValue, minSavedValue, maxValue, minValue, name, slider, step, value;
            name = filter.name;
            if ((name === `Rating` && esgst.gc) || name !== `Rating`) {
                minValue = filter.minValue;
                maxValue = filter.maxValue;
                step = filter.step || 1;
                infinite = filter.infinite;
                maxKey = `max${name}`;
                minKey = `min${name}`;
                maxSaveKey = `gf_${maxKey}${gf.type}`;
                minSaveKey = `gf_${minKey}${gf.type}`;
                maxSavedValue = esgst[maxSaveKey];
                minSavedValue = esgst[minSaveKey];
                if (!infinite && maxSavedValue > maxValue) {
                    maxSavedValue = maxValue;
                }
                gf[maxKey] = maxSavedValue;
                gf[minKey] = minSavedValue;
                element = insertHtml(basicFilters, `beforeEnd`, `
                    <div class="esgst-gf-basic-filter">
                        <div>${name} <span class="esgst-float-right"><input type="text" value="${minSavedValue}"> - <input type="text" value="${maxSavedValue}"></span></div>
                        <div></div>
                    </div>
                `);
                display = element.firstElementChild;
                displayMin = display.firstElementChild.firstElementChild;
                displayMax = displayMin.nextElementSibling;
                displayMin.addEventListener(`change`, function () {
                    min = $(slider).slider(`values`, 0);
                    max = $(slider).slider(`values`, 1);
                    if (step) {
                        value = parseFloat(displayMin.value);
                    } else {
                        value = parseInt(displayMin.value);
                    }
                    if (value !== min && value <= max) {
                        $(slider).slider(`values`, [value, max]);
                    }
                });
                displayMax.addEventListener(`change`, function () {
                    max = $(slider).slider(`values`, 1);
                    min = $(slider).slider(`values`, 0);
                    if (step) {
                        value = parseFloat(displayMax.value);
                    } else {
                        value = parseInt(displayMax.value);
                    }
                    if (value !== max && value >= min) {
                        if (infinite) {
                            $(slider).slider(`option`, `max`, value);
                        }
                        $(slider).slider(`values`, [min, value]);
                    }
                });
                slider = display.nextElementSibling;
                if (infinite) {
                    maxValue = maxSavedValue;
                }
                $(slider).slider({
                    change: function (event, ui) {
                        gf[maxKey] = ui.values[1];
                        gf[minKey] = ui.values[0];
                        filterGfGiveaways(gf);
                        setValue(maxSaveKey, ui.values[1]);
                        esgst[maxSaveKey] = ui.values[1];
                        setValue(minSaveKey, ui.values[0]);
                        esgst[minSaveKey] = ui.values[0];
                    },
                    min: minValue,
                    max: maxValue,
                    range: true,
                    slide: function (event, ui) {
                        displayMax.value = ui.values[1];
                        displayMin.value = ui.values[0];
                    },
                    step: step,
                    values: [minSavedValue, maxSavedValue]
                });
            }
        }
    }

    function saveGfValue(gf, key, saveKey, checkbox, event) {
        var value;
        gf[key] = value = checkbox ? checkbox.value : parseFloat(event.currentTarget.value);
        setValue(saveKey, value);
        esgst[saveKey] = value;
        filterGfGiveaways(gf);
    }

    function toggleGfContainer(collapse, expand, filters) {
        collapse.classList.toggle(`esgst-hidden`);
        expand.classList.toggle(`esgst-hidden`);
        filters.classList.toggle(`esgst-hidden`);
    }

    function filterGfGiveaways(gf) {
        var context, count, element, elements, filtered, genres, giveaway, i, j, k, key, maxKey, minKey, n, n2, n3, name;
        if (gf.type === `Popup`) {
            giveaways = esgst.popupGiveaways;
        } else {
            giveaways = esgst.currentGiveaways;
        }
        for (i = 0, n = giveaways.length; i < n; ++i) {
            filtered = false;
            giveaway = giveaways[i];
            if (document.body.contains(giveaway.outerWrap)) {
                if (!gf.advancedSearch && ((giveaway.pinned && !gf.exceptionPinned) || (giveaway.regionRestricted && ((gf.exceptionRegionRestricted && gf.advancedSearch) || !gf.exceptionRegionRestricted)) || (giveaway.group && !gf.exceptionGroup) || (giveaway.whitelist && !gf.exceptionWhitelist) || (giveaway.wishlisted && !gf.exceptionWishlist) || ((giveaway.copies > gf.exceptionMultipleCopies) && !gf.exceptionMultiple) || (!giveaway.pinned && !giveaway.regionRestricted && !giveaway.group && !giveaway.whitelist && !giveaway.wishlisted && (giveaway.copies <= gf.exceptionMultipleCopies)))) {
                    for (j = 0, n2 = gf.basicFilters.length; !filtered && j < n2; ++j) {
                        name = gf.basicFilters[j].name;
                        if ((name === `Rating` && esgst.gc && giveaway.gcReady) || name !== `Rating`) {
                            minKey = `min${name}`;
                            maxKey = `max${name}`;
                            key = name.toLowerCase();
                            if ((giveaway[key] < gf[minKey]) || (giveaway[key] > gf[maxKey])) {
                                filtered = true;
                            }
                        }
                    }
                }
                for (j = 0, n2 = gf.typeFilters.length; !filtered && j < n2; ++j) {
                    key = gf.typeFilters[j].key;
                    if ((key === `regionRestricted` && !gf.advancedSearch) || key !== `regionRestricted`) {
                        if (((gf[key] === `disabled`) && giveaway[key]) || ((gf[key] === `none`) && !giveaway[key])) {
                            filtered = true;
                        }
                    }
                }
                if (esgst.gc && giveaway.gcReady) {
                    for (j = 0, n2 = gf.categoryFilters.length; !filtered && j < n2; ++j) {
                        key = gf.categoryFilters[j].key;
                        if ((key === `dlc` && !gf.advancedSearch) || key !== `dlc`) {
                            if (key === `genres` && gf.genres) {
                                if (giveaway.genres) {
                                    genres = gf.genreList.toLowerCase().split(/,\s/);
                                    for (k = 0, n3 = genres.length; k < n3 && giveaway.genres.indexOf(genres[k]) < 0; ++k);
                                    if (k >= n3) {
                                        filtered = true;
                                    }
                                } else {
                                    filtered = true;
                                }
                            } else if (((gf[key] === `disabled`) && giveaway[key]) || ((gf[key] === `none`) && !giveaway[key])) {
                                filtered = true;
                            }
                        }
                    }
                }
                count = parseInt(gf.filteredCount.textContent);
                if (filtered) {
                    if (!giveaway.outerWrap.classList.contains(`esgst-hidden`)) {
                        gf.filteredCount.textContent = count + 1;
                        giveaway.outerWrap.classList.add(`esgst-hidden`);
                    }
                } else if (giveaway.outerWrap.classList.contains(`esgst-hidden`)) {
                    gf.filteredCount.textContent = count - 1;
                    giveaway.outerWrap.classList.remove(`esgst-hidden`);
                }
            }
        }
        if (esgst.gfType !== `Popup`) {
            elements = document.getElementsByClassName(`pagination`);
            for (i = 0, n = elements.length; i < n; ++i) {
                element = elements[i];
                context = element.previousElementSibling;
                count = 0;
                n2 = context.children.length;
                if (n2 > 0) {
                    for (j = 0; j < n2; ++j) {
                        if (context.children[j].classList.contains(`esgst-hidden`)) {
                            ++count;
                        }
                    }
                    var gfCount = element.getElementsByClassName(`esgst-gf-count`)[0];
                    element = element.firstElementChild;
                    if (gfCount) {
                        gfCount.innerHTML = `
                            (<strong>${count}</strong> filtered by Giveaway Filters)
                        `;
                    } else {
                        element.insertAdjacentHTML(`beforeEnd`, `
                            <span class="esgst-gf-count">
                                (<strong>${count}</strong> filtered by Giveaway Filters)
                            </span>
                        `);
                    }
                }
            }
        }
    }

    /* [PGB] Pinned Giveaways Button */

    function loadPgb() {
        var PGBContainer, HTML, PGBIcon;
        if (esgst.pinnedGiveawaysButton) {
            PGBContainer = esgst.pinnedGiveawaysButton.previousElementSibling;
            PGBContainer.classList.add("PGBContainer");
            esgst.pinnedGiveawaysButton.remove();
            HTML = `
                <div class="esgst-pgb-button">
                    <i class="PGBIcon fa fa-angle-down"></i>
                </div>
            `;
            PGBContainer.insertAdjacentHTML("afterEnd", HTML);
            esgst.pinnedGiveawaysButton = PGBContainer.nextElementSibling;
            PGBIcon = esgst.pinnedGiveawaysButton.firstElementChild;
            esgst.pinnedGiveawaysButton.addEventListener("click", togglePGBButton);
        }

        function togglePGBButton() {
            PGBContainer.classList.toggle("pinned-giveaways__inner-wrap--minimized");
            PGBIcon.classList.toggle("fa-angle-down");
            PGBIcon.classList.toggle("fa-angle-up");
        }
    }

    /* [UEG] Unfaded Entered Giveaways */

    function loadUeg() {
        esgst.endlessFeatures.push(removeUegFade);
        removeUegFade(document);
        GM_addStyle(`
            .esgst-ueg {
                opacity: 1 !important;
            }
        `);
    }

    function removeUegFade(context) {
        var elements, i, n;
        elements = context.getElementsByClassName(`giveaway__row-inner-wrap is-faded`);
        for (i = 0, n = elements.length; i < n; ++i) {
            elements[i].classList.add(`esgst-ueg`);
        }
    }

    /* [GB] Giveaway Bookmarks */

    function loadGb() {
        esgst.giveawayFeatures.push(getGbGiveaways);
        addGbButton();
    }

    function addGbButton() {
        var button, context, html;
        context = document.getElementsByClassName(`nav__left-container`)[0];
        html = `
            <div class="nav__button-container esgst-hidden" title="View your bookmarked giveaways">
                <div class="nav__button">
                    <i class="fa fa-bookmark"></i>
                </div>
            </div>
        `;
        button = insertHtml(context, `beforeEnd`, html);
        var bookmarked = [], endingSoon = 1, started = 0, ending = 0;
        createLock(`giveawayLock`, 300, function(deleteLock) {
            var giveaways = JSON.parse(GM_getValue(`giveaways`, `{}`));
            if (esgst.gb_h) {
                button.classList.add(`esgst-gb-highlighted`);
            }
            for (var key in giveaways) {
                if (giveaways[key].bookmarked) {
                    if (typeof giveaways[key].started === `undefined`) {
                        giveaways[key].started = true;
                    }
                    if (Date.now() >= giveaways[key].endTime || !giveaways[key].endTime) {
                        if (giveaways[key].started) {
                            delete giveaways[key].bookmarked;
                        } else {
                            bookmarked.push(giveaways[key]);
                            ++started;
                            if (esgst.gb_h) {
                                button.classList.add(`started`);
                            }
                        }
                    } else {
                        if (giveaways[key].started) {
                            bookmarked.push(giveaways[key]);
                            endingSoon = giveaways[key].endTime - Date.now() - (esgst.gb_hours * 3600000);
                            if (endingSoon <= 0) {
                                ++ending;
                            }
                        }
                    }
                }
            }
            var title;
            if (started || ending) {
                if (started) {
                    if (ending) {
                        title = `(${started} started - click to update them, ${ending} ending)`;
                    } else {
                        title = `(${started} started - click to update them)`;
                    }
                } else {
                    title = `(${ending} ending)`;
                }
            } else {
                title = ``;
            }
            button.title = `${button.title} ${title}`;
            if (bookmarked.length) {
                bookmarked.sort(function(a, b) {
                    if (a.endTime > b.endTime) {
                        return 1;
                    } else if (a.endTime < b.endTime) {
                        return -1;
                    } else {
                        return 0;
                    }
                });
                button.classList.remove(`esgst-hidden`);
                if (esgst.gb_h && ending > 0) {
                    button.classList.add(`ending`);
                }
            }
            GM_setValue(`giveaways`, JSON.stringify(giveaways));
            deleteLock();
        });
        button.addEventListener(`click`, function() {
            var popup = createPopup_v6(`fa-bookmark`, `Bookmarked Giveaways`, true);
            var i = 0;
            var n = bookmarked.length;
            var gbGiveaways = insertHtml(popup.description, `beforeEnd`, `<div class="esgst-text-left"></div>`);
            var set = createButtonSet(`green`, `grey`, `fa-plus`, `fa-circle-o-notch fa-spin`, `Load more...`, `Loading more...`, function (callback) {
                loadGbGiveaways(i, i + 5, bookmarked, gbGiveaways, popup, function (value) {
                    i = value;
                    if (i > n) {
                        set.set.remove();
                    }
                    callback();
                });
            });
            popup.description.appendChild(set.set);
            popup.open();
            set.trigger();
        });
    }

    function loadGbGiveaways(i, n, bookmarked, gbGiveaways, popup, callback) {
        if (i < n) {
            if (bookmarked[i]) {
                    request(null, true, `/giveaway/${bookmarked[i].code}/`, function (response) {
                        var endTime;
                        var responseHtml = DOM.parse(response.responseText);
                        var container = responseHtml.getElementsByClassName(`featured__outer-wrap--giveaway`)[0];
                        if (container) {
                            var heading = responseHtml.getElementsByClassName(`featured__heading`)[0];
                            var columns = heading.nextElementSibling;
                            var remaining = columns.firstElementChild;
                            endTime = 0;
                            if (!bookmarked[i].started && !remaining.textContent.match(/Begins/)) {
                                endTime = parseInt(remaining.lastElementChild.getAttribute(`data-timestamp`)) * 1e3;
                            }
                                var url = response.finalUrl;
                                var gameId = container.getAttribute(`data-game-id`);
                                var anchors = heading.getElementsByTagName(`a`);
                                var j, numA, numT;
                                for (j = 0, numA = anchors.length; j < numA; ++j) {
                                    anchors[j].classList.add(`giveaway__icon`);
                                }
                                var hideButton = heading.getElementsByClassName(`featured__giveaway__hide`)[0];
                                if (hideButton) {
                                    hideButton.remove();
                                }
                                var headingName = heading.firstElementChild;
                                headingName.outerHTML = `<a class="giveaway__heading__name" href="${url}">${headingName.innerHTML}</a>`;
                                var thinHeadings = heading.getElementsByClassName(`featured__heading__small`);
                                for (j = 0, numT = thinHeadings.length; j < numT; ++j) {
                                    thinHeadings[0].outerHTML = `<span class="giveaway__heading__thin">${thinHeadings[0].innerHTML}</span>`;
                                }
                                remaining.classList.remove(`featured__column`);
                                var created = remaining.nextElementSibling;
                                created.classList.remove(`featured__column`, `featured__column--width-fill`);
                                created.classList.add(`giveaway__column--width-fill`);
                                created.lastElementChild.classList.add(`giveaway__username`);
                                var avatar = columns.lastElementChild;
                                avatar.remove();
                                var element = created.nextElementSibling;
                                while (element) {
                                    element.classList.remove(`featured__column`);
                                    element.className = element.className.replace(/featured/g, `giveaway`);
                                    element = element.nextElementSibling;
                                }
                                var counts = responseHtml.getElementsByClassName(`sidebar__navigation__item__count`);
                                var image = responseHtml.getElementsByClassName(`global__image-outer-wrap--game-large`)[0].firstElementChild.getAttribute(`src`);
                                var popupHtml = `
<div><div class="giveaway__row-outer-wrap" data-game-id="${gameId}">
<div class="giveaway__row-inner-wrap">
<div class="giveaway__summary">
<h2 class="giveaway__heading">
${heading.innerHTML}
</h2>
<div class="giveaway__columns">
${columns.innerHTML}
</div>
<div class="giveaway__links">
<a href="${url}/entries">
<i class="fa fa-tag"></i>
<span>${(counts[1] && counts[1].textContent) || 0} entries</span>
</a>
<a href="${url}/comments">
<i class="fa fa-comment"></i>
<span>${counts[0].textContent} comments</span>
</a>
</div>
</div>
${avatar.outerHTML}
<a class="global__image-outer-wrap global__image-outer-wrap--game-medium" href="${url}">
<div class="global__image-inner-wrap" style="background-image:url(${image});"></div>
</a>
</div>
</div></div>
`;
                                gbGiveaways.insertAdjacentHTML(`beforeEnd`, popupHtml);
                                loadEndlessFeatures(gbGiveaways.lastElementChild);
                                popup.reposition();
                                if (endTime > 0) {
                                    createLock(`giveawayLock`, 300, function (deleteLock) {
                                        var giveaways = JSON.parse(GM_getValue(`giveaways`));
                                        giveaways[bookmarked[i].code].started = true;
                                        giveaways[bookmarked[i].code].endTime = endTime;
                                        GM_setValue(`giveaways`, JSON.stringify(giveaways));
                                        deleteLock();
                                        window.setTimeout(loadGbGiveaways, 0, ++i, n, bookmarked, gbGiveaways, popup, callback);
                                    });
                                } else {
                                    window.setTimeout(loadGbGiveaways, 0, ++i, n, bookmarked, gbGiveaways, popup, callback);
                                }
                            } else {
                                window.setTimeout(loadGbGiveaways, 0, ++i, n, bookmarked, gbGiveaways, popup, callback);
                            }
                    });
                } else {
                    callback(i + 1);
                }
        } else {
            callback(i);
        }
    }

    function getGbGiveaways(giveaways, main) {
        if ((esgst.wonPath && !main) || (!esgst.wonPath)) {
        var savedGiveaways = JSON.parse(GM_getValue(`giveaways`, `{}`));
        for (var i = 0, n = giveaways.length; i < n; ++i) {
            var giveaway = giveaways[i];
            if (((esgst.archivePath && !main) || !esgst.archivePath) && giveaway.creator !== esgst.username && !giveaway.ended && !giveaway.entered && giveaway.url && !giveaway.innerWrap.getElementsByClassName(`esgst-gb-button`)[0]) {
                if (savedGiveaways[giveaway.code] && savedGiveaways[giveaway.code].bookmarked) {
                    addGbUnbookmarkButton(giveaway);
                } else {
                    addGbBookmarkButton(giveaway);
                }
            }
        }
        }
    }

    function addGbBookmarkButton(giveaway) {
        var button;
        button = insertHtml(giveaway.headingName, `beforeBegin`, `
            <div class="esgst-gb-button" title="Bookmark giveaway">
                <i class="fa fa-bookmark-o"></i>
            </div>
        `);
        button.firstElementChild.addEventListener(`click`, function() {
            button.innerHTML = `<i class="fa fa-circle-o-notch fa-spin"></i>`;
            bookmarkGbGiveaway(giveaway, function() {
                button.remove();
                addGbUnbookmarkButton(giveaway);
            });
        });
    }

    function bookmarkGbGiveaway(giveaway, callback) {
        createLock(`giveawayLock`, 300, function(deleteLock) {
            var giveaways;
            giveaways = JSON.parse(GM_getValue(`giveaways`, `{}`));
            if (!giveaways[giveaway.code]) {
                giveaways[giveaway.code] = {};
            }
            giveaways[giveaway.code].code = giveaway.code;
            giveaways[giveaway.code].endTime = giveaway.endTime;
            giveaways[giveaway.code].started = giveaway.started;
            giveaways[giveaway.code].bookmarked = true;
            GM_setValue(`giveaways`, JSON.stringify(giveaways));
            deleteLock();
            if (callback) {
                callback();
            }
        });
    }

    function addGbUnbookmarkButton(giveaway) {
        var button;
        button = insertHtml(giveaway.headingName, `beforeBegin`, `
            <div class="esgst-gb-button" title="Unbookmark giveaway">
                <i class="fa fa-bookmark"></i>
            </div>
        `);
        button.firstElementChild.addEventListener(`click`, function() {
            button.innerHTML = `<i class="fa fa-circle-o-notch fa-spin"></i>`;
            unbookmarkGbGiveaway(giveaway, function() {
                button.remove();
                addGbBookmarkButton(giveaway);
            });
        });
    }

    function unbookmarkGbGiveaway(giveaway, callback) {
            createLock(`giveawayLock`, 300, function(deleteLock) {
                var giveaways;
                giveaways = JSON.parse(GM_getValue(`giveaways`, `{}`));
                if (giveaways[giveaway.code]) {
                    delete giveaways[giveaway.code].bookmarked;
                }
                GM_setValue(`giveaways`, JSON.stringify(giveaways));
                deleteLock();
                if (callback) {
                    callback();
                }
            });
    }

    /* [GED] Giveaway Encrypter/Decrypter */

    function loadGed() {
        var builtGiveaways, giveaway, button, code, currentDate, filtered, game, giveaways, i, keys, n, newGiveaways, numNew, popup, progress, results, savedGiveaways, set, timestamp;
        newGiveaways = {};
        button = insertHtml(esgst.headerNavigationLeft, `beforeEnd`, `
            <div class="nav__button-container esgst-hidden" title="View your decrypted giveaways.">
                <div class="nav__button">
                    <i class="fa fa-star"></i>
                </div>
            </div>
        `);
        createLock(`gedLock`, 300, function (deleteLock) {
            savedGiveaways = GM_getValue(`decryptedGiveaways`, GM_getValue(`exclusiveGiveaways`, {}));
            if (typeof savedGiveaways === `string`) {
                savedGiveaways = JSON.parse(savedGiveaways);
            }
            currentDate = Date.now();
            giveaways = [];
            for (code in savedGiveaways) {
                if (savedGiveaways[code].html) {
                    delete savedGiveaways[code].html;
                }
                timestamp = savedGiveaways[code].timestamp;
                giveaway = esgst.giveaways[code];
                if (timestamp > currentDate) {
                    filtered = false;
                    if (giveaway) {
                        game = null;
                        if (giveaway.gameType && giveaway.gameSteamId) {
                            game = esgst.games[giveaway.gameType][giveaway.gameSteamId];
                        }
                        if (((giveaway.level < esgst.gf_minLevelPopup) || (giveaway.level > esgst.gf_maxLevelPopup)) || ((giveaway.copies < esgst.gf_minCopiesPopup) || (giveaway.copies > esgst.gf_maxCopiesPopup)) || ((giveaway.points < esgst.gf_minPointsPopup) || (giveaway.points > esgst.gf_maxPointsPopup)) || ((esgst.gf_createdPopup === `disabled` && giveaway.creator === esgst.username) || (esgst.gf_createdPopup === `none` && giveaway.creator !== esgst.username)) || (game && (((esgst.gf_hiddenPopup === `disabled` && game.hidden) || (esgst.gf_hiddenPopup === `none` && !game.hidden)) || ((esgst.gf_ownedPopup === `disabled` && game.owned) || (esgst.gf_ownedPopup === `none` && !game.owned)) || ((esgst.gf_ignoredPopup === `disabled` && game.ignored) || (esgst.gf_ignoredPopup === `none` && !game.ignored))))) {
                            filtered = true;
                        }
                    }
                    if (!filtered) {
                        giveaways.push({
                            code: code,
                            source: savedGiveaways[code].source,
                            timestamp: timestamp
                        });
                    }
                }
            }
            GM_setValue(`decryptedGiveaways`, JSON.stringify(savedGiveaways));
            deleteLock();
            n = giveaways.length;
            if (n > 0) {
                button.classList.remove(`esgst-hidden`);
                giveaways.sort(function (a, b) {
                    if (a.timestamp < b.timestamp) {
                        return -1;
                    } else if (a.timestamp > b.timestamp) {
                        return 1;
                    } else {
                        return 0;
                    }
                });
            }
            button.addEventListener(`click`, function () {
                popup = createPopup_v6(`fa-star`, `Decrypted Giveaways`, true);
                results = insertHtml(popup.description, `beforeEnd`, `<div class="esgst-text-left"></div>`);
                if (esgst.gf) {
                    addGfContainer(results);
                }
                i = 0;
                set = createButtonSet(`green`, `grey`, `fa-plus`, `fa-circle-o-notch fa-spin`, `Load More`, `Loading more...`, function (callback) {
                    getGedGiveaways({}, giveaways, i, null, i + 5, function (value) {
                        i = value;
                        if (i > n) {
                            set.set.remove();
                        }
                        callback();
                    });
                });
                keys = Object.keys(newGiveaways);
                numNew = keys.length;
                if (numNew > 0) {
                    progress = insertHtml(popup.description, `beforeEnd`, `
                        <div>
                            <i class="fa fa-circle-o-notch fa-spin"></i>
                            <span>Decrypting new giveaways...</span>
                        </div>
                    `);
                    getGedGiveaways({}, newGiveaways, 0, keys, numNew, function () {
                        progress.remove();
                        popup.description.appendChild(set.set);
                        set.trigger();
                    });
                } else {
                    popup.description.appendChild(set.set);
                    set.trigger();
                }
                popup.open();
            });
            esgst.endlessFeatures.push(checkGedGiveaways.bind(null, button, newGiveaways));
            checkGedGiveaways(button, newGiveaways, document);
        });
        GM_addStyle(`
            .esgst-ged-source {
                font-weight: bold;
                margin: 5px 0;
            }
        `);

        function getGedGiveaways(currentGiveaways, giveaways, i, keys, n, callback) {
            var builtGiveaway, data, giveaway, key, responseHtml;
            if (i < n) {
                if (keys) {
                    key = keys[i];
                    if (key) {
                        giveaway = giveaways[key];
                    }
                } else {
                    giveaway = giveaways[i];
                }
                if (giveaway) {
                    request(null, false, `/giveaway/${giveaway.code}/`, function (response) {
                        responseHtml = DOM.parse(response.responseText);
                        builtGiveaway = buildGiveaway(responseHtml, response.finalUrl);
                        if (builtGiveaway && builtGiveaway.started) {
                            results.insertAdjacentHTML(`beforeEnd`, builtGiveaway.html);
                            var giveawayy = getGiveawayInfo(results.lastElementChild.lastElementChild, document, null, null, false, false, null, true);
                            esgst.popupGiveaways.push(giveawayy.giveaway);
                            currentGiveaways[giveawayy.data.code] = giveawayy.data;
                            loadEndlessFeatures(results.lastElementChild);
                            if (giveaway.source) {
                                results.lastElementChild.getElementsByClassName(`giveaway__columns`)[0].insertAdjacentHTML(`afterBegin`, `
                                    <a class="esgst-ged-source" href="/go/comment/${giveaway.source}">Source</a>
                                `);
                            }
                            popup.reposition();
                            if (keys) {
                                results.lastElementChild.getElementsByClassName(`giveaway__heading__name`)[0].insertAdjacentText(`afterBegin`, `[NEW] `);
                                createLock(`gedLock`, 300, function (deleteLock) {
                                    savedGiveaways = GM_getValue(`decryptedGiveaways`, GM_getValue(`exclusiveGiveaways`, {}));
                                    if (typeof savedGiveaways === `string`) {
                                        savedGiveaways = JSON.parse(savedGiveaways);
                                    }
                                    savedGiveaways[builtGiveaway.code] = {
                                        source: giveaway.source,
                                        timestamp: builtGiveaway.timestamp
                                    };
                                    GM_setValue(`decryptedGiveaways`, JSON.stringify(savedGiveaways));
                                    deleteLock();
                                    window.setTimeout(getGedGiveaways, 0, currentGiveaways, giveaways, ++i, keys, n, callback);
                                });
                            } else {
                                window.setTimeout(getGedGiveaways, 0, currentGiveaways, giveaways, ++i, keys, n, callback);
                            }
                        } else {
                            window.setTimeout(getGedGiveaways, 0, currentGiveaways, giveaways, ++i, keys, n, callback);
                        }
                    });
                } else {
                    saveGiveaways(currentGiveaways, callback.bind(null, i + 1));
                }
            } else {
                saveGiveaways(currentGiveaways, callback.bind(null, i));
            }
        }
    }

    function checkGedGiveaways(button, newGiveaways, context) {
        var code, comment, element, elements, encryptedCode, i, n, newGiveaway, savedGiveaways, source;
        elements = context.querySelectorAll(`[href^="ESGST-"]`);
        n = elements.length;
        savedGiveaways = GM_getValue(`decryptedGiveaways`, GM_getValue(`exclusiveGiveaways`, {}));
        if (typeof savedGiveaways === `string`) {
            savedGiveaways = JSON.parse(savedGiveaways);
        }
        if (n > 0) {
            newGiveaway = false;
            for (i = 0; i < n; ++i) {
                element = elements[i];
                encryptedCode = element.getAttribute(`href`).match(/ESGST-(.+)/)[1];
                if (!encryptedCode.match(/currentVersion/)) {
                    code = decryptGedCode(encryptedCode);
                    comment = element.closest(`.comment__summary`);
                    if (comment) {
                        comment.getElementsByClassName(`comment__actions`)[0].insertAdjacentHTML(`beforeEnd`, `
                            <a class="esgst-ged-icon" href="/giveaway/${code}/" title="ESGST Decrypted Giveaway">
                                <i class="fa fa-star"></i>
                            </a>
                        `);
                        source = comment.id;
                        if (savedGiveaways[code]) {
                            if (!savedGiveaways[code].source) {
                                savedGiveaways[code].source = source;
                            }
                        } else if (!newGiveaways[code]) {
                            newGiveaway = true;
                            newGiveaways[code] = {
                                code: code,
                                source: source
                            };
                        }
                    }
                }
            }
            if (newGiveaway) {
                button.classList.remove(`esgst-hidden`);
                button.classList.add(`positive`);
            }
        }
    }

    function buildGiveaway(context, url) {
        var avatar, code, column, columns, comments, counts, endTime, endTimeColumn, entered, entries, giveaway, heading, headingName, hideButton, i, id, icons, image, n, removeEntryButton, started, startTimeColumn, thinHeadings;
        giveaway = context.getElementsByClassName(`featured__outer-wrap--giveaway`)[0];
        if (giveaway) {
            code = url.match(/giveaway\/(.+?)\//)[1];
            id = giveaway.getAttribute(`data-game-id`);
            heading = giveaway.getElementsByClassName(`featured__heading`)[0];
            headingName = heading.firstElementChild;
            headingName.outerHTML = `<a class="giveaway__heading__name" href="${url}">${headingName.innerHTML}</a>`;
            thinHeadings = heading.getElementsByClassName(`featured__heading__small`);
            for (i = 0, n = thinHeadings.length; i < n; ++i) {
                thinHeadings[0].outerHTML = `<span class="giveaway__heading__thin">${thinHeadings[0].innerHTML}</span>`;
            }
            icons = heading.getElementsByTagName(`a`);
            for (i = 0, n = icons.length; i < n; ++i) {
                icons[i].classList.add(`giveaway__icon`);
            }
            hideButton = heading.getElementsByClassName(`featured__giveaway__hide`)[0];
            if (hideButton) {
                hideButton.remove();
            }
            columns = heading.nextElementSibling;
            endTimeColumn = columns.firstElementChild;
            endTimeColumn.classList.remove(`featured__column`);
            endTime = parseInt(endTimeColumn.lastElementChild.getAttribute(`data-timestamp`)) * 1000;
            startTimeColumn = endTimeColumn.nextElementSibling;
            startTimeColumn.classList.remove(`featured__column`, `featured__column--width-fill`);
            startTimeColumn.classList.add(`giveaway__column--width-fill`);
            avatar = columns.lastElementChild;
            avatar.remove();
            column = startTimeColumn.nextElementSibling;
            while (column) {
                column.classList.remove(`featured__column`);
                column.className = column.className.replace(/featured/g, `giveaway`);
                column = column.nextElementSibling;
            }
            removeEntryButton = context.getElementsByClassName(`sidebar__entry-delete`)[0];
            if (removeEntryButton && !removeEntryButton.classList.contains(`is-hidden`)) {
                entered = `is-faded`;
            } else {
                entered = ``;
            }
            counts = context.getElementsByClassName(`sidebar__navigation__item__count`);
            if (counts.length > 1) {
                entries = counts[1].textContent;
                comments = counts[0].textContent;
                started = true;
            } else {
                comments = counts[0].textContent;
                started = false;
            }
            image = giveaway.getElementsByClassName(`global__image-outer-wrap--game-large`)[0].firstElementChild.getAttribute(`src`);
            return {
                code: code,
                html: `
                    <div>
                        <div class="giveaway__row-outer-wrap" data-game-id="${id}">
                            <div class="giveaway__row-inner-wrap ${entered}">
                                <div class="giveaway__summary">
                                    <h2 class="giveaway__heading">${heading.innerHTML}</h2>
                                    <div class="giveaway__columns">${columns.innerHTML}</div>
                                    <div class="giveaway__links">
                                        <a href="${url}/entries">
                                            <i class="fa fa-tag"></i>
                                            <span>${entries} entries</span>
                                        </a>
                                        <a href="${url}/comment">
                                            <i class="fa fa-comment"></i>
                                            <span>${comments} comments</span>
                                        </a>
                                    </div>
                                </div>
                                ${avatar.outerHTML}
                                <a class="global__image-outer-wrap global__image-outer-wrap--game-medium" href="${url}">
                                    <div class="global__image-inner-wrap" style="background-image: url(${image})"></div>
                                </a>
                            </div>
                        </div>
                    </div>
                `,
                started: started,
                timestamp: endTime
            };
        } else {
            return null;
        }
    }

    function decryptGedCode(encryptedCode) {
        var code, i, n, parts;
        code = ``;
        parts = encryptedCode.split(`-`);
        for (i = 0, n = parts.length; i < n; ++i) {
            code += String.fromCharCode(parseInt(parts[i], 16));
        }
        return rot(code, 13);
    }

    function encryptGedCode(code) {
        var encryptedCode, i, n, rotated;
        rotated = rot(code, 13);
        encryptedCode = [];
        for (i = 0, n = rotated.length; i < n; ++i) {
            encryptedCode.push(rotated.charCodeAt(i).toString(16));
        }
        return encryptedCode.join(`-`);
    }

    function rot(string, n) {
        return string.replace(/[a-zA-Z]/g, function (char) {
            return String.fromCharCode(((char <= `Z`) ? 90 : 122) >= ((char = char.charCodeAt(0) + n)) ? char : (char - 26));
        });
    }

    /* [OCHGB] One-Click Hide Giveaway Button */

    function loadOchgb() {
        esgst.giveawayFeatures.push(setOchgbButtons);
    }

    function setOchgbButtons(giveaways) {
        var i, n;
        for (i = 0, n = giveaways.length; i < n; ++i) {
            setOchgbButton(giveaways[i]);
        }
    }

    function setOchgbButton(giveaway) {
        var button, i, matches, n, newButton;
        button = giveaway.innerWrap.querySelector(`.giveaway__hide, .featured__giveaway__hide`);
        if (button) {
            if (esgst.giveawayPath) {
                button = button.parentElement;
            }
            newButton = insertHtml(button, `afterEnd`, `<a><i class="${esgst.giveawayPath ? `` : `giveaway__icon`} fa fa-eye-slash"></i></a>`);
            button.remove();
            newButton.addEventListener(`click`, function() {
                newButton.firstElementChild.className = `giveaway__icon fa fa-circle-o-notch fa-spin`;
                request(`xsrf_token=${esgst.xsrfToken}&do=hide_giveaways_by_game_id&game_id=${giveaway.gameId}`, false, `/ajax.php`, function() {
                    newButton.remove();
                    if (!esgst.giveawayPath) {
                        giveaway.outerWrap.remove();
                        matches = document.querySelectorAll(`.giveaway__row-outer-wrap[data-game-id="${giveaway.gameId}"]`);
                        for (i = 0, n = matches.length; i < n; ++i) {
                            matches[i].remove();
                        }
                    }
                });
            });
        }
    }

    /* [GWC] Giveaway Winning Chance */

    function loadGwc() {
        esgst.giveawayFeatures.push(addGwcChances);
    }

    function addGwcSortButton(button) {
        var i, n;
        button.addEventListener(`click`, function () {
            esgst.currentGiveaways.sort(function (a, b) {
                if (a.chance > b.chance) {
                    return -1;
                } else if (a.chance < b.chance) {
                    return 1;
                } else {
                    return 0;
                }
            });
            for (i = 0, n = esgst.currentGiveaways.length; i < n; ++i) {
                esgst.currentGiveaways[i].outerWrap.parentElement.appendChild(esgst.currentGiveaways[i].outerWrap);
            }
        });
    }

    function addGwcChances(giveaways, main) {
        var giveaway, i, n;
        for (i = 0, n = giveaways.length; i < n; ++i) {
            giveaway = giveaways[i];
            if ((((esgst.createdPath || esgst.wonPath) && !main) || (!esgst.createdPath && !esgst.wonPath)) && ((giveaway.inviteOnly && giveaway.url) || !giveaway.inviteOnly) && !giveaway.innerWrap.getElementsByClassName(`esgst-gwc`)[0]) {
                if (giveaway.started) {
                    addGwcChance(insertHtml(giveaway.panel, main && esgst.gv && esgst.giveawaysPath ? `afterBegin` : `beforeEnd`, `<div class="${esgst.giveawayPath ? `featured__column` : ``} esgst-gwc" title="Giveaway Winning Chance">`), giveaway);
                } else {
                    giveaway.chance = 100;
                }
            }
        }
    }

    function addGwcChance(context, giveaway) {
        var chance, entries, html;
        if (giveaway.entered || giveaway.ended || giveaway.created) {
            entries = giveaway.entries;
        } else {
            entries = giveaway.entries + 1;
        }
        chance = entries > 0 ? Math.round(giveaway.copies / entries * 10000) / 100 : 100;
        if (chance > 100) {
            chance = 100;
        }
        giveaway.chance = chance;
        context.setAttribute(`data-chance`, chance);
        if (esgst.enteredPath) {
            context.style.display = `inline-block`;
            if (esgst.gwr) {
                html = `
                    <span>${chance}% / </span>
                `;
            } else {
                html = `
                    <span>${chance}%</span>
                `;
            }
        } else {
            html = `
                <i class="fa fa-area-chart"></i>
                <span>${chance}%</span>
            `;
        }
        context.innerHTML = html;
    }

    /* [GWR] Giveaway Winning Ratio */

    function loadGwr() {
        if (esgst.enteredPath) {
            esgst.endlessFeatures.push(addGwcrHeading);
            addGwcrHeading(document);
        }
        esgst.giveawayFeatures.push(addGwrRatios);
    }

    function addGwrRatios(giveaways, main) {
        var giveaway, i, n;
        for (i = 0, n = giveaways.length; i < n; ++i) {
            giveaway = giveaways[i];
            if ((((esgst.createdPath || esgst.wonPath) && !main) || (!esgst.createdPath && !esgst.wonPath)) && giveaway.started && ((giveaway.inviteOnly && giveaway.url) || !giveaway.inviteOnly) && !giveaway.innerWrap.getElementsByClassName(`esgst-gwr`)[0]) {
                addGwcRatio(insertHtml(giveaway.panel, main && esgst.gv && esgst.giveawaysPath ? `afterBegin` : `beforeEnd`, `<div class="${esgst.giveawayPath ? `featured__column` : ``} esgst-gwr" title="Giveaway Winning Ratio">`), giveaway);
            }
        }
    }

    function addGwcRatio(context, giveaway) {
        var entries, html, ratio;
        if (giveaway.entered || giveaway.ended || giveaway.created) {
            entries = giveaway.entries;
        } else {
            entries = giveaway.entries + 1;
        }
        ratio = Math.round(entries / giveaway.copies);
        context.setAttribute(`data-ratio`, ratio);
        if (esgst.enteredPath) {
            context.style.display = `inline-block`;
            html = `
                <span>${ratio}:1</span>
            `;
        } else {
            html = `
                <i class="fa fa-pie-chart"></i>
                <span>${ratio}:1</span>
            `;
        }
        context.innerHTML = html;
    }

    function addGwcrHeading(context, main) {
        var table;
        if ((!esgst.createdPath && !esgst.wonPath) && main) {
        table = context.getElementsByClassName(`table__heading`)[0];
            if (table && !table.getElementsByClassName(`esgst-gwcr-heading`)[0]) {
                table.firstElementChild.insertAdjacentHTML(`afterEnd`, `<div class="table__column--width-small text-center esgst-gwcr-heading">Chance / Ratio</div>`);
            }
        }
    }

    /* [ELGB] Enter/Leave Giveaway Button */

    function loadElgb() {
        esgst.giveawayFeatures.push(addElgbButtons);
        esgst.elgbCallback = esgst.elgb_d ? checkElgbDescription : enterElgbGiveaway;
    }

    function addElgbButtons(giveaways, main) {
        var games, giveaway, i, n;
            games = JSON.parse(GM_getValue(`games`));
        if (((esgst.createdPath || esgst.enteredPath || esgst.wonPath || esgst.giveawayPath) && !main) || (!esgst.createdPath && !esgst.enteredPath && !esgst.wonPath && !esgst.giveawayPath)) {
            for (i = 0, n = giveaways.length; i < n; ++i) {
                giveaway = giveaways[i];
                if (!giveaway.innerWrap.getElementsByClassName(`esgst-button-set`)[0]) {
                    if (((giveaway.inviteOnly && giveaway.url) || !giveaway.inviteOnly) && giveaway.started && !giveaway.ended && !giveaway.created && giveaway.level <= esgst.headerData.level && ((giveaway.id && ((games[giveaway.type][giveaway.id] && !games[giveaway.type][giveaway.id].owned) || !games[giveaway.type][giveaway.id])) || !giveaway.id)) {
                        addElgbButton(giveaway, null, main);
                    }
                }
            }
        }
    }

    function addElgbButton(giveaway, error, main) {
        if (giveaway.elgbButton) {
            giveaway.elgbButton.remove();
        }
        if (giveaway.entered) {
            giveaway.elgbButton = createButtonSet(`yellow`, `grey`, `fa-minus-circle`, `fa-circle-o-notch fa-spin`, `Nah m8, changed my mind.`, `Leaving shit giveaway.`, leaveElgbGiveaway.bind(null, giveaway, main)).set;
            giveaway.elgbButton.removeAttribute(`title`);
        } else if (giveaway.error) {
            giveaway.elgbButton = createButtonSet(`red`, `grey`, `fa-plus-circle`, `fa-circle-o-notch fa-spin`, `RIP`, `KYS plz`, esgst.elgbCallback.bind(null, giveaway, main)).set;
            giveaway.elgbButton.setAttribute(`title`, `I'm dead, leave me alone.`);
        } else {
            if (giveaway.points <= esgst.headerData.points) {
                giveaway.elgbButton = createButtonSet(`green`, `grey`, `fa-plus-circle`, `fa-circle-o-notch fa-spin`, `I'll 'av a go m8`, `Getting in there`, esgst.elgbCallback.bind(null, giveaway, main)).set;
                giveaway.elgbButton.removeAttribute(`title`);
            } else {
                giveaway.elgbButton = createButtonSet(`red`, `grey`, `fa-plus-circle`, `fa-circle-o-notch fa-spin`, `Not Enough Points M9 ( ͡° ͜ʖ ͡°)`, `Are you retarded?`, esgst.elgbCallback.bind(null, giveaway, main)).set;
                giveaway.elgbButton.removeAttribute(`title`);
            }
        }
        if (main && esgst.gv && esgst.giveawaysPath) {
            giveaway.panel.insertBefore(giveaway.elgbButton, giveaway.panel.firstElementChild);
        } else {
            giveaway.panel.appendChild(giveaway.elgbButton);
        }
    }

    function checkElgbDescription(giveaway, main, mainCallback) {
        request(null, false, giveaway.url, function(response) {
            var box, description, popup, set;
            description = DOM.parse(response.responseText).getElementsByClassName(`page__description`)[0];
            if (description || esgst.elgb_r) {
                popup = createPopup_v6(`fa-file-text-o`, `<a href="${giveaway.url}"><span>${giveaway.name}</span></a> by <a href="/user/${giveaway.creator}">${giveaway.creator}</a>`, true);
                if (description) {
                    description.classList.add(`esgst-text-left`);
                    popup.description.insertAdjacentHTML(`beforeEnd`, description.outerHTML);
                    set = createButtonSet(`green`, `grey`, `fa-plus-circle`, `fa-circle-o-notch fa-spin`, `Enter Giveaway`, `Entering...`, function (callback) {
                        enterElgbGiveaway(giveaway, main, function() {
                            mainCallback();
                            if (box && box.value) {
                                request(`xsrf_token=${esgst.xsrfToken}&do=comment_new&description=${box.value}`, false, giveaway.url, function() {
                                    callback();
                                    popup.opened.close();
                                });
                            } else {
                                callback();
                                popup.opened.close();
                            }
                        });
                    });
                } else {
                    enterElgbGiveaway(giveaway, main, mainCallback);
                    set = createButtonSet(`green`, `grey`, `fa-plus-circle`, `fa-circle-o-notch fa-spin`, `Add Comment`, `Adding...`, function (callback) {
                        if (box && box.value) {
                            request(`xsrf_token=${esgst.xsrfToken}&do=comment_new&description=${box.value}`, false, giveaway.url, function() {
                                callback();
                                popup.opened.close();
                            });
                        } else {
                            callback();
                            popup.opened.close();
                        }
                    });
                }
                if (esgst.elgb_r) {
                    box = insertHtml(popup.description, `beforeEnd`, `<textarea></textarea>`);
                    addCFHPanel(box);
                }
                popup.description.appendChild(set.set);
                popup.open(function() {
                    if (box) {
                        box.focus();
                    }
                });
                popup.close = function () {
                    mainCallback();
                };
            } else {
                enterElgbGiveaway(giveaway, main, mainCallback);
            }
        });
    }

    function enterElgbGiveaway(giveaway, main, callback) {
        request(`xsrf_token=${esgst.xsrfToken}&do=entry_insert&code=${giveaway.code}`, false, `/ajax.php`, function(response) {
            var responseJson;
            responseJson = JSON.parse(response.responseText);
            if (responseJson.type === `success`) {
                giveaway.innerWrap.classList.add(`is-faded`);
                giveaway.entered = true;
                giveaway.error = false;
                addElgbButton(giveaway, null, main);
                esgst.headerElements.pointsContainer.textContent = responseJson.points;
                refreshHeaderElements(document);
                if (esgst.hr) {
                    GM_setValue(`sgRefreshedHeaderElements`, JSON.stringify(getHeaderElements()));
                }
                updateElgbButtons();
                if (esgst.egh) {
                    saveEghGame(giveaway.id, giveaway.type);
                }
                if (esgst.gb) {
                    var button = giveaway.outerWrap.getElementsByClassName(`esgst-gb-button`)[0];
                    if (button) {
                        unbookmarkGbGiveaway(giveaway, function() {
                            button.remove();
                            addGbBookmarkButton(giveaway);
                        });
                    }
                }
                if (esgst.gf && esgst.gf.filteredCount) {
                    filterGfGiveaways(esgst.gf);
                    if (esgst.gfPopup) {
                        filterGfGiveaways(esgst.gfPopup);
                    }
                }
                callback();
            } else {
                giveaway.entered = false;
                giveaway.error = true;
                addElgbButton(giveaway, responseJson.msg, main);
                callback();
            }
        });
    }

    function leaveElgbGiveaway(giveaway, main, callback) {
        request(`xsrf_token=${esgst.xsrfToken}&do=entry_delete&code=${giveaway.code}`, false, `/ajax.php`, function(response) {
            var responseJson;
            responseJson = JSON.parse(response.responseText);
            if (responseJson.type === `success`) {
                giveaway.innerWrap.classList.remove(`is-faded`);
                giveaway.entered = false;
                giveaway.error = false;
                addElgbButton(giveaway, null, main);
                esgst.headerElements.pointsContainer.textContent = responseJson.points;
                refreshHeaderElements(document);
                if (esgst.hr) {
                    GM_setValue(`sgRefreshedHeaderElements`, JSON.stringify(getHeaderElements()));
                }
                updateElgbButtons();
                callback();
            } else {
                callback();
            }
        });
    }

    function updateElgbButtons() {
        var giveaway, i, n;
        for (i = 0, n = esgst.currentGiveaways.length; i < n; ++i) {
            giveaway = esgst.currentGiveaways[i];
            if (giveaway.elgbButton && !giveaway.entered) {
                addElgbButton(giveaway, null, true);
            }
        }
    }

    /* [GGL] Giveaway Groups Loader */

    function loadGgl() {
        if (esgst.ggl_p) {
            esgst.giveawayFeatures.push(setGglButtons);
        } else {
            esgst.giveawayFeatures.push(getGglGiveaways);
        }
    }

    function setGglButtons(giveaways) {
        var i, n;
        for (i = 0, n = giveaways.length; i < n; ++i) {
            setGglButton(giveaways[i]);
        }
    }

    function setGglButton(giveaway) {
        if (giveaway.group) {
            giveaway.group.classList.add(`esgst-ggl-button`);
            giveaway.group.removeAttribute(`href`);
            giveaway.group.addEventListener(`click`, function() {
                var newGiveaways, newGroups, panel, popup, progress, savedGiveaways, savedGroups;
                popup = createPopup_v6(`fa-user`, `<a href="${giveaway.url}/groups">Giveaway Groups</a>`, true);
                progress = insertHtml(popup.description, `beforeEnd`,  `
                    <div>
                        <i class="fa fa-circle-o-notch fa-spin"></i>
                        <span>Loading groups...</span>
                    </div>
                `);
                panel = insertHtml(popup.description, `beforeEnd`, `
                    <div class="esgst-text-left table esgst-hidden">
                        <div class="table__rows"></div>
                    </div>
                `);
                popup.open();
                newGiveaways = {};
                newGroups = {};
                savedGiveaways = JSON.parse(GM_getValue(`giveaways`, `{}`));
                savedGroups = JSON.parse(GM_getValue(`groups`, `{}`));
                loadGglGroups([giveaway], 0, 1, newGiveaways, newGroups, savedGiveaways, savedGroups, function(groups) {
                    var className, groupCount, i, n, key, link;
                    if (groups) {
                        groupCount = 0;
                        for (i = 0, n = groups.length; i < n; ++i) {
                            key = groups[i];
                            var group = savedGroups[key] || newGroups[key];
                            if (group && group.member) {
                                className = `esgst-ggl-member`;
                                groupCount += 1;
                            } else if (esgst.ggl_m) {
                                className = `esgst-hidden`;
                            } else {
                                className = ``;
                                groupCount += 1;
                            }
                            if (className !== `esgst-hidden`) {
                                link = insertHtml(panel.lastElementChild, `beforeEnd`, `
                                    <div class="table__row-outer-wrap ${className}">
                                        <div class="table__row-inner-wrap">
                                            <div>
                                                <a class="table_image_avatar" href="/group/${group.code}/" style="background-image:url(http://cdn.edgecast.steamstatic.com/steamcommunity/public/images/avatars/${group.avatar}_medium.jpg)"></a>
                                            </div>
                                            <div class="table__column--width-fill">
                                                <a class="table__column__heading" href="/group/${group.code}/"></a>
                                            </div>
                                        </div>
                                    </div>
                                `).getElementsByClassName(`table__column__heading`)[0];
                                link.textContent = group.name;
                            }
                        }
                        if (groupCount === 0) {
                            progress.innerHTML = `
                                <i class="fa fa-exclamation-mark"></i>
                                <span>You are not a member of any group in this giveaway.</span>
                            `;
                        } else {
                            panel.classList.remove(`esgst-hidden`);
                            loadEndlessFeatures(panel);
                            progress.remove();
                        }
                    } else {
                        progress.innerHTML = `
                            <i class="fa fa-times-circle"></i>
                            <span>An error ocurred.</span>
                        `;
                    }
                });
            });
        }
    }

    function getGglGiveaways(giveaways) {
        var newGiveaways, newGroups, savedGiveaways, savedGroups;
        newGiveaways = {};
        newGroups = {};
        savedGiveaways = JSON.parse(GM_getValue(`giveaways`, `{}`));
        savedGroups = JSON.parse(GM_getValue(`groups`, `{}`));
        loadGglGroups(giveaways, 0, giveaways.length, newGiveaways, newGroups, savedGiveaways, savedGroups);
    }

    function loadGglGroups(giveaways, i, n, newGiveaways, newGroups, savedGiveaways, savedGroups, callback) {
        var giveaway;
        if (i < n) {
            giveaway = giveaways[i];
            if (giveaway.group) {
                if (savedGiveaways[giveaway.code] && Array.isArray(savedGiveaways[giveaway.code].groups)) {
                    if (callback) {
                        callback(savedGiveaways[giveaway.code].groups);
                    } else {
                        addGglPanel(giveaway, savedGiveaways[giveaway.code].groups, newGroups, savedGroups);
                    }
                    window.setTimeout(loadGglGroups, 0, giveaways, ++i, n, newGiveaways, newGroups, savedGiveaways, savedGroups);
                } else {
                    getGglGroups([], 1, newGroups, `${giveaway.url}/groups/search?page=`, function(groups) {
                        if (groups) {
                            newGiveaways[giveaway.code] = {
                                groups: groups
                            };
                            if (callback) {
                                callback(groups);
                            } else {
                                addGglPanel(giveaway, groups, newGroups, savedGroups);
                            }
                            window.setTimeout(loadGglGroups, 0, giveaways, ++i, n, newGiveaways, newGroups,  savedGiveaways, savedGroups);
                        } else if (callback) {
                            callback(null);
                        } else {
                            window.setTimeout(loadGglGroups, 0, giveaways, ++i, n, newGiveaways, newGroups,  savedGiveaways, savedGroups);
                        }
                    });
                }
            } else {
                window.setTimeout(loadGglGroups, 0, giveaways, ++i, n, newGiveaways, newGroups,  savedGiveaways, savedGroups);
            }
        } else {
            lockAndSaveGiveaways(newGiveaways);
            lockAndSaveGroups(newGroups);
        }
    }

    function addGglPanel(giveaway, groups, newGroups, savedGroups) {
        var className, groupCount, i, key, link, n, panel;
        if (!giveaway.summary.getElementsByClassName(`esgst-ggl-panel`)[0]) {
            panel = insertHtml(giveaway.summary, `beforeEnd`, `
                <div class="esgst-ggl-panel">
                    <i class="fa fa-user"></i>
                </div>
            `);
            groupCount = 0;
            for (i = 0, n = groups.length; i < n; ++i) {
                key = groups[i];
                var group = savedGroups[key] || newGroups[key];
                if (group && group.member) {
                    className = `esgst-ggl-member`;
                    groupCount += 1;
                } else if (esgst.ggl_m) {
                    className = `esgst-hidden`;
                } else {
                    className = ``;
                    groupCount += 1;
                }
                if (className !== `esgst-hidden`) {
                    link = insertHtml(panel, `beforeEnd`, `
                        <div class="${className}">
                            <a class="table_image_avatar" href="/group/${group.code}/"  style="background-image:url(http://cdn.edgecast.steamstatic.com/steamcommunity/public/images/avatars/${group.avatar}_medium.jpg)"></a>
                            <a href="/group/${group.code}/"></a>
                        </div>
                    `).lastElementChild;
                    link.textContent = group.name;
                    if (esgst.ap) {
                        getApAvatars(panel);
                    }
                }
            }
            if (groupCount === 0) {
                panel.remove();
            }
        }
    }

    function getGglGroups(groups, nextPage, newGroups, url, callback) {
        var code, communityName, element, elements, error, heading, i, match, n, pagination, responseHtml;
        request(null, false, `${url}${nextPage}`, function(response) {
            responseHtml = DOM.parse(response.responseText);
            error = responseHtml.getElementsByClassName(`table--summary`)[0];
            if (error) {
                window.setTimeout(callback, 0, null);
            } else {
                elements = responseHtml.getElementsByClassName(`table__row-inner-wrap`);
                for (i = 0, n = elements.length; i < n; ++i) {
                    element = elements[i];
                    heading = element.getElementsByClassName(`table__column__heading`)[0];
                    match = heading.getAttribute(`href`).match(/group\/(.+?)\/(.+)/);
                    code = match[1];
                    communityName = match[2];
                    newGroups[communityName] = {
                        avatar: element.getElementsByClassName(`table_image_avatar`)[0].style.backgroundImage.match(/\/avatars\/(.+)_medium/)[1],
                        code: code,
                        name: heading.textContent
                    };
                    groups.push(communityName);
                }
                pagination = responseHtml.getElementsByClassName(`pagination__navigation`)[0];
                if (pagination && !pagination.lastElementChild.classList.contains(`is-selected`)) {
                    window.setTimeout(getGglGroups, 0, groups, ++nextPage, newGroups, url, callback);
                } else {
                    window.setTimeout(callback, 0, groups);
                }
            }
        });
    }

    /* [GWL] Giveaway Winners Link */

    function loadGwl() {
        if (esgst.userPath) {
            esgst.giveawayFeatures.push(addGwlLinks);
        }
    }

    function addGwlLinks(giveaways) {
        var giveaway, i, link, n;
        for (i = 0, n = giveaways.length; i < n; ++i) {
            giveaway = giveaways[i];
            if (!giveaway.innerWrap.getElementsByClassName(`esgst-gwl`)[0]) {
            if (giveaway.ended) {
                link = giveaway.url ? `href="${giveaway.url}/winners"` : ``;
                giveaway.entriesLink.insertAdjacentHTML(`afterEnd`, `
                    <a class="esgst-gwl" ${link}>
                        <i class="fa fa-trophy"></i>
                        <span>${giveaway.winners} winners</span>
                    </a>
                `);
            }
            }
        }
    }

    /* [GTS] Giveaway Templates */

    function addGtsButtonSection(button, rows) {
        var createGiveawayButton, delay, edit, endTime, input, message, preciseEndCheckbox, preciseEndOption, preciseStartCheckbox, preciseStartOption, reviewButton, section, set, startTime, warning;
        if (rows) {
            reviewButton = rows.lastElementChild;
            createGiveawayButton = createButtonSet(`green`, `grey`, `fa-plus-circle`, `fa-circle-o-notch fa-spin`, `Create Giveaway`, `Creating...`, function (callback) {
                var data;
                data = `xsrf_token=${esgst.xsrfToken}&next_step=3&`;
                data += `game_id=${document.querySelector(`[name="game_id"]`).value}&`;
                data += `type=${document.querySelector(`[name="type"]`).value}&`;
                data += `copies=${document.querySelector(`[name="copies"]`).value}&`;
                data += `key_string=${document.querySelector(`[name="key_string"]`).value}&`;
                data += `start_time=${document.querySelector(`[name="start_time"]`).value}&`;
                data += `end_time=${document.querySelector(`[name="end_time"]`).value}&`;
                data += `region=${document.querySelector(`[name="region"]`).value}&`;
                data += `group_string=${document.querySelector(`[name="group_string"]`).value}&`;
                data += `who_can_enter=${document.querySelector(`[name="who_can_enter"]`).value}&`;
                data += `whitelist=${document.querySelector(`[name="whitelist"]`).value}&`;
                data += `contributor_level=${document.querySelector(`[name="contributor_level"]`).value}&`;
                data += `description=${encodeURIComponent(document.querySelector(`[name="description"]`).value)}`;
                request(data, false, `/giveaways/new`, function (response) {
                    callback();
                    window.location.href = response.finalUrl;
                });
            });
            rows.appendChild(createGiveawayButton.set);
            button.addEventListener(`click`, function () {
                var days, details, hours, i, n, popup, savedTemplate, savedTemplates, template, templates, time, weeks;
                popup = createPopup_v6(`fa-file`, `View/apply templates:`, true);
                templates = insertHtml(popup.description, `beforeEnd`, `
                    <div class="esgst-text-left popup__keys__list"></div>
                `);
                savedTemplates = JSON.parse(GM_getValue(`templates`, `[]`));
                for (i = 0, n = savedTemplates.length; i < n; ++i) {
                    savedTemplate = savedTemplates[i];
                    details = ``;
                    if (savedTemplate.startTime) {
                        time = new Date(savedTemplate.startTime);
                        details += `${`0${time.getHours()}`.slice(-2)}:${`0${time.getMinutes()}`.slice(-2)}`;
                    } else {
                        details += `?`;
                    }
                    if (savedTemplate.endTime) {
                        time = new Date(savedTemplate.endTime);
                        details += `-${`0${time.getHours()}`.slice(-2)}:${`0${time.getMinutes()}`.slice(-2)}`;
                    } else {
                        details += `-?`;
                    }
                    hours = Math.floor(savedTemplate.duration / 3600000);
                    if (hours > 23) {
                        days = Math.floor(hours / 24);
                        if (days > 6) {
                            weeks = Math.floor(days / 7);
                            if (weeks === 1) {
                                details += `, 1 week`;
                            } else {
                                details += `, ${weeks} weeks`;
                            }
                        } else if (days === 1) {
                            details += `, 1 day`;
                        } else {
                            details += `, ${days} days`;
                        }
                    } else if (hours === 1) {
                        details += `, 1 hour`;
                    } else {
                        details += `, ${hours} hours`;
                    }
                    if (savedTemplate.region !== `0`) {
                        details += `, region restricted`;
                    }
                    if (savedTemplate.type === `everyone`) {
                        details += `, public`;
                    } else if (savedTemplate.type === `invite_only`) {
                        details += `, invite only`;
                    } else {
                        if (savedTemplate.whitelist === `1`) {
                            details += `, whitelist`;
                        }
                        if (savedTemplate.groups.trim()) {
                            details += `, groups`;
                        }
                    }
                    details += `, level ${savedTemplate.level}+`;
                    template = insertHtml(templates, `beforeEnd`, `
                        <div>
                            <div class="esgst-clickable" style="float: left;">
                                <strong>${savedTemplate.name}</strong>
                            </div>
                            <div class="esgst-clickable" style="float: right;">
                                <i class="fa fa-trash" title="Delete template"></i>
                            </div>
                            <div style="clear: both;"></div>
                            <div class="form__input-description">${details}</div>
                        </div>
                    `);
                    setGtsTemplate(popup, template, savedTemplates[i]);
                }
                popup.open();
            });
            section = insertHtml(reviewButton, `beforeBegin`, `
                <div class="form__row">
				    <div class="form__heading">
                        <div class="form__heading__number">9.</div>
                        <div class="form__heading__text">Template</div>
                    </div>
                    <div class="esgst-gts-section form__row__indent">
                        <div>
                            <span>Use precise start time.</span>
                        </div>
                        <div>
                            <span>Use precise end time.</span>
                        </div>
                        <input class="form__input-small" type="text"/>
                        <span class="esgst-hidden form__input-description">
                            <strong>Saved!</strong>
                        </span>
                        <div class="esgst-hidden form__row__error">
                            <i class="fa fa-exclamation-circle"></i> Please enter a name for the template.
                        </div>
                        <div class="form__input-description">The name of the template.</div>
					</div>
				</div>
            `).lastElementChild;
            preciseStartOption = section.firstElementChild;
            preciseEndOption = preciseStartOption.nextElementSibling;
            input = preciseEndOption.nextElementSibling;
            message = input.nextElementSibling;
            warning = message.nextElementSibling;
            preciseStartCheckbox = createCheckbox_v6(preciseStartOption, esgst.gts_preciseStart);
            preciseEndCheckbox = createCheckbox_v6(preciseEndOption, esgst.gts_preciseEnd);
            preciseStartOption.addEventListener(`click`, function () {
                setValue(`gts_preciseStart`, preciseStartCheckbox.input.checked);
                esgst.gts_preciseStart = preciseStartCheckbox.input.checked;
            });
            preciseEndOption.addEventListener(`click`, function () {
                setValue(`gts_preciseEnd`, preciseEndCheckbox.input.checked);
                esgst.gts_preciseEnd = preciseEndCheckbox.input.checked;
            });
            set = createButtonSet(`green`, `grey`, `fa-check`, `fa-circle-o-notch fa-spin`, `Save Template`, `Saving...`, function (callback) {
                var i, n, template, savedTemplates;
                if (input.value) {
                    warning.classList.add(`esgst-hidden`);
                    startTime = new Date(document.querySelector(`[name="start_time"]`).value).getTime();
                    endTime = new Date(document.querySelector(`[name="end_time"]`).value).getTime();
                    delay = startTime - Date.now();
                    if (delay < 0) {
                        delay = 0;
                    }
                    template = {
                        delay: delay,
                        description: document.querySelector(`[name="description"]`).value,
                        duration: endTime - startTime,
                        groups: document.querySelector(`[name="group_string"]`).value,
                        level: document.querySelector(`[name="contributor_level"]`).value,
                        name: input.value,
                        region: document.querySelector(`[name="region"]`).value,
                        type: document.querySelector(`[name="who_can_enter"]`).value,
                        whitelist: document.querySelector(`[name="whitelist"]`).value
                    };
                    if (preciseStartCheckbox.input.checked) {
                        template.startTime = startTime;
                    }
                    if (preciseEndCheckbox.input.checked) {
                        template.endTime = endTime;
                    }
                    createLock(`templateLock`, 300, function(deleteLock) {
                        savedTemplates = JSON.parse(GM_getValue(`templates`, `[]`));
                        for (i = 0, n = savedTemplates.length; i < n && savedTemplates[i].name !== template.name; ++i);
                        if (i < n) {
                            if (edit) {
                                savedTemplates[i] = template;
                                message.classList.remove(`esgst-hidden`);
                                window.setTimeout(function () {
                                    message.classList.add(`esgst-hidden`);
                                }, 2000);
                            } else if (window.confirm(`There already exists a template with this name. Do you want to overwrite it?`)) {
                                savedTemplates[i] = template;
                                message.classList.remove(`esgst-hidden`);
                                window.setTimeout(function () {
                                    message.classList.add(`esgst-hidden`);
                                }, 2000);
                            }
                        } else {
                            savedTemplates.push(template);
                            message.classList.remove(`esgst-hidden`);
                            window.setTimeout(function () {
                                message.classList.add(`esgst-hidden`);
                            }, 2000);
                        }
                        GM_setValue(`templates`, JSON.stringify(savedTemplates));
                        deleteLock();
                        callback();
                    });
                } else {
                    warning.classList.remove(`esgst-hidden`);
                    callback();
                }
            });
            section.appendChild(set.set);
            rows.insertBefore(createGiveawayButton.set, rows.firstElementChild);
            rows.insertBefore(reviewButton, rows.firstElementChild);
            createGiveawayButton.set.style.display = `inline-block`;
            createGiveawayButton.set.style.margin = `20px 5px`;
            reviewButton.style.margin = `20px 0`;
            var first, last;
            first = true;
            last = false;
            window.addEventListener(`scroll`, function () {
                if (window.scrollY < 138) {
                    if (!first) {
                        rows.insertBefore(createGiveawayButton.set, rows.firstElementChild);
                        rows.insertBefore(reviewButton, rows.firstElementChild);
                        createGiveawayButton.set.style.margin = `20px 5px`;
                        reviewButton.style.margin = `20px 0`;
                        first = true;
                        last = false;
                    }
                } else if (!last) {
                    rows.appendChild(reviewButton);
                    rows.appendChild(createGiveawayButton.set);
                    reviewButton.style.margin = ``;
                    createGiveawayButton.set.style.margin = `0 5px`;
                    last = true;
                    first = false;
                }
            });
        }

        function setGtsTemplate(popup, template, savedTemplate) {
            var applyButton, context, currentDate, days, deleteButton, groups, i, id, j, matches, n, newEndTime, newEndTimeBackup, newStartTime, savedTemplates, selected;
            applyButton = template.firstElementChild;
            deleteButton = applyButton.nextElementSibling;
            applyButton.addEventListener(`click`, function () {
                currentDate = new Date();
                if (savedTemplate.startTime && savedTemplate.endTime) {
                    startTime = new Date(savedTemplate.startTime);
                    newStartTime = new Date(currentDate.getTime());
                    newStartTime.setHours(startTime.getHours(), startTime.getMinutes(), startTime.getSeconds(), startTime.getMilliseconds());
                    if (newStartTime.getTime() < currentDate.getTime()) {
                        newStartTime.setDate(newStartTime.getDate() + 1);
                    }
                    endTime = new Date(savedTemplate.endTime);
                    newEndTime = new Date(newStartTime.getTime());
                    if (endTime.getMonth() !== startTime.getMonth()) {
                        days = (new Date(startTime.getFullYear(), startTime.getMonth() + 1, 0).getDate()) - newStartTime.getDate() + endTime.getDate();
                    } else {
                        days = endTime.getDate() - startTime.getDate();
                    }
                    newEndTime.setDate(newStartTime.getDate() + days);
                    newEndTime.setHours(endTime.getHours(), endTime.getMinutes(), endTime.getSeconds(), endTime.getMilliseconds());
                    document.querySelector(`[name="start_time"]`).value = formatDate(newStartTime);
                    document.querySelector(`[name="end_time"]`).value = formatDate(newEndTime);
                } else if (savedTemplate.startTime) {
                    startTime = new Date(savedTemplate.startTime);
                    newStartTime = new Date(currentDate.getTime());
                    newStartTime.setHours(startTime.getHours(), startTime.getMinutes(), startTime.getSeconds(), startTime.getMilliseconds());
                    if (newStartTime.getTime() < currentDate.getTime()) {
                        newStartTime.setDate(newStartTime.getDate() + 1);
                    }
                    newEndTime = new Date(newStartTime.getTime() + savedTemplate.duration);
                    document.querySelector(`[name="start_time"]`).value = formatDate(newStartTime);
                    document.querySelector(`[name="end_time"]`).value = formatDate(newEndTime);
                } else if (savedTemplate.endTime) {
                    endTime = new Date(savedTemplate.endTime);
                    newStartTime = new Date(currentDate.getTime() + savedTemplate.delay);
                    newEndTime = new Date(newStartTime.getTime() + savedTemplate.duration);
                    newEndTime.setHours(endTime.getHours(), endTime.getMinutes(), endTime.getSeconds(), endTime.getMilliseconds());
                    if (newEndTime.getTime() < newStartTime.getTime()) {
                        newEndTime.setDate(newEndTime.getDate() + 1);
                    }
                    document.querySelector(`[name="start_time"]`).value = formatDate(newStartTime);
                    document.querySelector(`[name="end_time"]`).value = formatDate(newEndTime);
                } else {
                    document.querySelector(`[name="start_time"]`).value = formatDate(new Date(currentDate.getTime() + savedTemplate.delay));
                    document.querySelector(`[name="end_time"]`).value = formatDate(new Date(currentDate.getTime() + savedTemplate.delay + savedTemplate.duration));
                }
                document.querySelector(`[data-checkbox-value="${savedTemplate.region}"]`).click();
                document.querySelector(`[data-checkbox-value="${savedTemplate.type}"]`).click();
                if (savedTemplate.type === `groups`) {
                    if (savedTemplate.whitelist === `1`) {
                        context = document.getElementsByClassName(`form__group--whitelist`)[0];
                        if (!context.classList.contains(`is-selected`)) {
                            context.click();
                        }
                    }
                    if (savedTemplate.groups) {
                        groups = savedTemplate.groups.trim().split(/\s/);
                        matches = document.getElementsByClassName(`form__group--steam`);
                        for (i = 0, n = matches.length; i < n; ++i) {
                            context = matches[i];
                            id = context.getAttribute(`data-group-id`);
                            selected = context.classList.contains(`is-selected`);
                            j = groups.indexOf(id);
                            if ((selected && j < 0) || (!selected && j >= 0)) {
                                context.click();
                            }
                        }
                    }
                }
                if (savedTemplate.level > 0) {
                    document.getElementsByClassName(`ui-slider-range`)[0].style.width = `${savedTemplate.level * 10}%`;
                    document.getElementsByClassName(`form__level`)[0].textContent = `level ${savedTemplate.level}`;
                    document.getElementsByClassName(`form__input-description--no-level`)[0].classList.add(`is-hidden`);
                    document.getElementsByClassName(`form__input-description--level`)[0].classList.remove(`is-hidden`);
                } else {
                    document.getElementsByClassName(`ui-slider-range`)[0].style.width = `0%`;
                    document.getElementsByClassName(`form__input-description--level`)[0].classList.add(`is-hidden`);
                    document.getElementsByClassName(`form__input-description--no-level`)[0].classList.remove(`is-hidden`);
                }
                document.getElementsByClassName(`ui-slider-handle`)[0].style.left = `${savedTemplate.level * 10}%`;
                document.querySelector(`[name="contributor_level"]`).value = savedTemplate.level;
                document.querySelector(`[name="description"]`).value = savedTemplate.description;
                input.value = savedTemplate.name;
                edit = true;
                popup.opened.close();
            });
            deleteButton.addEventListener(`click`, function () {
                if (window.confirm(`Are you sure you want to delete this template?`)) {
                    deleteButton.innerHTML = `
                        <i class="fa fa-circle-o-notch fa-spin"></i>
                    `;
                    createLock(`templateLock`, 300, function (deleteLock) {
                        savedTemplates = JSON.parse(GM_getValue(`templates`, `[]`));
                        for (i = 0, n = savedTemplates.length; i < n && savedTemplates[i].name !== savedTemplate.name; ++i);
                        savedTemplates.splice(i, 1);
                        GM_setValue(`templates`, JSON.stringify(savedTemplates));
                        deleteLock();
                        template.remove();
                        edit = false;
                    });
                }
            });
        }
    }

    /* [MGC] Multiple Giveaways Creator */

    function loadMgc() {
        if (esgst.newGiveawayPath) {
            addMgcSection();
        }
    }

    function addMgcSection() {
        var addButton, createButton, createTrainDescription, createTrainOption, createTrainSwitch, emptyButton, exportButton, importButton, mgc, removeIcon, rows, section, viewButton;
        rows = document.getElementsByClassName(`form__rows`)[0];
        if (rows) {
            mgc = {
                gameId: document.querySelector(`[name="game_id"]`),
                gameType: document.querySelector(`[name="type"]`),
                copies: document.querySelector(`[name="copies"]`),
                keys: document.querySelector(`[name="key_string"]`),
                startTime: document.querySelector(`[name="start_time"]`),
                endTime: document.querySelector(`[name="end_time"]`),
                region: document.querySelector(`[name="region"]`),
                type: document.querySelector(`[name="who_can_enter"]`),
                whitelist: document.querySelector(`[name="whitelist"]`),
                groups: document.querySelector(`[name="group_string"]`),
                level: document.querySelector(`[name="contributor_level"]`),
                description: document.querySelector(`[name="description"]`),
                datas: [],
                created: []
            };
            mgc.gameName = mgc.gameId.nextElementSibling;
            section = insertHtml(rows, `afterBegin`, `
                <div class="form__row">
				    <div class="form__heading">
                        <div class="form__heading__number">0.</div>
                        <div class="form__heading__text">
                            Create Multiple Giveaways <i class="fa fa-question-circle" title="How To Use\n
                            1. Fill the details of the giveaway (you can use templates for it).
                            2. Click 'Add Giveaway' or import giveaways.
                            3. Repeat steps 1-2 until all giveaways have been added.
                            4. Click 'Create Giveaways' and wait.\n
                            For train creations:
                            1. Enable 'Create train.'.
                            2. Fill the details of the giveaway and add the connection/counter style to the description (you can use templates for it).
                            3. Click 'Add Giveaway' or import giveaways.
                            4. Repeat steps 2-3 until all giveaways have been added.
                            5. Click 'Create Giveaways' and wait."></i>
                        </div>
                    </div>
                    <div class="esgst-gm-section form__row__indent">
                        <div>
                            <div></div>
                            <div class="esgst-hidden">
                                <div></div>
                                <div class="form__input-description markdown">
                                <div>Add the connection style to the description of the giveaway, wherever you want it to appear, using the format [ESGST-P]...[P]...[/P]...[/ESGST-P]...[ESGST-N]...[N]...[/N]...[/ESGST-N] or the simplified format [ESGST-P]...[/ESGST-P]...[ESGST-N]...[/ESGST-N], where [P]...[/P] and [N]...[/N] delimit the clickable link, [ESGST-P]...[/ESGST-P] and [ESGST-N]...[/ESGST-N] delimit the entire text area that includes the clickable link, and the "..." between [/ESGST-P] and [ESGST-N] delimit the separator between the links. If using the simplified format, [P]...[/P] and [N]...[/N] are not required and the entire text inside [ESGST-P]...[/ESGST-P] and [ESGST-N]...[/ESGST-N] will be turned into a link.</div>
                                <br/>
                                <div>Some examples:</div>
                                <br/>
                                <div>[ESGST-P]Previous[/ESGST-P] [ESGST-N]Next[/ESGST-N] -> Result will look like "<a href="">Previous</a> <a href="">Next</a>".</div>
                                <br/>
                                <div>### [ESGST-P]← [P]Previous[/P][/ESGST-P] | [ESGST-N][N]Next[/N] →[/ESGST-N] -> Result will look like "← <a href="">Previous</a> | <a href="">Next</a> →" in medium font size.</div>
                                <br/>
                                <div>[ESGST-P]Go [P]back[/P].[/ESGST-P] [ESGST-N]Go [N]forward[/N].[/ESGST-N] -> Result will look like "Go <a href="">back</a>. Go <a href="">forward</a>.".</div>
                                <br/>
                                <div>You can also add a counter style to the description, using the format [ESGST-C]...[/ESGST-C], where "..." delimits the separator between the numbers.</div>
                                <br/>
                                <div>Some examples:</div>
                                <br/>
                                <div>[ESGST-C] of [/ESGST-C] -> Result will look like "2 of 10".</div>
                                <br/>
                                <div>[ESGST-C]/[/ESGST-C] -> Result will look like "2/10".</div>
                                <br/>
                                <div>An example merging the connection with the counter:</div>
                                <br/>
                                <div>[ESGST-P]Previous[/ESGST-P] [ESGST-N]Next[/ESGST-N] ([ESGST-C] of [/ESGST-C]) -> Result will look like "<a href="">Previous</a> <a href="">Next</a> (2 of 10)".</div>
                            </div>
                            </div>
                        </div>
                    </div>
                </div>
            `).lastElementChild;
            createTrainOption = section.firstElementChild;
            createTrainDescription = createTrainOption.lastElementChild;
            if (esgst.mgc_createTrain) {
                createTrainDescription.classList.remove(`esgst-hidden`);
            }
            createTrainSwitch = createToggleSwitch(createTrainOption.firstElementChild, `mgc_createTrain`, false, `Create train.`, false, false, null, esgst.mgc_createTrain);
            createTrainSwitch.dependencies.push(createTrainDescription);
            createToggleSwitch(createTrainDescription.firstElementChild, `mgc_removeLinks`, false, `Remove previous/next links from the first/last wagons.`, false, false, `Disabling this keeps the links as plain text.`, esgst.mgc_removeLinks);
            addButton = createButtonSet(`green`, `grey`, `fa-plus-circle`, `fa-circle-o-notch fa-spin`, `Add`, `Adding...`, getMgcValues.bind(null, mgc));
            importButton = createButtonSet(`green`, `grey`, `fa-arrow-circle-up`, `fa-circle-o-notch fa-spin`, `Import`, `Importing...`, importMgcGiveaways.bind(null, mgc));
            exportButton = createButtonSet(`green`, `grey`, `fa-arrow-circle-down`, `fa-circle-o-notch fa-spin`, `Export`, `Exporting...`, exportMgcGiveaways.bind(null, mgc));
            emptyButton = createButtonSet(`green`, `grey`, `fa-trash`, `fa-circle-o-notch fa-spin`, `Empty`, `Emptying...`, emptyMgcGiveaways.bind(null, mgc));
            viewButton = createButtonSet(`green`, `grey`, `fa-eye`, `fa-circle-o-notch fa-spin`, `View Results`, `Opening...`, viewMgcResults.bind(null, mgc));
            createButton = createButtonSet(`green`, `grey`, `fa-arrow-circle-right`, `fa-circle-o-notch fa-spin`, `Create`, `Creating...`, createMgcGiveaways.bind(null, mgc, viewButton));
            viewButton.set.classList.add(`esgst-hidden`);
            section.appendChild(addButton.set);
            section.appendChild(importButton.set);
            section.appendChild(exportButton.set);
            section.appendChild(emptyButton.set);
            section.appendChild(createButton.set);
            section.appendChild(viewButton.set);
            mgc.giveaways = insertHtml(section, `beforeEnd`, `
                <div class="pinned-giveaways__outer-wrap">
                    <div class="pinned-giveaways__inner-wrap"></div>
                    <i class="fa fa-trash" title="Drag a giveaway here to remove it."></i>
                    <div class="form__input-description">
                        Giveaways successfully created will turn green, giveaways successfully connected will be strikethrough (for train creations) and giveaways that were not successfully created will turn red.
                    </div>
                </div>
            `).firstElementChild;
            removeIcon = mgc.giveaways.nextElementSibling;
            removeIcon.addEventListener(`dragenter`, removeMgcGiveaway.bind(null, mgc));
        }
    }

    function getMgcValues(mgc, callback) {
        var values;
        values = {
            gameId: mgc.gameId.value,
            gameType: mgc.gameType.value,
            copies: mgc.copies.value,
            keys: mgc.keys.value
        };
        if (values.gameId && ((values.gameType === `gift` && parseInt(values.copies) > 0) || (values.gameType === `key` && values.keys))) {
            values.gameName = mgc.gameName.value;
            values.startTime = mgc.startTime.value;
            values.endTime = mgc.endTime.value;
            values.region = mgc.region.value;
            values.type = mgc.type.value;
            values.whitelist = mgc.whitelist.value;
            values.groups = mgc.groups.value;
            values.level = mgc.level.value;
            values.description = mgc.description.value;
            addMgcGiveaway(mgc, values);
            mgc.copies.value = `1`;
            mgc.keys.value = ``;
        } else {
            createAlert(`You must first fill the details of the giveaway.`);
        }
        callback();
    }

    function addMgcGiveaway(mgc, values) {
        var data, details;
        details = `${values.gameName}\n`;
        if (values.gameType === `gift`) {
            details += `Gift\n${values.copies} Copies\n`;
        } else {
            details += `Keys\n${values.keys}\n`;
        }
        details += `\n${values.startTime} - ${values.endTime}\n`;
        if (values.region !== `0`) {
            details += `Region Restricted\n`;
        }
        if (values.type === `everyone`) {
            details += `Public\n`;
        } else if (values.type === `invite_only`) {
            details += `Invite Only\n`;
        } else {
            if (values.whitelist === `1`) {
                details += `Whitelist\n`;
            }
            if (values.groups.trim()) {
                details += `Groups\n`;
            }
        }
        details += `Level ${values.level}+\n\n${values.description}`;
            mgc.datas.push(`xsrf_token=${esgst.xsrfToken}&next_step=3&game_id=${values.gameId}&type=${values.gameType}&copies=${values.copies}&key_string=${values.keys}&start_time=${values.startTime}&end_time=${values.endTime}&region=${values.region}&who_can_enter=${values.type}&whitelist=${values.whitelist}&group_string=${values.groups}&contributor_level=${values.level}&description=${encodeURIComponent(values.description)}`);
        setMgcGiveaway(insertHtml(mgc.giveaways, `beforeEnd`, `
            <div class="esgst-gm-giveaway" draggable="true" title="${details}">${mgc.datas.length}</div>
        `), mgc);
    }

    function setMgcGiveaway(giveaway, mgc) {
        giveaway.addEventListener(`dragstart`, setMgcSource.bind(null, giveaway, mgc));
        giveaway.addEventListener(`dragenter`, getMgcSource.bind(null, giveaway, mgc));
    }

    function setMgcSource(giveaway, mgc) {
        mgc.source = giveaway;
    }

    function getMgcSource(giveaway, mgc) {
        var current;
        current = mgc.source;
        do {
            current = current.previousElementSibling;
            if (current && current === giveaway) {
                mgc.giveaways.insertBefore(mgc.source, giveaway);
                return;
            }
        } while (current);
        mgc.giveaways.insertBefore(mgc.source, giveaway.nextElementSibling);
    }

    function importMgcGiveaways(mgc, callback) {
        var counter, popup, progress, progressPanel, textArea;
        popup = createPopup_v6(`fa-arrow-up`, `Import Giveaways`, true);
        popup.description.insertAdjacentHTML(`beforeEnd`, `
            <div class="form__input-description">
                <div>Before importing, make sure you have filled the details of the giveaway (time, region, whitelist, group, level and description) or applied a template. Having different details for each giveaway is currently not supported.</div>
                <br/>
                <div>Separate giveaways with a new line. For gift giveaways, write the name of the game (exactly like it is on Steam) and the number of copies (only required if bigger than 1) in the format "(X Copies)" without the quotes and separated from the name of the game by a single space. For key giveaways, write the name of the game (exactly like it is on Steam) and put the key after or before the name of the game (depending on whether or not you have reverse position enabled), separated from the name of the game by a single space (Steam and HumbleBundle gift links are supported and work just like the keys, but they must start with "http://" or "https://" to be detected). Here's an example of how the input should be with reverse position disabled:</div>
                <br/>
                <div>Portal</div>
                <div>Portal ABCDE-FGHIJ-KLMNO</div>
                <div>Portal ABCDE-FGHIJ-PQRST</div>
                <div>Portal (2 Copies)</div>
                <div>Portal ABCDE-FGHIJ-UVWXY</div>
                <br/>
                <div>And here's an example of how it should be with reverse position enabled:</div>
                <br/>
                <div>Portal</div>
                <div>ABCDE-FGHIJ-KLMNO Portal</div>
                <div>ABCDE-FGHIJ-PQRST Portal</div>
                <div>Portal (2 Copies)</div>
                <div>ABCDE-FGHIJ-UVWXY Portal</div>
                <br/>
                <div>In both examples above, 5 giveaways will be created (one for each line) if the option to group keys is disabled. But if the option is enabled, only 4 giveaways will be created, because the two adjacent (next to each other) Portal keys will be grouped in a single giveaway. Note that the last Portal key will not grouped, as it is not adjacent to the other keys.</div>
            </div>
        `);
        createToggleSwitch(popup.description, `mgc_reversePosition`, false, `Enable reverse position (the keys come before the name of the game).`, false, false, ``, esgst.mgc_reversePosition);
        createToggleSwitch(popup.description, `mgc_groupKeys`, false, `Group adjacent keys for the same game.`, false, false, ``, esgst.mgc_groupKeys);
        textArea = insertHtml(popup.description, `beforeEnd`, `
            <textarea></textarea>
        `);
        progressPanel = insertHtml(popup.description, `beforeEnd`, `
            <div>
                <div class="esgst-progress-bar"></div>
                <div>
                    <span>0</span> of <span>0</span> giveaways imported.
                </div>
            </div>
        `);
        progress = {
            bar: progressPanel.firstElementChild,
        };
        counter = progressPanel.lastElementChild;
        progress.current = counter.firstElementChild;
        progress.total = progress.current.nextElementSibling;
        popup.description.appendChild(createButtonSet(`green`, `grey`, `fa-arrow-circle-up`, `fa-circle-o-notch fa-spin`, `Import`, `Importing...`, getMgcGiveaways.bind(null, mgc, popup, progress, textArea)).set);
        popup.onClose = callback;
        popup.open(focusMgcTextArea.bind(null, textArea));
    }

    function getMgcGiveaways(mgc, popup, progress, textArea, callback) {
        var giveaways, max, n, value;
        giveaways = textArea.value.split(/\n/);
        n = giveaways.length;
        if ($(progress.bar).progressbar(`instance`)) {
            max = $(progress.bar).progressbar(`option`, `max`);
            value = $(progress.bar).progressbar(`option`, `value`);
            if (value + n !== max) {
                $(progress.bar).progressbar({
                    max: value + n,
                    value: value
                });
                progress.total.textContent = value + n;
            }
        } else {
            $(progress.bar).progressbar({
                max: n
            });
            progress.total.textContent = n;
        }
        importMgcGiveaway(giveaways, 0, mgc, n, progress, textArea, popup.close, callback);
    }

    function importMgcGiveaway(giveaways, i, mgc, n, progress, textArea, mainCallback, callback) {
        var copies, copiesPos, found, giveaway, j, key, keyPos, match, name, namePos, regExp, values;
        if (i < n) {
            if (esgst.mgc_reversePosition) {
                regExp = /(([\d\w]{5}(-[\d\w]{5}){2,})\s)?((https?:\/\/.+?)\s)?(.+?)(\s\((\d+?)\sCopies\))?$/;
                keyPos = 2;
                namePos = 6;
                copiesPos = 8;
            } else {
                regExp = /(.+?)(\s\((\d+?)\sCopies\))?(\s([\d\w]{5}(-[\d\w]{5}){2,}))?(\s(https?:\/\/.+?))?$/;
                keyPos = 5;
                namePos = 1;
                copiesPos = 3;
            }
            match = giveaways[i].match(regExp);
            if (match) {
                key = match[keyPos] || match[keyPos + 3];
                name = match[namePos];
                copies = match[copiesPos];
                values = {
                    gameName: name,
                    startTime: mgc.startTime.value,
                    endTime: mgc.endTime.value,
                    region: mgc.region.value,
                    type: mgc.type.value,
                    whitelist: mgc.whitelist.value,
                    groups: mgc.groups.value,
                    level: mgc.level.value,
                    description: mgc.description.value
                };
                if (key) {
                    values.gameType = `key`;
                    values.keys = key;
                } else {
                    values.gameType = `gift`;
                    if (copies) {
                        values.copies = copies;
                    } else {
                    values.copies = `1`;
                    }
                }
                j = 1;
                if (esgst.mgc_groupKeys && key) {
                    do {
                        found = false;
                        giveaway = giveaways[i + 1];
                        if (giveaway) {
                            match = giveaway.match(regExp);
                            if (match) {
                                key = match[keyPos] || match[keyPos + 3];
                                if (key && match[namePos] === name) {
                                    found = true;
                                    values.keys += `\n${key}`;
                                    ++i;
                                    ++j;
                                }
                            }
                        }
                    } while (found);
                }
                request(`do=autocomplete_game&page_number=1&search_query=${name}`, false, `/ajax.php`, getMgcGiveaway.bind(null, giveaways, i, j, mgc, n, name, progress, textArea, values, mainCallback, callback));
            } else {
                createAlert(`The next giveaway is not in the right format. Please correct it and click on "Import" again to continue importing.`);
                callback();
            }
        } else {
            mainCallback();
        }
    }

    function getMgcGiveaway(giveaways, i, j, mgc, n, name, progress, textArea, values, mainCallback, callback, response) {
        var elements, k, numElements, value;
        elements = DOM.parse(JSON.parse(response.responseText).html).getElementsByClassName(`table__row-outer-wrap`);
        for (k = 0, numElements = elements.length; k < numElements && elements[k].getAttribute(`data-autocomplete-name`) !== name; ++k);
        if (k < numElements) {
            values.gameId = elements[k].getAttribute(`data-autocomplete-id`);
            addMgcGiveaway(mgc, values);
            value = $(progress.bar).progressbar(`option`, `value`) + j;
            $(progress.bar).progressbar(`option`, `value`, value);
            progress.current.textContent = value;
            do {
                textArea.value = textArea.value.replace(/^(.+?)\n/, ``);
                --j;
            } while (j > 0);
            window.setTimeout(importMgcGiveaway, 0, giveaways, ++i, mgc, n, progress, textArea, mainCallback, callback);
        } else {
            createAlert(`${name} was not found! Please correct the title of the game and click on "Import" again to continue importing (it must be exactly like on Steam).`);
            callback();
        }
    }

    function focusMgcTextArea(textArea) {
        textArea.focus();
    }

    function exportMgcGiveaways(mgc, callback) {
        var anchor, file, i, j, n, name, url, values;
        file = ``;
        for (i = 0, n = mgc.giveaways.children.length; i < n; ++i) {
            values = mgc.giveaways.children[i].title.split(/\n/);
            if (values[1] === `Gift`) {
                if (parseInt(values[2].match(/\d+/)[0]) > 1) {
                    file += `${values[0]} (${values[2]})\r\n`;
                } else {
                    file += `${values[0]}\r\n`;
                }
            } else {
                for (j = 2; values[j]; ++j) {
                    if (esgst.mgc_reversePosition) {
                        file += `${values[j]} ${values[0]}\r\n`;
                    } else {
                        file += `${values[0]} ${values[j]}\r\n`;
                    }
                }
            }
        }
        anchor = document.createElement(`a`);
        anchor.download = `giveaways.txt`;
        url = window.URL.createObjectURL(new Blob([file]));
        anchor.href = url;
        document.body.appendChild(anchor);
        anchor.click();
        anchor.remove();
        window.URL.revokeObjectURL(url);
        callback();
    }

    function emptyMgcGiveaways(mgc, callback) {
        if (window.confirm(`Are you sure you want to empty the creator?`)) {
            mgc.datas = [];
            mgc.created = [];
            mgc.giveaways.innerHTML = ``;
            mgc.copies.value = `1`;
            mgc.keys.value = ``;
        }
        callback();
    }

    function createMgcGiveaways(mgc, viewButton, callback) {
        mgc.copies.value = `1`;
        mgc.keys.value = ``;
        viewButton.set.classList.add(`esgst-hidden`);
        createMgcGiveaway(0, mgc, mgc.giveaways.children.length, completeMgcCreation.bind(null, mgc, viewButton, callback));
    }

    function createMgcGiveaway(i, mgc, n, callback) {
        var j;
        if (i < n) {
            if (!mgc.giveaways.children[i].classList.contains(`success`)) {
                j = parseInt(mgc.giveaways.children[i].textContent) - 1;
                request(mgc.datas[j].replace(/start_time=(.+?)&/, correctMgcTime), false, `/giveaways/new`, checkMgcCreation.bind(null, i, mgc, n, callback));
            } else {
                window.setTimeout(createMgcGiveaway, 0, ++i, mgc, n, callback);
            }
        } else if (esgst.mgc_createTrain) {
            createMgcTrain(0, mgc, mgc.created.length, callback);
        } else {
            callback();
        }
    }

    function correctMgcTime(fullMatch, match1) {
        if ((new Date(match1).getTime()) < Date.now()) {
            return `start_time=${formatDate(new Date())}&`;
        } else {
            return fullMatch;
        }
    }

    function checkMgcCreation(i, mgc, n, callback, response) {
        var errors, errorsTitle, giveaway, j, numErrors;
        giveaway = mgc.giveaways.children[i];
        if (response.finalUrl.match(/\/giveaways\/new/)) {
            giveaway.classList.add(`error`);
            errors = DOM.parse(response.responseText).getElementsByClassName(`form__row__error`);
            errorsTitle = `Errors:\n`;
            for (j = 0, numErrors = errors.length; j < numErrors; ++j) {
                errorsTitle += `${errors[j].textContent}\n`;
            }
            errorsTitle += `\n`;
            giveaway.title = `${errorsTitle}${giveaway.title}`;
        } else {
            giveaway.classList.add(`success`);
            mgc.created.push({
                giveaway: giveaway,
                url: response.finalUrl
            });
        }
        window.setTimeout(createMgcGiveaway, 0, ++i, mgc, n, callback);
    }

    function createMgcTrain(i, mgc, n, callback) {
        if (i >= n || n - 1 === 0) {
            callback();
        } else {
            request(null, false, mgc.created[i].url, createMgcWagon.bind(null, i, mgc, n, callback));
        }
    }

    function createMgcWagon(i, mgc, n, callback, response) {
        var description, id, replaceCallback, responseHtml;
        responseHtml = DOM.parse(response.responseText);
        id = responseHtml.querySelector(`[name="giveaway_id"]`).value;
        description = responseHtml.querySelector(`[name="description"]`).value;
        if (i === 0) {
            replaceCallback = getMgcNext;
        } else if (i === n - 1) {
            replaceCallback = getMgcPrevious;
        } else {
            replaceCallback = getMgcBoth;
        }
        description = description.replace(/\[ESGST-P\](.+?)\[\/ESGST-P\](.+?)\[ESGST-N\](.+?)\[\/ESGST-N\]/g, replaceCallback.bind(null, i, mgc));
        description = description.replace(/\[ESGST-C\](.+?)\[\/ESGST-C\]/g, getMgcCounter.bind(null, i, n));
        request(`xsrf_token=${esgst.xsrfToken}&do=edit_giveaway_description&giveaway_id=${id}&description=${encodeURIComponent(description)}`, false, `/ajax.php`, connectMgcWagon.bind(null, i, mgc, n, callback));
    }

    function getMgcNext(i, mgc, fullMatch, match1, match2, match3) {
        var match, next, nextPref, nextSuf;
        match = match3.match(/(.*?)\[N\](.+?)\[\/N\](.*?)$/);
        if (match) {
            nextPref = match[1];
            next = match[2];
            nextSuf = match[3];
        } else {
            nextPref = ``;
            next = match3;
            nextSuf = ``;
        }
        if (esgst.mgc_removeLinks) {
            return `${nextPref}[${next}](${mgc.created[i + 1].url})${nextSuf}`;
        } else {
            return `${match1}${match2}${nextPref}[${next}](${mgc.created[i + 1].url})${nextSuf}`;
        }
    }

    function getMgcPrevious(i, mgc, fullMatch, match1, match2, match3) {
        var match, prev, prevPref, prevSuf;
        match = match1.match(/(.*?)\[P\](.+?)\[\/P\](.*?)$/);
        if (match) {
            prevPref = match[1];
            prev = match[2];
            prevSuf = match[3];
        } else {
            prevPref = ``;
            prev = match1;
            prevSuf = ``;
        }
        if (esgst.mgc_removeLinks) {
            return `${prevPref}[${prev}](${mgc.created[i - 1].url})${prevSuf}`;
        } else {
            return `${prevPref}[${prev}](${mgc.created[i - 1].url})${prevSuf}${match2}${match3}`;
        }
    }

    function getMgcBoth(i, mgc, fullMatch, match1, match2, match3) {
        var match, next, nextPref, nextSuf, prev, prevPref, prevSuf;
        match = match1.match(/(.*?)\[P\](.+?)\[\/P\](.*?)$/);
        if (match) {
            prevPref = match[1];
            prev = match[2];
            prevSuf = match[3];
        } else {
            prevPref = ``;
            prev = match1;
            prevSuf = ``;
        }
        match = match3.match(/(.*?)\[N\](.+?)\[\/N\](.*?)$/);
        if (match) {
            nextPref = match[1];
            next = match[2];
            nextSuf = match[3];
        } else {
            nextPref = ``;
            next = match3;
            nextSuf = ``;
        }
        return `${prevPref}[${prev}](${mgc.created[i - 1].url})${prevSuf}${match2}${nextPref}[${next}](${mgc.created[i + 1].url})${nextSuf}`;
    }

    function getMgcCounter(i, n, fullMatch, match1) {
        return `${i + 1}${match1}${n}`;
    }

    function connectMgcWagon(i, mgc, n, callback) {
        mgc.created[i].giveaway.classList.add(`connected`);
        window.setTimeout(createMgcTrain, 0, ++i, mgc, n, callback);
    }

    function completeMgcCreation(mgc, viewButton, callback) {
        if (mgc.created.length) {
            viewButton.set.classList.remove(`esgst-hidden`);
        }
        callback();
    }

    function viewMgcResults(mgc, callback) {
        var html, i, n, popup, url;
        popup = createPopup_v6(`fa-eye`, `Results`);
        html = ``;
        for (i = 0, n = mgc.created.length; i < n; ++i) {
            url = mgc.created[i].url;
            html += `
                <div>
                    <a href="${url}">${url}</a>
                </div>
            `;
        }
        popup.description.insertAdjacentHTML(`beforeEnd`, `
            <div class="popup__keys__list">
                ${html}
            </div>
        `);
        popup.open();
        callback();
    }

    function removeMgcGiveaway(mgc) {
        if (window.confirm(`Are you sure you want to remove this giveaway?`)) {
            mgc.source.remove();
            mgc.source = null;
        }
    }

    /* [SGG] Stickied Giveaway Groups */

    function loadSgg() {
        if (esgst.newGiveawayPath && !document.getElementsByClassName(`table--summary`)[0]) {
            setSggGiveawayGroups();
        } else if (esgst.groupsPath) {
            esgst.endlessFeatures.push(setSggGroups);
            setSggGroups(document);
        }
    }

    function setSggGiveawayGroups() {
        var avatar, communityName, container, context, elements, i, id, key, n, savedGroups, separator, stickied;
        savedGroups = JSON.parse(GM_getValue(`groups`, `{}`));
        container = document.getElementsByClassName(`form__groups`)[0];
        separator = container.firstElementChild.nextElementSibling;
        elements = container.getElementsByClassName(`form__group--steam`);
        for (i = 0, n = elements.length; i < n; ++i) {
            context = elements[i];
            id = context.getAttribute(`data-group-id`);
            avatar = context.firstElementChild.style.backgroundImage;
            communityName = null;
            stickied = false;
            for (key in savedGroups) {
                if (avatar.match(savedGroups[key].avatar)) {
                    communityName = key;
                    if (savedGroups[key].stickied) {
                        stickied = true;
                    }
                    break;
                }
            }
            if (communityName) {
                if (stickied) {
                    if (context === separator) {
                        separator = separator.nextElementSibling;
                    }
                    container.insertBefore(context, separator);
                    addSggUnstickyButton(communityName, container, context, id, separator);
                } else {
                    addSggStickyButton(communityName, container, context, id, separator);
                }
            }
        }
    }

    function setSggGroups(context) {
        var avatar, communityName, element, elements, i, key, n, savedGroups, stickied;
        savedGroups = JSON.parse(GM_getValue(`groups`, `{}`));
        elements = context.getElementsByClassName(`table__row-inner-wrap`);
        for (i = 0, n = elements.length; i < n; ++i) {
            element = elements[i];
            avatar = element.getElementsByClassName(`table_image_avatar`)[0].style.backgroundImage;
            stickied = false;
            for (key in savedGroups) {
                if (avatar.match(savedGroups[key].avatar)) {
                    communityName = key;
                    if (savedGroups[key].stickied) {
                        stickied = true;
                    }
                    break;
                }
            }
            if (communityName) {
                if (stickied) {
                    addSggUnstickyButton(communityName, null, element);
                } else {
                    addSggStickyButton(communityName, null, element);
                }
            }
        }
    }

    function addSggStickyButton(communityName, container, context, id, separator, button) {
        if (button) {
            button.remove();
        }
        button = insertHtml(context, `afterBegin`, `
            <div class="esgst-sgg-sticky-button">
                <a title="Sticky group.">
                    <i class="fa fa-thumb-tack"></i>
                </a>
            </div>
        `);
        button.firstElementChild.addEventListener(`click`, stickySggGroup.bind(null, communityName, container, context, id, separator, button));
    }

    function addSggUnstickyButton(communityName, container, context, id, separator, button) {
        if (button) {
            button.remove();
        }
        button = insertHtml(context, `afterBegin`, `
            <div class="esgst-sgg-unsticky-button">
                <a title="Unsticky group.">
                    <i class="fa fa-thumb-tack"></i>
                </a>
            </div>
        `);
        button.firstElementChild.addEventListener(`click`, unstickySggGroup.bind(null, communityName, container, context, id, separator, button));
    }

    function stickySggGroup(communityName, container, context, id, separator, button, event) {
        var groups;
        event.stopPropagation();
        button.innerHTML = `
            <i class="fa fa-circle-o-notch fa-spin"></i>
        `;
        if (container) {
            if (context === separator) {
                separator = separator.nextElementSibling;
            }
            container.insertBefore(context, separator);
        }
        groups = {};
        groups[communityName] = {
            stickied: true
        };
        if (id) {
            groups[communityName].id = id;
        }
        lockAndSaveGroups(groups, false, addSggUnstickyButton.bind(null, communityName, container, context, id, separator, button));
    }

    function unstickySggGroup(communityName, container, context, id, separator, button, event) {
        var groups;
        event.stopPropagation();
        button.innerHTML = `
            <i class="fa fa-circle-o-notch fa-spin"></i>
        `;
        if (container) {
            container.insertBefore(context, separator);
            separator = separator.previousElementSibling;
        }
        groups = {};
        groups[communityName] = {
            stickied: false
        };
        if (id) {
            groups[communityName].id = id;
        }
        lockAndSaveGroups(groups, false, addSggStickyButton.bind(null, communityName, container, context, id, separator, button));
    }

    /* [RCVC] Real CV Calculator */

    function loadRcvc() {
        if (esgst.newGiveawayPath) {
            var table = document.getElementsByClassName(`table--summary`)[0], button;
            if (table) {
                var game = GM_getValue(`rcvcGame`);
                if (game) {
                    var type = game.type;
                    var id = game.id;
                    var i, n;
                    var headings = document.getElementsByClassName(`featured__heading__small`);
                    var copiesHeading, pointsHeading;
                    if (headings.length > 1) {
                        copiesHeading = headings[0];
                        pointsHeading = headings[1];
                    } else {
                        pointsHeading = headings[0];
                    }
                    var copies;
                    if (copiesHeading) {
                        copies = parseInt(copiesHeading.textContent.match(/\d+/)[0]);
                    } else {
                        copies = 1;
                    }
                    var value = parseInt(pointsHeading.textContent.match(/\d+/)[0]);
                    var games = JSON.parse(GM_getValue(`games`));
                    if (games[type][id] && games[type][id].bundled) {
                        value *= 0.15;
                    }
                    var user = {
                        Username: esgst.username,
                        SteamID64: esgst.steamId
                    };
                    var users = JSON.parse(GM_getValue(`users`));
                    var savedUser = users.users[user.SteamID64];
                    var sent = 0;
                    if (savedUser && savedUser.ugd && savedUser.ugd.sent && savedUser.ugd.sent[type][id]) {
                        var giveaways = savedUser.ugd.sent[type][id];
                        for (i = 0, n = giveaways.length; i < n; ++i) {
                            var giveaway = giveaways[i];
                            if (((giveaways.entries < 5) && !giveaway.inviteOnly && !giveaway.group && !giveaway.whitelist) ||
                                (giveaway.entries >= 5)
                            ) {
                                if (giveaway.entries >= giveaway.copies) {
                                    sent += giveaway.copies;
                                } else {
                                    sent += giveaway.entries;
                                }
                            }
                        }
                        if (sent > 5) {
                            for (i = 0, n = sent - 5; i < n; ++i) {
                                value *= 0.90;
                            }
                        }
                    }
                    var cv;
                    if (copies > 1) {
                        var total = copies + sent;
                        if (total > 5) {
                            n = total - 5;
                            cv = (copies - n) * value;
                            for (i = 0; i < n; ++i) {
                                value *= 0.90;
                                cv += value;
                            }
                        } else {
                            cv = value * copies;
                        }
                    } else if ((sent + 1) > 5) {
                        cv = value * 0.90;
                    } else {
                        cv = value;
                    }
                    cv = Math.round(cv * 100) / 100;
                    var html = `
                        <div class="table__row-outer-wrap">
                            <div class="table__row-inner-wrap">
                                <div class="table__column--width-medium table__column--align-top">
                                    <strong>Real CV</strong>
                                </div>
                                <div class="table__column--width-fill">You should get ~$${cv} real CV for this giveaway.</div>
                            </div>
                        </div>
                    `;
                    table.insertAdjacentHTML(`beforeEnd`, html);
                    button = document.getElementsByClassName(`js__submit-form`)[0];
                    button.addEventListener(`click`, function () {
                        GM_deleteValue(`rcvcGame`);
                    });
                }
            } else {
                button = document.getElementsByClassName(`js__submit-form`)[0];
                var input = document.querySelector(`[name="game_id"]`);
                button.addEventListener(`click`, function () {
                    var selectedId = input.value;
                    var selected = document.querySelector(`[data-autocomplete-id="${selectedId}"]`);
                    var info = getGameInfo(selected);
                    GM_setValue(`rcvcGame`, {
                        type: info.type,
                        id: info.id
                    });
                });
            }
        }
    }

    /* [UGS] Unsent Gifts Sender */

    function loadUgs() {
        if (esgst.newTicketPath) {
            setUGSObserver();
        }
    }

    function setUGSObserver() {
        document.getElementsByClassName("form__submit-button")[0].addEventListener("click", function () {
            var Winner, Rerolls;
            if (document.querySelector("[name='category_id']").value == 1) {
                Winner = document.querySelector("[name='reroll_winner_id']").value;
                Rerolls = GM_getValue("Rerolls", []);
                if (Rerolls.indexOf(Winner) < 0) {
                    Rerolls.push(Winner);
                    GM_setValue("Rerolls", Rerolls);
                }
            }
        });
    }

    function addUGSButton(UGSButton) {
        var Popup, UGS;
        Popup = createPopup();
        Popup.Icon.classList.add("fa-gift");
        Popup.Title.textContent = "Send unsent gifts:";
        UGS = {};
        createOptions(Popup.Options, UGS, [{
            Check: function () {
                return true;
            },
            Description: "Only send to users with 0 not activated / multiple wins.",
            Title: "This option will retrieve the results in real time, without using caches.",
            Name: "SendActivatedNotMultiple",
            Key: "SANM",
            ID: "UGS_SANM"
        }, {
            Check: function () {
                return true;
            },
            Description: "Only send to users who are whitelisted.",
            Title: "This option will use your whitelist cache.\nMake sure to sync it through the settings menu if you whitelisted a new user since the last sync.\n" + (
                "Whitelisted users get a pass for not activated / multiple wins."),
            Name: "SendWhitelist",
            Key: "SW",
            ID: "UGS_SW"
        }, {
            Check: function () {
                return true;
            },
            Description: "Only send to users who are still members of at least one of the groups for group giveaways.",
            Title: "This option will retrieve the results in real time.\n" + (
                "Group members get a pass for not activated / multiple wins and for not being whitelisted."),
            Name: "SendGroup",
            Key: "G",
            ID: "UGS_G"
        }]);
        createButton(Popup.Button, "fa-send", "Send", "fa-times-circle", "Cancel", function (Callback) {
            var Match;
            UGSButton.classList.add("esgst-busy");
            UGS.Progress.innerHTML = UGS.OverallProgress.innerHTML = "";
            UGS.Sent.classList.add("rhHidden");
            UGS.Unsent.classList.add("rhHidden");
            UGS.SentCount.textContent = UGS.UnsentCount.textContent = "0";
            UGS.SentUsers.innerHTML = UGS.UnsentUsers.innerHTML = "";
            UGS.Canceled = false;
            UGS.Giveaways = [];
            UGS.Checked = [];
            UGS.Winners = GM_getValue("Winners", {});
            Match = window.location.href.match(/page=(\d+)/);
            getUGSGiveaways(UGS, 1, Match ? parseInt(Match[1]) : 1, function () {
                var N;
                N = UGS.Giveaways.length;
                if (N > 0) {
                    if (UGS.G.checked) {
                        getUgsGiveawayGroups(UGS, 0, N, function () {
                            getUGSWinners(UGS, 0, N, function () {
                                UGSButton.classList.remove("esgst-busy");
                                UGS.Progress.innerHTML = UGS.OverallProgress.innerHTML = "";
                                GM_setValue("Winners", UGS.Winners);
                                Callback();
                            });
                        });
                    } else {
                        getUGSWinners(UGS, 0, N, function () {
                            UGSButton.classList.remove("esgst-busy");
                            UGS.Progress.innerHTML = UGS.OverallProgress.innerHTML = "";
                            GM_setValue("Winners", UGS.Winners);
                            Callback();
                        });
                    }
                } else {
                    UGSButton.classList.remove("esgst-busy");
                    UGS.Progress.innerHTML =
                        "<i class=\"fa fa-check-circle giveaway__column--positive\"></i> " +
                        "<span>You have no unsent gifts.</span>";
                    UGS.OverallProgress.innerHTML = "";
                    Callback();
                }
            });
        }, function () {
            clearInterval(UGS.Request);
            clearInterval(UGS.Save);
            UGS.Canceled = true;
            setTimeout(function () {
                UGS.Progress.innerHTML = UGS.OverallProgress.innerHTML = "";
            }, 500);
            UGSButton.classList.remove("esgst-busy");
        });
        UGS.Progress = Popup.Progress;
        UGS.OverallProgress = Popup.OverallProgress;
        createResults(Popup.Results, UGS, [{
            Icon: "<i class=\"fa fa-check-circle giveaway__column--positive\"></i> ",
            Description: "Sent gifts to ",
            Key: "Sent"
        }, {
            Icon: "<i class=\"fa fa-times-circle giveaway__column--negative\"></i> ",
            Description: "Did not send gifts to ",
            Key: "Unsent"
        }]);
        UGSButton.addEventListener("click", function () {
            UGS.Popup = Popup.popUp();
        });
    }

    function getUgsGiveawayGroups(ugs, i, n, callback) {
        if (i < n) {
            ugs.Giveaways[i].Groups = [];
            getNextUgsGiveawayGroupsPage(ugs, i, `${ugs.Giveaways[i].URL.replace(/\/winners/, ``)}/groups/search?page=`, 1, function () {
                window.setTimeout(getUgsGiveawayGroups, 0, ugs, ++i, n, callback);
            });
        } else {
            callback();
        }
    }

    function getNextUgsGiveawayGroupsPage(ugs, I, url, nextPage, callback, context) {
        if (context) {
            var matches = context.getElementsByClassName(`table__column__heading`);
            for (var i = 0, n = matches.length; i < n; ++i) {
                var title = matches[i].getAttribute(`href`).match(/\/group\/.+\/(.+)/)[1];
                ugs.Giveaways[I].Groups.push(title);
            }
            var paginationNavigation = context.getElementsByClassName(`pagination__navigation`)[0];
            if (paginationNavigation && !paginationNavigation.lastElementChild.classList.contains(`is-selected`)) {
                window.setTimeout(getNextUgsGiveawayGroupsPage, 0, ugs, I, url, nextPage, callback);
            } else {
                callback();
            }
        } else {
            ugs.Progress.innerHTML =
                "<i class=\"fa fa-circle-o-notch fa-spin\"></i> " +
                "<span>Getting " + ugs.Giveaways[I].Name + "'s groups...</span>";
            queueRequest(ugs, null, `${url}${nextPage}`, function (response) {
                var context = DOM.parse(response.responseText);
                window.setTimeout(getNextUgsGiveawayGroupsPage, 0, ugs, I, url, ++nextPage, callback, context);
            });
        }
    }

    function getUGSGiveaways(UGS, NextPage, CurrentPage, Callback, Context) {
        var Matches, N, I, Pagination;
        if (Context) {
            Matches = Context.getElementsByClassName("fa icon-red fa-warning");
            N = Matches.length;
            if (N > 0) {
                for (I = 0; I < N; ++I) {
                    UGS.Giveaways.push({
                        Name: Matches[I].closest(".table__row-inner-wrap").getElementsByClassName("table__column__heading")[0].firstChild.textContent.match(/(.+?)(\s\(.+\sCopies\))?$/)[1],
                        URL: Matches[I].nextElementSibling.getAttribute("href"),
                        Context: Matches[I]
                    });
                }
                Pagination = Context.getElementsByClassName("pagination__navigation")[0];
                if (Pagination && !Pagination.lastElementChild.classList.contains("is-selected")) {
                    window.setTimeout(getUGSGiveaways, 0, UGS, NextPage, CurrentPage, Callback);
                } else {
                    Callback();
                }
            } else {
                Callback();
            }
        } else if (!UGS.Canceled) {
            UGS.Progress.innerHTML =
                "<i class=\"fa fa-circle-o-notch\"></i> " +
                "<span>Retrieving unsent giveaways (page " + NextPage + ")...</span>";
            if (CurrentPage != NextPage) {
                if (!document.getElementById(`esgst-es-page-${NextPage}`)) {
                    queueRequest(UGS, null, "/giveaways/created/search?page=" + NextPage, function (Response) {
                        window.setTimeout(getUGSGiveaways, 0, UGS, ++NextPage, CurrentPage, Callback, DOM.parse(Response.responseText));
                    });
                } else {
                    window.setTimeout(getUGSGiveaways, 0, UGS, ++NextPage, CurrentPage, Callback);
                }
            } else {
                window.setTimeout(getUGSGiveaways, 0, UGS, ++NextPage, CurrentPage, Callback, document);
            }
        }
    }

    function checkUgsUserGroups(ugs, i, n, j, steamId64, callback) {
        if (i < n) {
            makeRequest(null, `http://steamcommunity.com/groups/${ugs.Giveaways[j].Groups[i]}/memberslistxml/?xml=1`, ugs, function (response) {
                var responseText = response.responseText;
                var reg = new RegExp(`<steamID64>${steamId64}</steamID64>`);
                if (reg.exec(responseText)) {
                    callback(true);
                } else {
                    window.setTimeout(checkUgsUserGroups, 0, ugs, ++i, n, j, steamId64, callback);
                }
            });
        } else {
            callback(false);
        }
    }

    function getUGSWinners(UGS, I, N, Callback) {
        if (!UGS.Canceled) {
            UGS.OverallProgress.textContent = I + " of " + N + " giveaways retrieved...";
            if (I < N) {
                UGS.Progress.innerHTML =
                    "<i class=\"fa fa-circle-o-notch fa-spin\"></i> " +
                    "<span>Retrieving winners...</span>";
                queueRequest(UGS, null, UGS.Giveaways[I].URL, function (Response) {
                    var ResponseHTML, Matches, Winners, J, NumMatches, WinnersKeys;
                    ResponseHTML = DOM.parse(Response.responseText);
                    Matches = ResponseHTML.getElementsByClassName("table__row-inner-wrap");
                    Winners = {};
                    for (J = 0, NumMatches = Matches.length; J < NumMatches; ++J) {
                        Winners[Matches[J].getElementsByClassName("table__column__heading")[0].textContent] = Matches[J].querySelector("[name='winner_id']").value;
                    }
                    if (NumMatches < 25) {
                        WinnersKeys = sortArray(Object.keys(Winners));
                        sendUGSGifts(UGS, 0, WinnersKeys.length, I, WinnersKeys, Winners, function () {
                            window.setTimeout(getUGSWinners, 0, UGS, ++I, N, Callback);
                        });
                    } else {
                        queueRequest(UGS, null, UGS.Giveaways[I].URL + "/search?page=2", function (Response) {
                            Matches = DOM.parse(Response.responseText).getElementsByClassName("table__row-inner-wrap");
                            for (J = 0, NumMatches = Matches.length; J < NumMatches; ++J) {
                                Winners[Matches[J].getElementsByClassName("table__column__heading")[0].textContent] = Matches[J].querySelector("[name='winner_id']").value;
                            }
                            WinnersKeys = sortArray(Object.keys(Winners));
                            sendUGSGifts(UGS, 0, WinnersKeys.length, I, WinnersKeys, Winners, function () {
                                window.setTimeout(getUGSWinners, 0, UGS, ++I, N, Callback);
                            });
                        });
                    }
                });
            } else {
                Callback();
            }
        }
    }

    function sendUGSGifts(UGS, I, N, J, Keys, Winners, Callback) {
        var Reroll, SANM, SW, G;
        if (!UGS.Canceled) {
            UGS.OverallProgress.innerHTML = I + " of " + N + " winners checked...";
            if (I < N) {
                UGS.Progress.innerHTML =
                    "<i class=\"fa fa-circle-o-notch fa-spin\"></i> " +
                    "<span>Sending " + UGS.Giveaways[J].Name + " to " + Keys[I] + "...</span>";
                Reroll = GM_getValue("Rerolls", []).indexOf(Winners[Keys[I]]) < 0;
                if (Reroll && (UGS.Checked.indexOf(Keys[I] + UGS.Giveaways[J].Name) < 0)) {
                    SANM = UGS.SANM.checked;
                    SW = UGS.SW.checked;
                    G = UGS.G.checked;
                    if (SANM || SW || G) {
                        var user = {
                            username: Keys[I],
                            values: {}
                        };
                        getSteamId(null, false, user, function() {
                                if (G && UGS.Giveaways[J].Groups.length) {
                                    saveUser(null, null, user, function () {
                                        UGS.Progress.innerHTML =
                                            "<i class=\"fa fa-circle-o-notch fa-spin\"></i> " +
                                            "<span>Checking if user is a member of one of the " + UGS.Giveaways[J].Name + " groups...</span>";
                                        checkUgsUserGroups(UGS, 0, UGS.Giveaways[J].Groups.length, J, user.steamId, function (member) {
                                            if (member) {
                                                sendUGSGift(UGS, Winners, Keys, I, J, N, Callback);
                                            } else {
                                                UGS.Checked.push(Keys[I] + UGS.Giveaways[J].Name);
                                                UGS.Unsent.classList.remove("rhHidden");
                                                UGS.UnsentCount.textContent = parseInt(UGS.UnsentCount.textContent) + 1;
                                                UGS.UnsentUsers.insertAdjacentHTML(
                                                    "beforeEnd",
                                                    "<span><a href=\"/user/" + Keys[I] + "\">" + Keys[I] + "</a> (<a href=\"" + UGS.Giveaways[J].URL + "\">" + UGS.Giveaways[J].Name + "</a>)</span>"
                                                );
                                                sendUGSGifts(UGS, ++I, N, J, Keys, Winners, Callback);
                                            }
                                        });
                                    });
                                } else if (SANM) {
                                    var savedUser = getUser(null, user);
                                    if (SW && savedUser && savedUser.whitelisted) {
                                        sendUGSGift(UGS, Winners, Keys, I, J, N, Callback);
                                    } else {
                                        var namwc;
                                        if (savedUser) {
                                            namwc = savedUser.namwc;
                                        }
                                            if (!namwc) {
                                                namwc = {
                                                    results: {}
                                                };
                                            }
                                            checkNAMWCNotActivated(UGS, namwc, user.username, function (namwc) {
                                                checkNAMWCMultiple(UGS, namwc, user.username, function (namwc) {
                                                    user.values = {
                                                        namwc: namwc
                                                    };
                                                    saveUser(null, null, user, function () {
                                                            if (namwc.results.activated && namwc.results.notMultiple) {
                                                                sendUGSGift(UGS, Winners, Keys, I, J, N, Callback);
                                                            } else {
                                                                UGS.Checked.push(Keys[I] + UGS.Giveaways[J].Name);
                                                                UGS.Unsent.classList.remove("rhHidden");
                                                                UGS.UnsentCount.textContent = parseInt(UGS.UnsentCount.textContent) + 1;
                                                                UGS.UnsentUsers.insertAdjacentHTML(
                                                                    "beforeEnd",
                                                                    "<span><a href=\"/user/" + Keys[I] + "\">" + Keys[I] + "</a> (<a href=\"" + UGS.Giveaways[J].URL + "\">" +
                                                                    UGS.Giveaways[J].Name + "</a>)</span>"
                                                                );
                                                                sendUGSGifts(UGS, ++I, N, J, Keys, Winners, Callback);
                                                            }
                                                        });
                                                    });
                                                });
                                    }
                                } else if (users.users[steamId].whitelisted) {
                                    sendUGSGift(UGS, Winners, Keys, I, J, N, Callback);
                                } else {
                                    UGS.Checked.push(Keys[I] + UGS.Giveaways[J].Name);
                                    UGS.Unsent.classList.remove("rhHidden");
                                    UGS.UnsentCount.textContent = parseInt(UGS.UnsentCount.textContent) + 1;
                                    UGS.UnsentUsers.insertAdjacentHTML(
                                        "beforeEnd",
                                        "<span><a href=\"/user/" + Keys[I] + "\">" + Keys[I] + "</a> (<a href=\"" + UGS.Giveaways[J].URL + "\">" + UGS.Giveaways[J].Name + "</a>)</span>"
                                    );
                                    sendUGSGifts(UGS, ++I, N, J, Keys, Winners, Callback);
                                }
                        });
                    } else {
                        sendUGSGift(UGS, Winners, Keys, I, J, N, Callback);
                    }
                } else {
                    UGS.Checked.push(Keys[I] + UGS.Giveaways[J].Name);
                    UGS.Unsent.classList.remove("rhHidden");
                    UGS.UnsentCount.textContent = parseInt(UGS.UnsentCount.textContent) + 1;
                    UGS.UnsentUsers.insertAdjacentHTML(
                        "beforeEnd",
                        "<span><a href=\"/user/" + Keys[I] + "\">" + Keys[I] + "</a> (" + (!Reroll ? ("Being rerolled for <a href=\"" + UGS.Giveaways[J].URL + "\">" + UGS.Giveaways[J].Name +
                            "</a>.)") : ("Already won <a href=\"" + UGS.Giveaways[J].URL + "\">" +
                                UGS.Giveaways[J].Name + "</a> from you.)")) + "</span>"
                    );
                    sendUGSGifts(UGS, ++I, N, J, Keys, Winners, Callback);
                }
            } else {
                Callback();
            }
        }
    }

    function sendUGSGift(UGS, Winners, Keys, I, J, N, Callback) {
        if (!UGS.Canceled) {
            queueRequest(UGS, "xsrf_token=" + esgst.xsrfToken + "&do=sent_feedback&action=1&winner_id=" + Winners[Keys[I]], "/ajax.php", function () {
                var Key;
                UGS.Checked.push(Keys[I] + UGS.Giveaways[J].Name);
                UGS.Sent.classList.remove("rhHidden");
                UGS.SentCount.textContent = parseInt(UGS.SentCount.textContent) + 1;
                UGS.SentUsers.insertAdjacentHTML(
                    "beforeEnd",
                    "<span><a href=\"/user/" + Keys[I] + "\">" + Keys[I] + "</a> (<a href=\"" + UGS.Giveaways[J].URL + "\">" + UGS.Giveaways[J].Name + "</a>)</span>"
                );
                UGS.Giveaways[J].Context.className = "fa fa-check-circle icon-green";
                UGS.Giveaways[J].Context.nextElementSibling.textContent = "Sent";
                Key = UGS.Giveaways[J].URL.match(/\/giveaway\/(.+?)\//)[1];
                if (!UGS.Winners[Key]) {
                    UGS.Winners[Key] = [];
                }
                if (UGS.Winners[Key].indexOf(Keys[I]) < 0) {
                    UGS.Winners[Key].push(Keys[I]);
                }
                sendUGSGifts(UGS, ++I, N, J, Keys, Winners, Callback);
            });
        }
    }

    /* [ER] Entries Remover */

    function loadEr() {
        if (esgst.er_s && esgst.profilePath) {
            addERButton();
        }
    }

    function addERButton(Button) {
        var HTML, Popup, URL, CurrentPage, NextPage, RemovedEntries, ownedGames;
        if (!Button) {
            Button = document.getElementsByClassName(`form__sync-default`)[0];
        }
        if (Button) {
            Popup = createPopup();
            Popup.Popup.classList.add(`rhPopupLarge`);
            Popup.Icon.classList.add(`fa-times`);
            Popup.Title.textContent = `Remove entries for owned games:`;
            URL = `/giveaways/entered/search?page=`;
            if (window.location.pathname.match(/^\/giveaways\/entered/)) {
                CurrentPage = esgst.currentPage;
            } else {
                CurrentPage = 0;
            }
            NextPage = 1;
            Button.addEventListener(`click`, openPopup);
        }

        function openPopup() {
            Button.classList.add(`esgst-busy`);
            Popup.popUp(getResult);
        }

        function getResult() {
            Popup.Progress.textContent = `Syncing owned games...`;
            syncGames(Popup, checkResult);
        }

        function checkResult(Result, games) {
            Popup.OverallProgress.textContent = `Removing entries...`;
            switch (Result) {
                case 1:
                    ownedGames = games;
                    RemovedEntries = {};
                    checkNextPage();
                    break;
                case 2:
                    showResult(`<strong>0 new games found.</strong>`);
                    break;
                case 3:
                    showResult(`<strong>You either are not logged in on Steam or do not have a Steam API key set.</strong>`);
                    break;
            }
        }

        function showResult(Result) {
            Popup.Progress.innerHTML = Popup.OverallProgress.innerHTML = ``;
            Popup.Results.innerHTML = Result;
            Button.classList.remove(`esgst-busy`);
        }

        function checkNextPage() {
            Popup.Progress.innerHTML = `
<i class="fa fa-circle-o-notch fa-spin"></i>
<span>Checking page ${NextPage}...</span>
`;
            if (CurrentPage != NextPage) {
                queueRequest(Popup, null, `${URL}${NextPage}`, getNextPage);
            } else {
                goToNextPage(document);
            }
        }

        function getNextPage(Response) {
            goToNextPage(DOM.parse(Response.responseText));
        }

        function goToNextPage(Context) {
            ++NextPage;
            setTimeout(getEntries, 0, Context);
        }

        function getEntries(Context) {
            var Entries, N;
            Entries = Context.getElementsByClassName(`table__remove-default`);
            N = Entries.length;
            if (N > 0) {
                checkEntries(0, N, Entries, Context);
            } else {
                checkRemovedEntries();
            }
        }

        function checkEntries(I, N, Entries, Context) {
            checkEntry();

            function checkEntry() {
                var Entry, Container, Image, Match, ID, Type, Title, Code, Data, Pagination;
                if (I < N) {
                    Entry = Entries[I];
                    Container = Entry.closest(`.table__row-inner-wrap`);
                    Image = Container.getElementsByClassName(`global__image-inner-wrap`)[0];
                    if (Image) {
                        Match = Image.getAttribute(`style`).match(/\/(apps|subs)\/(\d+)/);
                        ID = parseInt(Match[2]);
                        if (ownedGames[Match[1]][ID] && ownedGames[Match[1]][ID].owned) {
                            Type = Match[1].replace(/s$/, ``);
                            Title = Container.getElementsByClassName(`table__column__heading`)[0].textContent;
                            if (!RemovedEntries[ID]) {
                                RemovedEntries[ID] = {
                                    Type: Type,
                                    Title: Title,
                                    Entries: 0
                                };
                            }
                            ++RemovedEntries[ID].Entries;
                            if (Context == document) {
                                Entry.click();
                                goToNextEntry();
                            } else {
                                Code = Container.querySelector(`[name="code"]`).value;
                                Data = `xsrf_token=${esgst.xsrfToken}&do=entry_delete&code=${Code}`;
                                queueRequest(Popup, Data, `/ajax.php`, goToNextEntry);
                            }
                        } else {
                            goToNextEntry();
                        }
                    } else {
                        goToNextEntry();
                    }
                } else {
                    Pagination = Context.getElementsByClassName(`pagination__navigation`)[0];
                    if (Pagination && !Pagination.lastElementChild.classList.contains(`is-selected`)) {
                        checkNextPage();
                    } else {
                        checkRemovedEntries();
                    }
                }
            }

            function goToNextEntry() {
                ++I;
                setTimeout(checkEntry, 0);
            }
        }

        function checkRemovedEntries() {
            var Results, N, Key, Entry, Result;
            Results = [];
            N = 0;
            for (Key in RemovedEntries) {
                Entry = RemovedEntries[Key];
                Result = `
<a href="https://store.steampowered.com/${Entry.Type}/${Key}" target="_blank">
${Entry.Title} (${Entry.Entries})
</a>
`;
                Results.push(Result);
                N += Entry.Entries;
            }
            if (Results.length) {
                Result = `
<strong>${N} entries removed:</strong>
<span class="popup__actions">
${Results.join(``)}
</span>
`;
                showResult(Result);
            } else {
                showResult(`<strong>0 entries removed.</strong>`);
            }
        }
    }

    /* [SAL] Steam Activation Links */

    function loadSal() {
        if (esgst.wonPath) {
            esgst.endlessFeatures.push(addSalLinks);
            addSalLinks(document);
            esgst.endlessFeatures.push(addSalObservers);
            addSalObservers(document);
        }
    }

    function addSalObservers(context) {
        var elements, i, n;
        elements = context.getElementsByClassName(`view_key_btn`);
        for (i = 0, n = elements.length; i < n; ++i) {
            addSalObserver(elements[i]);
        }
    }

    function addSalObserver(button) {
        var context, element, interval, match;
        context = button.closest(`.table__row-outer-wrap`);
        button.addEventListener(`click`, function() {
            interval = window.setInterval(function() {
                if (!context.contains(button)) {
                    window.clearInterval(interval);
                    element = context.querySelector(`[data-clipboard-text]`);
                    match = element.getAttribute(`data-clipboard-text`).match(/^[\d\w]{5}(-[\d\w]{5}){2,}$/);
                    if (match) {
                        addSalLink(element, match[0]);
                    }
                }
            }, 100);
        });
    }

    function addSalLinks(context) {
        var i, element, elements, match, n;
        elements = context.querySelectorAll(`[data-clipboard-text]`);
        for (i = 0, n = elements.length; i < n; ++i) {
            element = elements[i];
            match = element.getAttribute(`data-clipboard-text`).match(/^[\d\w]{5}(-[\d\w]{5}){2,}$/);
            if (match) {
                addSalLink(element, match[0]);
            }
        }
    }

    function addSalLink(element, match) {
        var link, textArea;
        if ((element.nextElementSibling && !element.nextElementSibling.classList.contains(`esgst-sal`)) || !element.nextElementSibling) {
            link = insertHtml(element, `afterEnd`, `
                <a class="esgst-sal" href="steam://open/activateproduct" title="Activate on Steam">
                    <i class="fa fa-steam"></i>
                </a>
            `);
            link.addEventListener(`click`, function () {
                textArea = insertHtml(document.body, `beforeEnd`, `
                    <textarea></textarea>
                `);
                textArea.value = match;
                textArea.select();
                document.execCommand(`copy`);
                textArea.remove();
            });
        }
    }

    /* [CEWGD] Created/Entered/Won Giveaway Details */

    function loadCewgd() {
        if (esgst.createdPath || esgst.enteredPath || esgst.wonPath) {
            esgst.giveawayFeatures.push(getCewgdDetails);
            esgst.endlessFeatures.push(addCewgdHeading);
            addCewgdHeading(document);
            GM_addStyle(`
                .table__column--width-small {
                    width: 8%;
                }
            `);
        }
    }

    function addCewgdHeading(context) {
        var table;
        table = context.getElementsByClassName(`table__heading`)[0];
        if (table && !table.getElementsByClassName(`esgst-cewgd-heading`)[0]) {
            table.firstElementChild.insertAdjacentHTML(`afterEnd`, `
                <div class="table__column--width-small text-center esgst-cewgd-heading">Type</div>
                <div class="table__column--width-small text-center esgst-cewgd-heading">Level</div>
            `);
        }
    }

    function getCewgdDetails(giveaways, main) {
        var i, n;
        if (main) {
            var cewgd = {
                count: 0,
                giveaways: [],
                savedGiveaways: JSON.parse(GM_getValue(`giveaways`, `{}`))
            };
            for (i = 0, n = giveaways.length; i < n; ++i) {
                getCewgdDetail(cewgd, giveaways, i);
            }
            window.setTimeout(checkCewgdComplete.bind(null, cewgd, n));
        }
    }

    function checkCewgdComplete(cewgd, total) {
        var currentGiveaway, i, key, n, savedGiveaways;
        if (cewgd.count === total) {
            createLock(`giveawayLock`, 300, function (deleteLock) {
                savedGiveaways = JSON.parse(GM_getValue(`giveaways`, `{}`));
                for (i = 0, n = cewgd.giveaways.length; i < n; ++i) {
                    currentGiveaway = cewgd.giveaways[i];
                    if (savedGiveaways[currentGiveaway.code]) {
                        for (key in currentGiveaway) {
                            savedGiveaways[currentGiveaway.code][key] = currentGiveaway[key];
                        }
                    } else {
                        savedGiveaways[currentGiveaway.code] = currentGiveaway;
                    }
                }
                GM_setValue(`giveaways`, JSON.stringify(savedGiveaways));
                deleteLock();
            });
        } else {
            window.setTimeout(checkCewgdComplete.bind(null, cewgd, total));
        }
    }

    function getCewgdDetail(cewgd, giveaways, i) {
        var code, currentCode, currentGiveaway, currentGiveaways, giveaway, key, responseHtml, savedGiveaways;
            giveaway = giveaways[i];
            code = giveaway.code;
            if (cewgd.savedGiveaways[code] && cewgd.savedGiveaways[code].gameSteamId) {
                addCewgdDetails(giveaway, cewgd.savedGiveaways[code]);
                ++cewgd.count;
            } else {
                request(null, false, giveaway.url, function (response) {
                    responseHtml = DOM.parse(response.responseText);
                    currentGiveaways = getGiveaways(responseHtml, false, response.finalUrl);
                    if (currentGiveaways.length) {
                        currentGiveaway = currentGiveaways[0];
                        cewgd.giveaways.push(currentGiveaway);
                        addCewgdDetails(giveaway, currentGiveaway);
                        ++cewgd.count;
                    } else {
                        giveaways[i].panel.insertAdjacentHTML(`afterEnd`, `
                            <div class="table__column--width-small text-center">-</div>
                            <div class="table__column--width-small text-center">-</div>
                        `);
                        ++cewgd.count;
                    }
               });
            }
    }

    function addCewgdDetails(giveaway, details) {
        var type;
        giveaway.headingName.insertAdjacentHTML(`beforeEnd`, `
            <span>(${details.points}P)</span>
            <a class="giveaway__icon" href="http://store.steampowered.com/${details.gameType.slice(0, -1)}/${details.gameSteamId}">
                <i class="fa fa-steam"></i>
            </a>
        `);
        if (details.inviteOnly) {
            if (details.regionRestricted) {
                type = `Invite + Region`;
            } else {
                type = `Invite`;
            }
        } else if (details.group) {
            if (details.whitelist) {
                if (details.regionRestricted) {
                    type = `Group + Whitelist + Region`;
                } else {
                    type = `Group + Whitelist`;
                }
            } else if (details.regionRestricted) {
                type = `Group + Region`;
            } else {
                type = `Group`;
            }
        } else if (details.whitelist) {
            if (details.regionRestricted) {
                type = `Whitelist + Region`;
            } else {
                type = `Whitelist`;
            }
        } else if (details.regionRestricted) {
            type = `Region`;
        } else {
            type = `Public`;
        }
        giveaway.panel.insertAdjacentHTML(`afterEnd`, `
            <div class="table__column--width-small text-center">${type}</div>
            <div class="table__column--width-small text-center">${details.level}+</div>
        `);
        if (esgst.enteredPath || esgst.wonPath) {
            giveaway.endTimeColumn.insertAdjacentHTML(`beforeEnd`, `
                by <a class="table__column__secondary-link" href="/user/${details.creator}">${details.creator}</a>
            `);
        }
        if (type.match(/Group/) && esgst.ggl) {
            giveaway.group = true;
            getGglGiveaways([giveaway]);
        }
    }

    /* [ITADI] Is There Any Deal? Info */

    function loadItadi() {
        if (esgst.giveawayPath) {
            esgst.giveawayFeatures.push(getItadiInfo);
        }
    }

    function getItadiInfo(giveaways, main) {
        var game, games, giveaway, loading, plain;
        if (main) {
            giveaway = giveaways[0];
            if (giveaway) {
                games = JSON.parse(GM_getValue(`games`));
                game = games[giveaway.type][giveaway.id];
                plain = getItadiPlain(giveaway.name);
                if (game && game.itadi && ((esgst.itadi_h && typeof game.itadi.historical !== `undefined`) || !esgst.itadi_h) && (Date.now() - game.itadi.lastCheck < 86400000)) {
                    addItadiInfo(game.itadi, plain);
                } else {
                    loading = insertHtml(esgst.sidebar, `beforeEnd`, `
                        <h3 class="sidebar__heading">
                            <i class="fa fa-circle-o-notch fa-spin"></i> Loading Is There Any Deal? info...
                        </h3>
                    `);
                    request(null, true, `https://isthereanydeal.com/ajax/game/info?plain=${plain}`, function (infoResponse) {
                        if (esgst.itadi_h) {
                            request(null, true, `https://isthereanydeal.com/ajax/game/price?plain=${plain}`, function (priceResponse) {
                                loadItadiInfo(giveaway, infoResponse, loading, plain, priceResponse);
                            });
                        } else {
                            loadItadiInfo(giveaway, infoResponse, loading, plain);
                        }
                    });
                }
            }
        }
    }

    function loadItadiInfo(giveaway, infoResponse, loading, plain, priceResponse) {
        var bundles, current, currentBundle, currentBundles, currentDeal, currentDeals, date, deals, found, games, heading, headings, historical, i, infoHtml, itadi, n, name, parent, priceHtml, tag;
        infoHtml = DOM.parse(infoResponse.responseText);
        deals = [];
        currentDeals = infoHtml.getElementsByClassName(`new`);
        n = currentDeals.length;
        if (n > 0) {
            for (i = 0; i < n; ++i) {
                currentDeal = currentDeals[i];
                deals.push({
                    price: currentDeal.textContent,
                    source: currentDeal.closest(`.row`).firstElementChild.firstElementChild.textContent
                });
            }
            deals.sort(function (a, b) {
                a = parseFloat(a.price.replace(/(\$|\£|\€)/, ``));
                b = parseFloat(b.price.replace(/(\$|\£|\€)/, ``));
                if (a < b) {
                    return -1;
                } else if (a > b) {
                    return 1;
                } else {
                    return 0;
                }
            });
            current = deals[0];
        } else {
            current = null;
        }
        if (esgst.itadi_h && priceResponse) {
            priceHtml = DOM.parse(priceResponse.responseText);
            headings = priceHtml.getElementsByTagName(`th`);
            n = headings.length;
            if (n > 0) {
                found = false;
                for (i = 0; i < n && !found; ++i) {
                    heading = headings[i];
                    if (heading.textContent === `Lowest price`) {
                        found = true;
                        parent = heading.parentElement;
                        historical = {
                            date: parent.getElementsByClassName(`date`)[0].textContent,
                            price: parent.getElementsByClassName(`primary`)[0].textContent,
                            source: parent.getElementsByClassName(`shopTitle`)[0].textContent
                        };
                    }
                }
                if (!found) {
                    historical = null;
                }
            } else {
                historical = null;
            }
        } else {
            historical = null;
        }
        bundles = [];
        currentBundles = infoHtml.getElementsByClassName(`bundle-head`);
        n = currentBundles.length;
        if (n > 0) {
            for (i = 0; i < n; ++i) {
                currentBundle = currentBundles[i];
                tag = currentBundle.firstElementChild;
                if (tag.textContent === `bundle`) {
                    date = tag.nextElementSibling;
                    name = date.nextElementSibling.firstElementChild;
                    bundles.push({
                        date: date.textContent.replace(/expired\s/, ``),
                        id: name.getAttribute(`href`).match(/\d+/)[0],
                        name: name.textContent
                    });
                }
            }
            if (!bundles.length) {
                bundles = null;
            }
        } else {
            bundles = null;
        }
        itadi = {
            bundles: bundles,
            current: current,
            historical: historical,
            lastCheck: Date.now()
        };
        createLock(`gameLock`, 300, function (deleteLock) {
            games = JSON.parse(GM_getValue(`games`));
            if (!games[giveaway.type][giveaway.id]) {
                games[giveaway.type][giveaway.id] = {};
            }
            games[giveaway.type][giveaway.id].itadi = itadi;
            GM_setValue(`games`, JSON.stringify(games));
            deleteLock();
            loading.remove();
            addItadiInfo(itadi, plain);
        });
    }

    function addItadiInfo(itadi, plain) {
        var bundle, bundlesHtml, bundlesItem, currentHtml, currentItem, historicalHtml, historicalItem, i, n;
        if (itadi.current) {
            currentItem = `
                <li class="sidebar__navigation__item">
				    <a class="sidebar__navigation__item__link" href="https://isthereanydeal.com/#/page:game/info?plain=${plain}">
					    <div class="sidebar__navigation__item__name">${itadi.current.source}</div>
					    <div class="sidebar__navigation__item__underline"></div>
                        <div class="sidebar__navigation__item__count">${itadi.current.price}</div>
				    </a>
				</li>
            `;
        } else {
            currentItem = `There are no current deals for this game.`;
        }
        currentHtml = `
            <h3 class="sidebar__heading">Best Current Deal</h3>
            <ul class="sidebar__navigation">
                ${currentItem}
            </ul>
        `;
        if (esgst.itadi_h) {
            if (itadi.historical) {
                historicalItem = `
                    <li class="sidebar__navigation__item">
					    <a class="sidebar__navigation__item__link" href="https://isthereanydeal.com/#/page:game/price?plain=${plain}">
						    <div class="sidebar__navigation__item__name">${itadi.historical.source}</div>
						    <div class="sidebar__navigation__item__underline"></div>
                            <div class="sidebar__navigation__item__count">${itadi.historical.price} (${itadi.historical.date})</div>
						</a>
					</li>
                `;
            } else {
                historicalItem = `There is no price history for this game.`;
            }
            historicalHtml = `
                <h3 class="sidebar__heading">Historical Lowest Price</h3>
                <ul class="sidebar__navigation">
                    ${historicalItem}
                </ul>
            `;
        } else {
            historicalHtml = ``;
        }
        if (itadi.bundles) {
            bundlesItem = ``;
            for (i = 0, n = itadi.bundles.length; i < n; ++i) {
                bundle = itadi.bundles[i];
                bundlesItem += `
				    <li class="sidebar__navigation__item">
					    <a class="sidebar__navigation__item__link" href="https://isthereanydeal.com/specials/#/filter:id/${bundle.id}">
						    <div class="sidebar__navigation__item__name">${bundle.name}</div>
							<div class="sidebar__navigation__item__underline"></div>
                            <div class="sidebar__navigation__item__count">${bundle.date}</div>
						</a>
					</li>
               `;
            }
        } else {
            bundlesItem = `This game has never been in a bundle.`;
        }
        bundlesHtml = `
            <h3 class="sidebar__heading">Bundles</h3>
            <ul class="sidebar__navigation">
                ${bundlesItem}
            </ul>
        `;
        esgst.sidebar.insertAdjacentHTML(`beforeEnd`, `
            ${currentHtml}${historicalHtml}${bundlesHtml}
        `);
    }

    function getItadiPlain(name) {
        var numbers;
        numbers = [`0`, `i`, `ii`, `iii`, `iv`, `v`, `vi`, `vii`, `viii`, `ix`];
        return name.toLowerCase().replace(/\sthe|the\s/g, ``).replace(/\s/g, ``).replace(/\d/g, function (m) {
            return numbers[m];
        }).replace(/\&/g, `and`).replace(/\+/g, `plus`).replace(/[^\d\w]/g, ``);
    }

    /* [NPTH] Next/Previous Train Hotkeys */

    function loadNpth() {
        var description, element, elements, i, n, next, nextMatch, previous, previousMatch;
        if (esgst.giveawayCommentsPath) {
            description = document.getElementsByClassName(`page__description`)[0];
            if (description) {
                elements = description.querySelectorAll(`[href*="/giveaway/"]`);
                for (i = 0, n = elements.length; i < n; ++i) {
                    element = elements[i];
                    previousMatch = element.textContent.toLowerCase().match(/prev|back|less|<|←/);
                    if (previousMatch) {
                        previous = element;
                    } else {
                        nextMatch = element.textContent.toLowerCase().match(/next|forw|more|>|→/);
                        if (nextMatch) {
                            next = element;
                        }
                    }
                }
                if (previous || next) {
                    document.addEventListener(`keydown`, loadNpthGiveaway.bind(null, next, previous));
                }
            }
        }
    }

    function loadNpthGiveaway(next, previous, event) {
        if (!event.target.closest(`input, textarea`)) {
            if (event.key === esgst.npth_previousKey) {
                if (previous) {
                    if (event.ctrlKey) {
                        window.open(previous.getAttribute(`href`));
                    } else {
                        window.location.href = previous.getAttribute(`href`);
                    }
                } else {
                    createAlert(`No previous link found.`);
                }
            } else if (event.key === esgst.npth_nextKey) {
                if (next) {
                    if (event.ctrlKey) {
                        window.open(next.getAttribute(`href`));
                    } else {
                        window.location.href = next.getAttribute(`href`);
                    }
                } else {
                    createAlert(`No next link found.`);
                }
            }
        }
    }

    /* [TGE] Train Giveaways Extractor */

    function extractTgeGiveaways(tge) {
        if (!tge.popup) {
            tge.popup = createPopup_v6(`fa-train`, `Choo choo!`);
            tge.results = insertHtml(tge.popup.description, `beforeEnd`, `<div class="esgst-text-left"></div>`);
            if (esgst.gf) {
                addGfContainer(tge.results);
            }
            tge.set = createButtonSet(`green`, `grey`, `fa-search`, `fa-times`, `Extract`, `Cancel`, startExtracting.bind(null, tge), completeExtraction.bind(null, tge)).set;
            tge.popup.description.appendChild(tge.set);
        }
        tge.popup.open();
    }

    function startExtracting(tge, callback) {
        tge.button.classList.add(`esgst-busy`);
        tge.progress = insertHtml(tge.popup.description, `beforeEnd`, `
            <div>
                <i class="fa fa-circle-o-notch fa-spin"></i>
                <span>0</span> giveaways extracted.
            </div>
        `).lastElementChild;
        tge.visited = [];
        tge.bump = ``;
        getTgeGiveaways(tge, document, window.location.href, completeExtraction.bind(null, tge, callback));
    }

    function completeExtraction(tge, callback) {
        tge.button.classList.remove(`esgst-busy`);
        tge.progress.previousElementSibling.remove();
        callback();
        tge.set.remove();
        tge.set = null;
        loadEndlessFeatures(tge.results);
        tge.results.insertAdjacentHTML(`afterBegin`, `
            <div class="markdown" style="text-align: center;">
                <h2>
                    <a href="${tge.bump}">Bump</a>
                </h2>
            </div>
        `);
        tge.results.insertAdjacentHTML(`beforeEnd`, `
            <div class="markdown" style="text-align: center;">
                <h2>
                    <a href="${tge.bump}">Bump</a>
                </h2>
            </div>
        `);
    }

    function getTgeGiveaways(tge, context, url, callback) {
        var bump, description, elements, giveaway, giveaways, i, n, url;
        tge.visited.push(url.match(/\/giveaway\/(.+?)\//)[1]);
        if (context !== document) {
            tge.progress.textContent = parseInt(tge.progress.textContent) + 1;
            giveaway = buildGiveaway(context, url);
            if (giveaway) {
                esgst.popupGiveaways.push(getGiveawayInfo(insertHtml(tge.results, `beforeEnd`, giveaway.html).firstElementChild, document).giveaway);
            }
            tge.popup.reposition();
        }
        description = context.getElementsByClassName(`page__description`)[0];
        if (description) {
            giveaways = [];
            elements = description.querySelectorAll(`[href*="/giveaway/"]`);
            for (i = 0, n = elements.length; i < n; ++i) {
                url = elements[i].getAttribute(`href`);
                if (tge.visited.indexOf(url.match(/\/giveaway\/(.+?)\//)[1]) < 0) {
                    giveaways.push(url);
                }
            }
            if (!tge.bump) {
                bump = description.querySelector(`[href*="/discussion/"]`);
                if (bump) {
                    tge.bump = bump.getAttribute(`href`);
                }
            }
            n = giveaways.length;
            if (n > 0) {
                continueTgeGiveaways(giveaways, 0, n, tge, callback);
            } else {
                callback();
            }
        } else {
            callback();
        }
    }

    function continueTgeGiveaways(giveaways, i, n, tge, callback) {
        if (i < n) {
            request(null, false, giveaways[i], getTgeGiveaway.bind(null, giveaways, i, n, tge, callback));
        } else {
            callback();
        }
    }

    function getTgeGiveaway(giveaways, i, n, tge, callback, response) {
        window.setTimeout(getTgeGiveaways, 0, tge, DOM.parse(response.responseText), response.finalUrl, continueTgeGiveaway.bind(null, giveaways, i, n, tge, callback));
    }

    function continueTgeGiveaway(giveaways, i, n, tge, callback) {
        window.setTimeout(continueTgeGiveaways, 0, giveaways, ++i, n, tge, callback);        
    }

    /* [GESL] Giveaway Error Search Links (by Royalgamer06) */

    function loadGesl() {
        var Context, Term;
        if (esgst.giveawayPath && document.querySelector(".table.table--summary")) {
            Context = document.getElementsByClassName("table__column__secondary-link")[0];
            Term = encodeURIComponent(Context.innerHTML);
            document.getElementsByClassName("table__row-outer-wrap")[0].insertAdjacentHTML(
                "afterEnd",
                `<div class="table__row-outer-wrap">
                    <div class="table__row-inner-wrap">
                        <div class="table__column--width-small">
                            <strong>Search Links</strong>
                        </div>
                        <div class="table__column--width-fill">
                            <a href="https://www.steamgifts.com/giveaways/search?q=` + Term + `" target="_blank">
                                <i class="fa"><img src="https://cdn.steamgifts.com/img/favicon.ico"></i>
                            </a>&nbsp;
                            <a href="https://steamdb.info/search/?a=app&amp;q=` + Term + `" target="_blank">
                                <i class="fa"><img src="https://steamdb.info/static/logos/favicon-16x16.png"></i>
                            </a>&nbsp;
                            <a href="http://store.steampowered.com/search/?term=` + Term + `" target="_blank">
                                <i class="fa fa-steam"></i>
                            </a>
                        </div>
                    </div>
                </div>`
            );
        }
    }

    /* [AS] Archive Searcher */

    function loadAs(ASButton) {
        var Popup, Category, AS;
        Popup = createPopup();
        Popup.Popup.style.width = "600px";
        Popup.Icon.classList.add("fa-folder");
        Category = window.location.pathname.match(/^\/archive\/(coming-soon|open|closed|deleted)/);
        Popup.Title.textContent = "Search archive" + (Category ? (" for " + Category[1] + " giveaways") : "") + ":";
        Popup.TextInput.classList.remove("rhHidden");
        AS = {};
        createOptions(Popup.Options, AS, [{
            Check: function () {
                return true;
            },
            Description: "Search by AppID.",
            Title: "If unchecked, a search by exact title will be performed.",
            Key: "AIS",
            Name: "AppIDSearch",
            ID: "AS_AIS"
        }]);
        createButton(Popup.Button, "fa-search", "Search", "fa-times-circle", "Cancel", function (Callback) {
            ASButton.classList.add("esgst-busy");
            AS.Progress.innerHTML = AS.OverallProgress.innerHTML = AS.Results.innerHTML = "";
            AS.Popup.reposition();
            AS.Canceled = false;
            AS.Query = Popup.TextInput.value;
            if (AS.Query) {
                if (AS.AIS.checked) {
                    AS.Progress.innerHTML =
                        "<i class=\"fa fa-circle-o-notch fa-spin\"></i> " +
                        "<span>Retrieving game title...</span>";
                    makeRequest(null, "https://steamcommunity.com/app/" + AS.Query, AS.Progress, function (Response) {
                        var Title;
                        Title = DOM.parse(Response.responseText).getElementsByClassName("apphub_AppName")[0];
                        if (Title) {
                            AS.Query = Title.textContent;
                            setASSearch(AS, ASButton, Callback);
                        } else {
                            ASButton.classList.remove("esgst-busy");
                            AS.Progress.innerHTML =
                                "<i class=\"fa fa-times-circle\"></i> " +
                                "<span>Game title not found. Make sure you are entering a valid AppID. For example, 229580 is the AppID for Dream (http://steamcommunity.com/app/229580).</span>";
                            Callback();
                        }
                    });
                } else {
                    setASSearch(AS, ASButton, Callback);
                }
            } else {
                ASButton.classList.remove("esgst-busy");
                AS.Progress.innerHTML =
                    "<i class=\"fa fa-times-circle\"></i> " +
                    "<span>Please enter a title / AppID.</span>";
                Callback();
            }
        }, function () {
            clearInterval(AS.Request);
            AS.Canceled = true;
            setTimeout(function () {
                AS.Progress.innerHTML = "";
            }, 500);
            ASButton.classList.remove("esgst-busy");
        });
        AS.Progress = Popup.Progress;
        AS.OverallProgress = Popup.OverallProgress;
        AS.Results = Popup.Results;
        ASButton.addEventListener("click", function () {
            AS.Popup = Popup.popUp(function () {
                Popup.TextInput.focus();
            });
        });
    }

    function setASSearch(AS, ASButton, Callback) {
        AS.Query = ((AS.Query.length >= 50) ? AS.Query.slice(0, 50) : AS.Query).toLowerCase();
        searchASGame(AS, window.location.href.match(/(.+?)(\/search.+?)?$/)[1] + "/search?q=" + encodeURIComponent(AS.Query) + "&page=", 1, function () {
            ASButton.classList.remove("esgst-busy");
            AS.Progress.innerHTML = "";
            Callback();
        });
    }

    function searchASGame(AS, URL, NextPage, Callback) {
        if (!AS.Canceled) {
            AS.Progress.innerHTML =
                "<i class=\"fa fa-circle-o-notch fa-spin\"></i> " +
                "<span>Loading page " + NextPage + "...</span>";
            queueRequest(AS, null, URL + NextPage, function (Response) {
                var ResponseHTML, Matches, I, N, Title, Pagination;
                ResponseHTML = DOM.parse(Response.responseText);
                Matches = ResponseHTML.getElementsByClassName("table__row-outer-wrap");
                for (I = 0, N = Matches.length; I < N; ++I) {
                    Title = Matches[I].getElementsByClassName("table__column__heading")[0].textContent.match(/(.+?)( \(.+ Copies\))?$/)[1];
                    if (Title.toLowerCase() == AS.Query) {
                        AS.Results.appendChild(Matches[I].cloneNode(true));
                        loadEndlessFeatures(AS.Results.lastElementChild);
                        AS.Popup.reposition();
                    }
                }
                AS.OverallProgress.textContent = AS.Results.children.length + " giveaways found...";
                Pagination = ResponseHTML.getElementsByClassName("pagination__navigation")[0];
                if (Pagination && !Pagination.lastElementChild.classList.contains("is-selected")) {
                    searchASGame(AS, URL, ++NextPage, Callback);
                } else {
                    Callback();
                }
            });
        }
    }

    /* [ADOTS] Active Discussions On Top/Sidebar */

    function loadAdots() {
        var elements, i, icon, n, parent;
        if (esgst.activeDiscussions) {
            esgst.activeDiscussions.classList.remove(`widget-container--margin-top`);
            esgst.activeDiscussions.classList.add(`esgst-adots`);
            if (esgst.adots_index === 0) {
                parent = esgst.activeDiscussions.parentElement;
                parent.insertBefore(esgst.activeDiscussions, parent.firstElementChild);
            } else {
                esgst.activeDiscussions.style.width = `${esgst.sidebar.offsetWidth}px`;
                esgst.sidebar.insertAdjacentHTML(`beforeEnd`, `
                    <h3 class="sidebar__heading">
                        Active Discussions <a class="esgst-float-right sidebar__navigation__item__name" href="/discussions">More</a>
                    </h3>
                `);
                esgst.activeDiscussions.firstElementChild.firstElementChild.remove();
                esgst.activeDiscussions.firstElementChild.firstElementChild.firstElementChild.remove();
                elements = esgst.activeDiscussions.getElementsByClassName(`table__column--last-comment`);
                for (i = 0, n = elements.length; i < n; ++i) {
                    icon = elements[0].getElementsByClassName(`table__last-comment-icon`)[0];
                    if (icon) {
                        icon.classList.add(`esgst-float-right`);
                        elements[0].previousElementSibling.appendChild(icon);
                    }
                    elements[0].remove();
                }
                esgst.sidebar.appendChild(esgst.activeDiscussions);
            }
        }
    }

    /* [DS] Discussions Sorter */

    function addDsButton(button) {
        var i, n;
        button.addEventListener(`click`, function () {
            esgst.discussions.sort(function (a, b) {
                if (a.createdTime > b.createdTime) {
                    return -1;
                } else if (a.createdTime < b.createdTime) {
                    return 1;
                } else {
                    return 0;
                }
            });
            for (i = 0, n = esgst.discussions.length; i < n; ++i) {
                esgst.discussions[i].outerWrap.parentElement.appendChild(esgst.discussions[i].outerWrap);
            }
        });
    }

    /* [DH] Discussions Highlighter */

    function loadDh() {
        var button, code, comments, container, heading, source;
            button = insertHtml(document.getElementsByClassName(`nav__absolute-dropdown`)[1], `beforeEnd`, `
                <div class="nav__row esgst-dh-view-button">
				    <i class="icon-yellow fa fa-fw fa-star"></i>
					<div class="nav__row__summary">
					    <p class="nav__row__summary__name">Highlighted Discussions</p>
					    <p class="nav__row__summary__description">View your highlighted discussions.</p>
					</div>
				</div>
            `);
            button.addEventListener(`click`, function() {
                var discussions, i, keys, popup, set;
                popup = createPopup_v6(`fa-star`, `Highlighted Discussions`);
                popup.highlightedDiscussions = insertHtml(popup.description, `afterBegin`, `
                    <div class="table esgst-text-left">
                        <div class="table__heading">
							<div class="table__column--width-fill">Summary</div>
							<div class="table__column--width-small text-center">Comments</div>
						</div>
                    </div>
                `);
                discussions = JSON.parse(GM_getValue(`comments`)).discussions;
                keys = Object.keys(discussions);
                i = 0;
                set = createButtonSet(`green`, `grey`, `fa-plus`, `fa-circle-o-notch fa-spin`, `Load more...`, `Loading more...`, function (callback) {
                    getDhHighlightedDiscussions(discussions, i, i, keys, i + 5, popup, function (value) {
                        i = value;
                        if (i > keys.length) {
                            set.set.remove();
                        }
                        callback();
                    });
                });
                popup.description.appendChild(set.set);
                popup.open();
                set.trigger();
            });
            if (esgst.discussionPath) {
                comments = JSON.parse(GM_getValue(`comments`)).discussions;
                source = window.location.pathname.match(/^\/discussion\/(.+?)(\/.*)?$/);
                if (source) {
                    code = source[1];
                    container = document.getElementsByClassName(`page__heading`)[0];
                    heading = container.getElementsByClassName(`page__heading__breadcrumbs`)[0];
                    if (comments[code] && comments[code].highlighted) {
                        highlightDhDiscussion(code, heading);
                        addDhUnhighlightButton(code, heading, container);
                    } else {
                        addDhHighlightButton(code, heading, container);
                    }
                }
            }
            esgst.discussionFeatures.push(getDhDiscussions);
    }

    function getDhDiscussions(discussions) {
        var i, n, savedDiscussions;
        savedDiscussions = JSON.parse(GM_getValue(`comments`)).discussions;
        for (i = 0, n = discussions.length; i < n; ++i) {
            getDhDiscussion(discussions[i], savedDiscussions);
        }
    }

    function getDhDiscussion(discussion, savedDiscussions) {
        if (savedDiscussions[discussion.code] && savedDiscussions[discussion.code].highlighted) {
            highlightDhDiscussion(discussion.code, discussion.outerWrap);
            addDhUnhighlightButton(discussion.code, discussion.outerWrap, discussion.heading.parentElement);
        } else {
            addDhHighlightButton(discussion.code, discussion.outerWrap, discussion.heading.parentElement);
        }
    }

    function highlightDhDiscussion(code, context, save) {
        if (save) {
            createLock(`commentLock`, 300, function(deleteLock) {
                var comments;
                comments = JSON.parse(GM_getValue(`comments`));
                if (!comments.discussions[code]) {
                    comments.discussions[code] = {
                        comments: {}
                    };
                }
                comments.discussions[code].highlighted = true;
                GM_setValue(`comments`, JSON.stringify(comments));
                context.classList.add(`esgst-dh-highlighted`);
                deleteLock();
            });
        } else {
            context.classList.add(`esgst-dh-highlighted`);
        }
    }

    function unhighlightDhDiscussion(code, context, save) {
        if (save) {
            createLock(`commentLock`, 300, function(deleteLock) {
                var comments;
                comments = JSON.parse(GM_getValue(`comments`));
                delete comments.discussions[code].highlighted;
                GM_setValue(`comments`, JSON.stringify(comments));
                context.classList.remove(`esgst-dh-highlighted`);
                deleteLock();
            });
        } else {
            context.classList.remove(`esgst-dh-highlighted`);
        }
    }

    function addDhHighlightButton(code, container, context) {
        var button;
        if (!context.getElementsByClassName(`esgst-dh-button`)[0]) {
            button = insertHtml(context, `afterBegin`, `
                <div class="esgst-dh-button" title="Click to highlight this discussion">
                    <i class="fa fa-star-o"></i>
                <div>
            `);
            button.addEventListener(`click`, function() {
                highlightDhDiscussion(code, container, true);
                button.remove();
                addDhUnhighlightButton(code, container, context);
            });
        }
    }

    function addDhUnhighlightButton(code, container, context) {
        var button;
        if (!context.getElementsByClassName(`esgst-dh-button`)[0]) {
            button = insertHtml(context, `afterBegin`, `
                <div class="esgst-dh-button" title="Click to unhighlight this discussion">
                    <i class="fa fa-star"></i>
                </div>
            `);
            button.addEventListener(`click`, function() {
                unhighlightDhDiscussion(code, container, true);
                button.remove();
                addDhHighlightButton(code, container, context);
            });
        }
    }

    function getDhHighlightedDiscussions(discussions, i, j, keys, n, popup, callback) {
        var key;
        if (i < n) {
            key = keys[j];
            if (key) {
                if (discussions[key].highlighted) {
                    request(null, false, `/discussion/${key}/`, function(response) {
                        var breadcrumbs, categoryLink, context, usernameLink;
                        context = DOM.parse(response.responseText);
                        breadcrumbs = context.getElementsByClassName(`page__heading__breadcrumbs`);
                        categoryLink = breadcrumbs[0].firstElementChild.nextElementSibling.nextElementSibling;
                        usernameLink = context.getElementsByClassName(`comment__username`)[0].firstElementChild;
                        popup.highlightedDiscussions.insertAdjacentHTML(`beforeEnd`, `
                            <div>
                                <div class="table__row-outer-wrap">
    						        <div class="table__row-inner-wrap">
	    						        <div>
                                            ${context.getElementsByClassName(`global__image-outer-wrap`)[0].outerHTML}
                                        </div>
				    			        <div class="table__column--width-fill">
    								        <h3>
                                                <a class="table__column__heading" href="/discussion/${key}/">${categoryLink.nextElementSibling.nextElementSibling.firstElementChild.textContent}</a>
                                            </h3>
			    					        <p>
                                                <a class="table__column__secondary-link" href="${categoryLink.getAttribute(`href`)}">${categoryLink.textContent}</a> -
                                                ${context.querySelector(`.comment [data-timestamp]`).outerHTML} ago by
                                                <a class="table__column__secondary-link" href="${usernameLink.getAttribute(`href`)}">${usernameLink.textContent}</a>
                                            </p>
							            </div>
							            <div class="table__column--width-small text-center">
                                            <a class="table__column__secondary-link" href="/discussion/${key}/">${breadcrumbs[1].textContent.match(/(.+) Comments/)[1]}</a>
                                        </div>
								    </div>
							    </div>
                            </div>
                        `);
                        loadEndlessFeatures(popup.highlightedDiscussions.lastElementChild);
                        if (!esgst.discussionsPath) {
                            if (esgst.gdttt) {
                                addCtDiscussionPanels(popup.highlightedDiscussions.lastElementChild, true);
                                checkGdtttVisited(popup.highlightedDiscussions.lastElementChild);
                            } else if (esgst.ct) {
                                addCtDiscussionPanels(popup.highlightedDiscussions.lastElementChild, true);
                            }
                            getDhDiscussions(popup.highlightedDiscussions.lastElementChild);
                            loadDiscussionFeatures(popup.highlightedDiscussions.lastElementChild);
                        }
                        popup.reposition();
                        window.setTimeout(getDhHighlightedDiscussions, 0, discussions, ++i, ++j, keys, n, popup, callback);
                    });
                } else {
                    window.setTimeout(getDhHighlightedDiscussions, 0, discussions, i, ++j, keys, n, popup, callback);
                }
            } else {
                callback(j + 1);
            }
        } else {
            callback(j);
        }
    }

    /* [MPS] Main Post Skipper */

    function loadMps() {
        if (esgst.discussionPath && esgst.paginationNavigation) {
            if (document.referrer.match(new RegExp(`/discussion/${[window.location.pathname.match(/^\/discussion\/(.+?)\//)[1]]}/`))) {
                goToComment(``, esgst.pagination.previousElementSibling.firstElementChild.firstElementChild);
            }
        }
    }

    /* [MPP] Main Post Popup */

    function loadMpp(button) {
        var discussion, MPPPost, Sibling, Visited, Timestamp, Hidden;
            MPPPost = document.createElement("div");
            MPPPost.className = "page__outer-wrap";
            do {
                Sibling = esgst.mainPageHeading.previousElementSibling;
                if (Sibling) {
                    MPPPost.insertBefore(Sibling, MPPPost.firstElementChild);
                }
            } while (Sibling);
            esgst.mainPageHeading.parentElement.insertBefore(MPPPost, esgst.mainPageHeading);
            if (esgst.mpp_r) {
                discussion = JSON.parse(GM_getValue(`comments`)).discussions[window.location.pathname.match(/^\/discussion\/(.+?)\//)[1]];
                if (discussion) {
                    if (discussion.comments[``] && discussion.comments[``].timestamp) {
                        Hidden = true;
                    } else {
                        Hidden = false;
                    }
                } else {
                    Hidden = false;
                }
            } else {
                Hidden = true;
            }
            MPPPost.classList.add(Hidden ? "MPPPostOpen" : "MPPPostDefault");
            button.addEventListener("click", function () {
                if (!Hidden) {
                    MPPPost.classList.remove("MPPPostDefault");
                    MPPPost.classList.add("MPPPostOpen");
                }
                $(MPPPost).bPopup({
                    amsl: [0],
                    fadeSpeed: 200,
                    followSpeed: 500,
                    modalColor: "#3c424d",
                    opacity: 0.85,
                    onClose: function () {
                        if (!Hidden) {
                            MPPPost.classList.remove("MPPPostOpen");
                            MPPPost.classList.add("MPPPostDefault");
                            MPPPost.removeAttribute("style");
                            esgst.mainPageHeading.parentElement.insertBefore(MPPPost, esgst.mainPageHeading);
                        }
                    }
                });
            });
    }

    /* [DED] Discussion Edits Detector */

    function loadDed() {
        if (esgst.replyBox && !esgst.userPath) {
            addDEDButton(esgst.replyBox);
        }
    }

    function addDEDButton(Context, CommentURL, DEDCallback) {
        var TradeCode, ParentID, Description, URL, DEDButton, DEDStatus, ResponseHTML;
        TradeCode = Context.querySelector("[name='trade_code']");
        TradeCode = TradeCode ? TradeCode.value : "";
        ParentID = Context.querySelector("[name='parent_id']");
        Description = Context.querySelector("[name='description']");
        URL = esgst.sg ? window.location.href.match(/(.+?)(#.+?)?$/)[1] : "/ajax.php";
        Context = Context.getElementsByClassName(esgst.sg ? "align-button-container" : "btn_actions")[0];
        Context.firstElementChild.remove();
        Context.insertAdjacentHTML("afterBegin", "<div class=\"DEDButton\"></div>");
        Context.insertAdjacentHTML("beforeEnd", "<div class=\"comment__actions action_list DEDStatus\"></div>");
        DEDButton = Context.firstElementChild;
        DEDStatus = Context.lastElementChild;
        createButton(DEDButton, "fa-send", "Submit", "fa-circle-o-notch fa-spin", "Saving...", function (Callback) {
            DEDStatus.innerHTML = "";
            if (CommentURL) {
                makeRequest(null, CommentURL, DEDStatus, function (Response) {
                    ResponseHTML = DOM.parse(Response.responseText);
                    TradeCode = esgst.sg ? "" : Response.finalUrl.match(/\/trade\/(.+?)\//)[1];
                    ParentID = ResponseHTML.getElementById(CommentURL.match(/\/comment\/(.+)/)[1]);
                    ParentID = esgst.sg ? ParentID.closest(".comment").getAttribute("data-comment-id") : ParentID.getAttribute("data-id");
                    URL = esgst.sg ? Response.finalUrl.match(/(.+?)(#.+?)?$/)[1] : "/ajax.php";
                    saveComment(TradeCode, ParentID, Description.value, URL, DEDStatus, Callback, DEDCallback);
                });
            } else {
                saveComment(TradeCode, ParentID.value, Description.value, URL, DEDStatus, Callback, DEDCallback);
            }
        }, null, true);
    }

    /* [RML] Reply Mention Link */

    function loadRml() {
        esgst.endlessFeatures.push(addRmlLinks);
        addRmlLinks(document);
    }

    function addRmlLinks(context) {
        var matches = context.getElementsByClassName(esgst.sg ? "comment__children" : "comment_children");
        for (var i = 0, n = matches.length; i < n; ++i) {
            var Matches = matches[i].children;
            if (Matches.length) {
                addRMLLink(esgst.sg ? matches[i].parentElement.getElementsByClassName("comment__summary")[0] : matches[i].parentElement, Matches);
            }
        }
    }

    function addRMLLink(Context, Matches) {
        var Username, ID, I, N, RMLLink;
        Username = Context.getElementsByClassName(esgst.sg ? "comment__username" : "author_name")[0].textContent.trim();
        ID = Context.id;
        for (I = 0, N = Matches.length; I < N; ++I) {
            Context = Matches[I].getElementsByClassName(esgst.sg ? "comment__actions" : "action_list")[0];
            RMLLink = Context.getElementsByClassName("RMLLink")[0];
            if (RMLLink) {
                RMLLink.textContent = "@" + Username;
            } else {
                Context.insertAdjacentHTML("beforeEnd", "<a class=\"comment__actions__button RMLLink\" href=\"#" + ID + "\">@" + Username + "</a>");
            }
        }
    }

    /* [CFH] Comment Formatting Helper */

    function loadCfh(context) {
        esgst.endlessFeatures.push(getCfhAreas);
        getCfhAreas(document);
    }

    function getCfhAreas(context) {
        var textAreas = context.querySelectorAll(`textarea[name='description']`);
        for (var i = 0, n = textAreas.length; i < n; ++i) {
            addCFHPanel(textAreas[i]);
        }
    }

    function addCFHPanel(Context) {
        var CFH, I, N;
        Context.insertAdjacentHTML("beforeBegin", "<div class=\"page__heading page_heading CFHPanel\"></div>");
        CFH = {
            Items: [{
                ID: "cfh_i",
                Name: "Italic",
                Icon: "fa-italic",
                Prefix: "*",
                Suffix: "*"
            }, {
                ID: "cfh_b",
                Name: "Bold",
                Icon: "fa-bold",
                Prefix: "**",
                Suffix: "**"
            }, {
                ID: "cfh_s",
                Name: "Spoiler",
                Icon: "fa-eye-slash",
                Prefix: "~",
                Suffix: "~"
            }, {
                ID: "cfh_st",
                Name: "Strikethrough",
                Icon: "fa-strikethrough",
                Prefix: "~~",
                Suffix: "~~"
            }, {
                ID: "cfh_h1",
                Name: "Heading 1",
                Icon: "fa-header",
                Text: "1",
                Prefix: "# "
            }, {
                ID: "cfh_h2",
                Name: "Heading 2",
                Icon: "fa-header",
                Text: "2",
                Prefix: "## "
            }, {
                ID: "cfh_h3",
                Name: "Heading 3",
                Icon: "fa-header",
                Text: "3",
                Prefix: "### "
            }, {
                ID: "cfh_bq",
                Name: "Blockquote",
                Icon: "fa-quote-left",
                Prefix: "> "
            }, {
                ID: "cfh_lb",
                Name: "Line Break",
                Icon: "fa-minus",
                Prefix: "\n---\n\n"
            }, {
                ID: "cfh_ol",
                Name: "Ordered List",
                Icon: "fa-list-ol",
                OrderedList: true
            }, {
                ID: "cfh_ul",
                Name: "Unordered List",
                Icon: "fa-list-ul",
                UnorderedList: true
            }, {
                ID: "cfh_ic",
                Name: "Inline Code",
                Icon: "fa-code",
                Prefix: "`",
                Suffix: "`"
            }, {
                ID: "cfh_lc",
                Name: "Line Code",
                Icon: "fa-code",
                SecondaryIcon: "fa-indent",
                Prefix: "    "
            }, {
                ID: "cfh_pc",
                Name: "Paragraph Code",
                Icon: "fa-code",
                SecondaryIcon: "fa-paragraph",
                Prefix: "```\n",
                Suffix: "\n```"
            }, {
                ID: "cfh_l",
                Name: "Link",
                Icon: "fa-globe",
                setPopout: function (Popout) {
                    var URL, Title;
                    Popout.innerHTML =
                        "URL: <input placeholder=\"http://www.example.com\" type=\"text\"/>" +
                        "Title: <input placeholder=\"Cat\" type=\"text\"/>" +
                        "<div class=\"form__saving-button btn_action white\">Add</div>";
                    URL = Popout.firstElementChild;
                    Title = URL.nextElementSibling;
                    Title.nextElementSibling.addEventListener("click", function () {
                        wrapCFHLinkImage(CFH, Title.value, URL.value);
                        URL.value = ``;
                        Title.value = ``;
                        URL.focus();
                    });
                },
                Callback: function (Popout) {
                    var Value = CFH.TextArea.value;
                    var Start = CFH.TextArea.selectionStart;
                    var End = CFH.TextArea.selectionEnd;
                    Popout.firstElementChild.nextElementSibling.value = Value.slice(Start, End);
                    window.setTimeout(function () {
                        Popout.firstElementChild.focus();
                    }, 0);
                }
            }, {
                ID: "cfh_img",
                Name: "Image",
                Icon: "fa-image",
                setPopout: function (Popout) {
                    var URL, Title;
                    Popout.innerHTML =
                        "URL: <input placeholder=\"http://www.example.com/image.jpg\" type=\"text\"/>" +
                        "Title: <input placeholder=\"Cats\" type=\"text\"/>" +
                        "<div class=\"form__saving-button btn_action white\">Add</div>";
                    URL = Popout.firstElementChild;
                    Title = URL.nextElementSibling;
                    Title.nextElementSibling.addEventListener("click", function () {
                        wrapCFHLinkImage(CFH, Title.value, URL.value, true);
                        URL.value = ``;
                        Title.value = ``;
                        URL.focus();
                    });
                },
                Callback: function (Popout) {
                    var Value = CFH.TextArea.value;
                    var Start = CFH.TextArea.selectionStart;
                    var End = CFH.TextArea.selectionEnd;
                    Popout.firstElementChild.nextElementSibling.value = Value.slice(Start, End);
                    window.setTimeout(function () {
                        Popout.firstElementChild.focus();
                    }, 0);
                }
            }, {
                ID: "cfh_t",
                Name: "Table",
                Icon: "fa-table",
                setPopup: function (Popup) {
                    var Table, InsertRow, InsertColumn, Popout;
                    Popout = Popup.Description;
                    Popout.innerHTML =
                        "<table></table>" +
                        "<div class=\"form__saving-button btn_action white\">Insert Row</div>" +
                        "<div class=\"form__saving-button btn_action white\">Insert Column</div>" +
                        "<div class=\"form__saving-button btn_action white\">Add</div>";
                    Table = Popout.firstElementChild;
                    InsertRow = Table.nextElementSibling;
                    InsertColumn = InsertRow.nextElementSibling;
                    insertCFHTableRows(4, Table);
                    insertCFHTableColumns(2, Table);
                    InsertRow.addEventListener("click", function () {
                        insertCFHTableRows(1, Table);
                    });
                    InsertColumn.addEventListener("click", function () {
                        insertCFHTableColumns(1, Table);
                    });
                    InsertColumn.nextElementSibling.addEventListener("click", function () {
                        var Rows, I, NumRows, J, NumColumns, Value, Start, End;
                        Rows = Table.rows;
                        for (I = 1, NumRows = Rows.length; I < NumRows; ++I) {
                            for (J = 1, NumColumns = Rows[0].cells.length; J < NumColumns; ++J) {
                                if (!Rows[I].cells[J].firstElementChild.value) {
                                    I = NumRows + 1;
                                    J = NumColumns + 1;
                                }
                            }
                        }
                        if ((I <= NumRows) || ((I > NumRows) && window.confirm("Some cells are empty. This might lead to unexpected results. Are you sure you want to continue?"))) {
                            Value = "";
                            for (I = 1; I < NumRows; ++I) {
                                Value += "\n";
                                for (J = 1; J < NumColumns; ++J) {
                                    Value += Rows[I].cells[J].firstElementChild.value + ((J < (NumColumns - 1)) ? " | " : "");
                                }
                            }
                            Value += "\n\n";
                            Start = CFH.TextArea.selectionStart;
                            End = CFH.TextArea.selectionEnd;
                            CFH.TextArea.value = CFH.TextArea.value.slice(0, Start) + Value + CFH.TextArea.value.slice(End);
                            CFH.TextArea.setSelectionRange(End + Value.length, End + Value.length);
                            CFH.TextArea.focus();
                            Popup.Close.click();
                        }
                    });
                }
            }, {
                ID: "cfh_e",
                Name: "Emojis",
                Icon: "fa-smile-o",
                setPopout: function (Popout) {
                    var Emojis;
                    Popout.innerHTML =
                        "<div class=\"CFHEmojis\">" + GM_getValue("Emojis", ``) + "</div>" +
                        "<div class=\"form__saving-button btn_action white\">Select Emojis</div>";
                    Emojis = Popout.firstElementChild;
                    setCFHEmojis(Emojis, CFH);

                    Emojis.nextElementSibling.addEventListener("click", function () {
                        var Popup, I, N, Emoji, SavedEmojis;
                        Popup = createPopup(true);
                        Popup.Icon.classList.add("fa-smile-o");
                        Popup.Title.textContent = "Select emojis:";
                        Popup.Description.insertAdjacentHTML(
                            "afterBegin",
                            "<div class=\"CFHEmojis\"></div>" +
                            createDescription("Drag the emojis you want to use and drop them in the box below. Click on an emoji to remove it.") +
                            "<div class=\"global__image-outer-wrap page_heading_btn CFHEmojis\">" + GM_getValue("Emojis", ``) + "</div>"
                        );
                        Emojis = Popup.Description.firstElementChild;
                        for (I = 0, N = CFH.Emojis.length; I < N; ++I) {
                            Emoji = CFH.Emojis[I].Emoji;
                            Emojis.insertAdjacentHTML("beforeEnd", "<span data-id=\"" + Emoji + "\" draggable=\"true\" title=\"" + CFH.Emojis[I].Title + "\">" + Emoji + "</span>");
                            Emojis.lastElementChild.addEventListener("dragstart", function (Event) {
                                Event.dataTransfer.setData("text", Event.currentTarget.getAttribute("data-id"));
                            });
                        }
                        SavedEmojis = Emojis.nextElementSibling.nextElementSibling;
                        for (I = 0, N = SavedEmojis.children.length; I < N; ++I) {
                            SavedEmojis.children[I].addEventListener("click", function (Event) {
                                Event.currentTarget.remove();
                                GM_setValue("Emojis", SavedEmojis.innerHTML);
                                Popup.reposition();
                            });
                        }
                        SavedEmojis.addEventListener("dragover", function (Event) {
                            Event.preventDefault();
                        });
                        SavedEmojis.addEventListener("drop", function (Event) {
                            var ID;
                            Event.preventDefault();
                            ID = Event.dataTransfer.getData("text").replace(/\\/g, "\\\\");
                            if (!SavedEmojis.querySelector("[data-id='" + ID + "']")) {
                                SavedEmojis.appendChild(document.querySelector("[data-id='" + ID + "']").cloneNode(true));
                                GM_setValue("Emojis", SavedEmojis.innerHTML);
                                Popup.reposition();
                                SavedEmojis.lastElementChild.addEventListener("click", function (Event) {
                                    Event.currentTarget.remove();
                                    GM_setValue("Emojis", SavedEmojis.innerHTML);
                                    Popup.reposition();
                                });
                            }
                        });
                        Popup = Popup.popUp(function () {
                            Popout.classList.add("rhHidden");
                        });
                    });
                },
                Callback: function (Popout) {
                    var Emojis;
                    Emojis = Popout.firstElementChild;
                    Emojis.innerHTML = GM_getValue("Emojis", ``);
                    setCFHEmojis(Emojis, CFH);
                }
            }, {
                Name: "Links / Images Paste Formatting",
                Icon: "fa-paste",
                Callback: function (Context) {
                    CFH.ALIPF = Context.firstElementChild;
                    setCFHALIPF(CFH, esgst.cfh_pasteFormatting);
                },
                OnClick: function () {
                    setCFHALIPF(CFH);
                }
            }, {
                ID: "cfh_g",
                Name: "Giveaway Encrypter",
                Icon: "fa-star",
                setPopout: function (Popout) {
                    var Code;
                    Popout.innerHTML =
                        "Giveaway Code: <input placeholder=\"XXXXX\" type=\"text\"/>" +
                        "<div class=\"form__saving-button btn_action white\">Add</div>";
                    Code = Popout.firstElementChild;
                    Code.nextElementSibling.addEventListener("click", function () {
                        if (Code.value.match(/^[\d\w]{5}$/)) {
                            var encodedCode = encryptGedCode(Code.value);
                            wrapCFHLinkImage(CFH, ``, `ESGST-${encodedCode}`);
                            Code.value = ``;
                            Code.focus();
                        } else {
                            window.alert(`Wrong format. The right format is XXXXX.`);
                        }
                    });
                },
                Callback: function (Popout) {
                    var Value = CFH.TextArea.value;
                    var Start = CFH.TextArea.selectionStart;
                    var End = CFH.TextArea.selectionEnd;
                    Popout.firstElementChild.nextElementSibling.value = Value.slice(Start, End);
                    window.setTimeout(function () {
                        Popout.firstElementChild.focus();
                    }, 0);
                }
            }],
            Panel: Context.previousElementSibling,
            TextArea: Context,
            Emojis: [ //Top emojis credit to https://greasyfork.org/scripts/21607-steamgifts-comment-formatting
                {
                    Emoji: "&#xAF;&#92;&#92;&#95;&#40;&#x30C4;&#41;&#95;&#47;&#xAF;",
                    Title: ""
                }, {
                    Emoji: "&#40; &#x361;&#xB0; &#x35C;&#x296; &#x361;&#xB0;&#41;",
                    Title: ""
                }, {
                    Emoji: "&#40; &#x361;&#x2299; &#x35C;&#x296; &#x361;&#x2299;&#41;",
                    Title: ""
                }, {
                    Emoji: "&#40;&#x30CE;&#xCA0;&#x76CA;&#xCA0;&#41;&#x30CE;",
                    Title: ""
                }, {
                    Emoji: "&#40;&#x256F;&#xB0;&#x25A1;&#xB0;&#xFF09;&#x256F;&#xFE35; &#x253B;&#x2501;&#x253B;",
                    Title: ""
                }, {
                    Emoji: "&#x252C;&#x2500;&#x252C;&#x30CE;&#40; &#xBA; &#95; &#xBA;&#x30CE;&#41;",
                    Title: ""
                }, {
                    Emoji: "&#x10DA;&#40;&#xCA0;&#x76CA;&#xCA0;&#x10DA;&#41;",
                    Title: ""
                }, {
                    Emoji: "&#40;&#x25D5;&#x203F;-&#41;&#x270C;",
                    Title: ""
                }, {
                    Emoji: "&#40;&#xFF61;&#x25D5;&#x203F;&#x25D5;&#xFF61;&#41;",
                    Title: ""
                }, {
                    Emoji: "&#40;&#x25D1;&#x203F;&#x25D0;&#41;",
                    Title: ""
                }, {
                    Emoji: "&#x25D4;&#95;&#x25D4;",
                    Title: ""
                }, {
                    Emoji: "&#40;&#x2022;&#x203F;&#x2022;&#41;",
                    Title: ""
                }, {
                    Emoji: "&#40;&#xCA0;&#95;&#xCA0;&#41;",
                    Title: ""
                }, {
                    Emoji: "&#40;&#xAC;&#xFF64;&#xAC;&#41;",
                    Title: ""
                }, {
                    Emoji: "&#40;&#x2500;&#x203F;&#x203F;&#x2500;&#41;",
                    Title: ""
                }, {
                    Emoji: "&#40;&#xCA5;&#xFE4F;&#xCA5;&#41;",
                    Title: ""
                }, {
                    Emoji: "&#40;&#xCA5;&#x2038;&#xCA5;&#41;",
                    Title: ""
                }, {
                    Emoji: "&#40;&#x2310;&#x25A0;&#95;&#x25A0;&#41;",
                    Title: ""
                }, {
                    Emoji: "&#40;&#x25B0;&#x2D8;&#x25E1;&#x2D8;&#x25B0;&#41;",
                    Title: ""
                }, {
                    Emoji: "&#x4E41;&#40; &#x25D4; &#xC6A;&#x25D4;&#41;&#x310F;",
                    Title: ""
                }, {
                    Emoji: "&#40;&#xE07; &#x360;&#xB0; &#x35F;&#x296; &#x361;&#xB0;&#41;&#xE07;",
                    Title: ""
                }, {
                    Emoji: "&#x3B6;&#xF3C;&#x19F;&#x346;&#x644;&#x35C;&#x19F;&#x346;&#xF3D;&#x1D98;",
                    Title: ""
                }, {
                    Emoji: "&#x295;&#x2022;&#x1D25;&#x2022;&#x294;",
                    Title: ""
                }, {
                    Emoji: "&#40; &#x35D;&#xB0; &#x35C;&#x296;&#x361;&#xB0;&#41;",
                    Title: ""
                }, {
                    Emoji: "&#40;&#47;&#xFF9F;&#x414;&#xFF9F;&#41;&#47;",
                    Title: ""
                }, {
                    Emoji: "&#xB67;&#xF3C;&#xCA0;&#x76CA;&#xCA0;&#xF3D;&#xB68;",
                    Title: ""
                }, {
                    Emoji: "&#40;&#xE07; &#x2022;&#x300;&#95;&#x2022;&#x301;&#41;&#xE07;",
                    Title: ""
                }, {
                    Emoji: "&#x1F600",
                    Title: "Grinning Face"
                }, {
                    Emoji: "&#x1F601",
                    Title: "Grinning Face With Smiling Eyes"
                }, {
                    Emoji: "&#x1F602",
                    Title: "Face With Tears Of Joy"
                }, {
                    Emoji: "&#x1F923",
                    Title: "Rolling On The Floor Laughing"
                }, {
                    Emoji: "&#x1F603",
                    Title: "Smiling Face With Open Mouth"
                }, {
                    Emoji: "&#x1F604",
                    Title: "Smiling Face With Open Mouth & Smiling Eyes"
                }, {
                    Emoji: "&#x1F605",
                    Title: "Smiling Face With Open Mouth & Cold Sweat"
                }, {
                    Emoji: "&#x1F606",
                    Title: "Smiling Face With Open Mouth & Closed Eyes"
                }, {
                    Emoji: "&#x1F609",
                    Title: "Winking Face"
                }, {
                    Emoji: "&#x1F60A",
                    Title: "Smiling Face With Smiling Eyes"
                }, {
                    Emoji: "&#x1F60B",
                    Title: "Face Savouring Delicious Food"
                }, {
                    Emoji: "&#x1F60E",
                    Title: "Smiling Face With Sunglasses"
                }, {
                    Emoji: "&#x1F60D",
                    Title: "Smiling Face With Heart-Eyes"
                }, {
                    Emoji: "&#x1F618",
                    Title: "Face Blowing A Kiss"
                }, {
                    Emoji: "&#x1F617",
                    Title: "Kissing Face"
                }, {
                    Emoji: "&#x1F619",
                    Title: "Kissing Face With Smiling Eyes"
                }, {
                    Emoji: "&#x1F61A",
                    Title: "Kissing Face With Closed Eyes"
                }, {
                    Emoji: "&#x263A",
                    Title: "Smiling Face"
                }, {
                    Emoji: "&#x1F642",
                    Title: "Slightly Smiling Face"
                }, {
                    Emoji: "&#x1F917",
                    Title: "Hugging Face"
                }, {
                    Emoji: "&#x1F914",
                    Title: "Thinking Face"
                }, {
                    Emoji: "&#x1F610",
                    Title: "Neutral Face"
                }, {
                    Emoji: "&#x1F611",
                    Title: "Expressionless Face"
                }, {
                    Emoji: "&#x1F636",
                    Title: "Face Without Mouth"
                }, {
                    Emoji: "&#x1F644",
                    Title: "Face With Rolling Eyes"
                }, {
                    Emoji: "&#x1F60F",
                    Title: "Smirking Face"
                }, {
                    Emoji: "&#x1F623",
                    Title: "Persevering Face"
                }, {
                    Emoji: "&#x1F625",
                    Title: "Disappointed But Relieved Face"
                }, {
                    Emoji: "&#x1F62E",
                    Title: "Face With Open Mouth"
                }, {
                    Emoji: "&#x1F910",
                    Title: "Zipper-Mouth Face"
                }, {
                    Emoji: "&#x1F62F",
                    Title: "Hushed Face"
                }, {
                    Emoji: "&#x1F62A",
                    Title: "Sleepy Face"
                }, {
                    Emoji: "&#x1F62B",
                    Title: "Tired Face"
                }, {
                    Emoji: "&#x1F634",
                    Title: "Sleeping Face"
                }, {
                    Emoji: "&#x1F60C",
                    Title: "Relieved Face"
                }, {
                    Emoji: "&#x1F913",
                    Title: "Nerd Face"
                }, {
                    Emoji: "&#x1F61B",
                    Title: "Face With Stuck-Out Tongue"
                }, {
                    Emoji: "&#x1F61C",
                    Title: "Face With Stuck-Out Tongue & Winking Eye"
                }, {
                    Emoji: "&#x1F61D",
                    Title: "Face With Stuck-Out Tongue & Closed Eyes"
                }, {
                    Emoji: "&#x1F924",
                    Title: "Drooling Face"
                }, {
                    Emoji: "&#x1F612",
                    Title: "Unamused Face"
                }, {
                    Emoji: "&#x1F613",
                    Title: "Face With Cold Sweat"
                }, {
                    Emoji: "&#x1F614",
                    Title: "Pensive Face"
                }, {
                    Emoji: "&#x1F615",
                    Title: "Confused Face"
                }, {
                    Emoji: "&#x1F643",
                    Title: "Upside-Down Face"
                }, {
                    Emoji: "&#x1F911",
                    Title: "Money-Mouth Face"
                }, {
                    Emoji: "&#x1F632",
                    Title: "Astonished Face"
                }, {
                    Emoji: "&#x2639",
                    Title: "Frowning Face"
                }, {
                    Emoji: "&#x1F641",
                    Title: "Slightly Frowning Face"
                }, {
                    Emoji: "&#x1F616",
                    Title: "Confounded Face"
                }, {
                    Emoji: "&#x1F61E",
                    Title: "Disappointed Face"
                }, {
                    Emoji: "&#x1F61F",
                    Title: "Worried Face"
                }, {
                    Emoji: "&#x1F624",
                    Title: "Face With Steam From Nose"
                }, {
                    Emoji: "&#x1F622",
                    Title: "Crying Face"
                }, {
                    Emoji: "&#x1F62D",
                    Title: "Loudly Crying Face"
                }, {
                    Emoji: "&#x1F626",
                    Title: "Frowning Face With Open Mouth"
                }, {
                    Emoji: "&#x1F627",
                    Title: "Anguished Face"
                }, {
                    Emoji: "&#x1F628",
                    Title: "Fearful Face"
                }, {
                    Emoji: "&#x1F629",
                    Title: "Weary Face"
                }, {
                    Emoji: "&#x1F62C",
                    Title: "Grimacing Face"
                }, {
                    Emoji: "&#x1F630",
                    Title: "Face With Open Mouth & Cold Sweat"
                }, {
                    Emoji: "&#x1F631",
                    Title: "Face Screaming In Fear"
                }, {
                    Emoji: "&#x1F633",
                    Title: "Flushed Face"
                }, {
                    Emoji: "&#x1F635",
                    Title: "Dizzy Face"
                }, {
                    Emoji: "&#x1F621",
                    Title: "Pouting Face"
                }, {
                    Emoji: "&#x1F620",
                    Title: "Angry Face"
                }, {
                    Emoji: "&#x1F607",
                    Title: "Smiling Face With Halo"
                }, {
                    Emoji: "&#x1F920",
                    Title: "Cowboy Hat Face"
                }, {
                    Emoji: "&#x1F921",
                    Title: "Clown Face"
                }, {
                    Emoji: "&#x1F925",
                    Title: "Lying Face"
                }, {
                    Emoji: "&#x1F637",
                    Title: "Face With Medical Mask"
                }, {
                    Emoji: "&#x1F912",
                    Title: "Face With Thermometer"
                }, {
                    Emoji: "&#x1F915",
                    Title: "Face With Head-Bandage"
                }, {
                    Emoji: "&#x1F922",
                    Title: "Nauseated Face"
                }, {
                    Emoji: "&#x1F927",
                    Title: "Sneezing Face"
                }, {
                    Emoji: "&#x1F608",
                    Title: "Smiling Face With Horns"
                }, {
                    Emoji: "&#x1F47F",
                    Title: "Angry Face With Horns"
                }, {
                    Emoji: "&#x1F479",
                    Title: "Ogre"
                }, {
                    Emoji: "&#x1F47A",
                    Title: "Goblin"
                }, {
                    Emoji: "&#x1F480",
                    Title: "Skull"
                }, {
                    Emoji: "&#x2620",
                    Title: "Skull And Crossbones"
                }, {
                    Emoji: "&#x1F47B",
                    Title: "Ghost"
                }, {
                    Emoji: "&#x1F47D",
                    Title: "Alien"
                }, {
                    Emoji: "&#x1F47E",
                    Title: "Alien Monster"
                }, {
                    Emoji: "&#x1F916",
                    Title: "Robot Face"
                }, {
                    Emoji: "&#x1F4A9",
                    Title: "Pile Of Poo"
                }, {
                    Emoji: "&#x1F63A",
                    Title: "Smiling Cat Face With Open Mouth"
                }, {
                    Emoji: "&#x1F638",
                    Title: "Grinning Cat Face With Smiling Eyes"
                }, {
                    Emoji: "&#x1F639",
                    Title: "Cat Face With Tears Of Joy"
                }, {
                    Emoji: "&#x1F63B",
                    Title: "Smiling Cat Face With Heart-Eyes"
                }, {
                    Emoji: "&#x1F63C",
                    Title: "Cat Face With Wry Smile"
                }, {
                    Emoji: "&#x1F63D",
                    Title: "Kissing Cat Face With Closed Eyes"
                }, {
                    Emoji: "&#x1F640",
                    Title: "Weary Cat Face"
                }, {
                    Emoji: "&#x1F63F",
                    Title: "Crying Cat Face"
                }, {
                    Emoji: "&#x1F63E",
                    Title: "Pouting Cat Face"
                }, {
                    Emoji: "&#x1F648",
                    Title: "See-No-Evil Monkey"
                }, {
                    Emoji: "&#x1F649",
                    Title: "Hear-No-Evil Monkey"
                }, {
                    Emoji: "&#x1F64A",
                    Title: "Speak-No-Evil Monkey"
                }, {
                    Emoji: "&#x1F466",
                    Title: "Boy"
                }, {
                    Emoji: "&#x1F466&#x1F3FB",
                    Title: "Boy: Light Skin Tone"
                }, {
                    Emoji: "&#x1F466&#x1F3FC",
                    Title: "Boy: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F466&#x1F3FD",
                    Title: "Boy: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F466&#x1F3FE",
                    Title: "Boy: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F466&#x1F3FF",
                    Title: "Boy: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F467",
                    Title: "Girl"
                }, {
                    Emoji: "&#x1F467&#x1F3FB",
                    Title: "Girl: Light Skin Tone"
                }, {
                    Emoji: "&#x1F467&#x1F3FC",
                    Title: "Girl: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F467&#x1F3FD",
                    Title: "Girl: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F467&#x1F3FE",
                    Title: "Girl: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F467&#x1F3FF",
                    Title: "Girl: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F468",
                    Title: "Man"
                }, {
                    Emoji: "&#x1F468&#x1F3FB",
                    Title: "Man: Light Skin Tone"
                }, {
                    Emoji: "&#x1F468&#x1F3FC",
                    Title: "Man: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F468&#x1F3FD",
                    Title: "Man: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F468&#x1F3FE",
                    Title: "Man: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F468&#x1F3FF",
                    Title: "Man: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F469",
                    Title: "Woman"
                }, {
                    Emoji: "&#x1F469&#x1F3FB",
                    Title: "Woman: Light Skin Tone"
                }, {
                    Emoji: "&#x1F469&#x1F3FC",
                    Title: "Woman: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F469&#x1F3FD",
                    Title: "Woman: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F469&#x1F3FE",
                    Title: "Woman: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F469&#x1F3FF",
                    Title: "Woman: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F474",
                    Title: "Old Man"
                }, {
                    Emoji: "&#x1F474&#x1F3FB",
                    Title: "Old Man: Light Skin Tone"
                }, {
                    Emoji: "&#x1F474&#x1F3FC",
                    Title: "Old Man: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F474&#x1F3FD",
                    Title: "Old Man: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F474&#x1F3FE",
                    Title: "Old Man: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F474&#x1F3FF",
                    Title: "Old Man: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F475",
                    Title: "Old Woman"
                }, {
                    Emoji: "&#x1F475&#x1F3FB",
                    Title: "Old Woman: Light Skin Tone"
                }, {
                    Emoji: "&#x1F475&#x1F3FC",
                    Title: "Old Woman: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F475&#x1F3FD",
                    Title: "Old Woman: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F475&#x1F3FE",
                    Title: "Old Woman: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F475&#x1F3FF",
                    Title: "Old Woman: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F476",
                    Title: "Baby"
                }, {
                    Emoji: "&#x1F476&#x1F3FB",
                    Title: "Baby: Light Skin Tone"
                }, {
                    Emoji: "&#x1F476&#x1F3FC",
                    Title: "Baby: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F476&#x1F3FD",
                    Title: "Baby: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F476&#x1F3FE",
                    Title: "Baby: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F476&#x1F3FF",
                    Title: "Baby: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F47C",
                    Title: "Baby Angel"
                }, {
                    Emoji: "&#x1F47C&#x1F3FB",
                    Title: "Baby Angel: Light Skin Tone"
                }, {
                    Emoji: "&#x1F47C&#x1F3FC",
                    Title: "Baby Angel: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F47C&#x1F3FD",
                    Title: "Baby Angel: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F47C&#x1F3FE",
                    Title: "Baby Angel: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F47C&#x1F3FF",
                    Title: "Baby Angel: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F468&#x200D&#x2695&#xFE0F",
                    Title: "Man Health Worker"
                }, {
                    Emoji: "&#x1F468&#x1F3FB&#x200D&#x2695&#xFE0F",
                    Title: "Man Health Worker: Light Skin Tone"
                }, {
                    Emoji: "&#x1F468&#x1F3FC&#x200D&#x2695&#xFE0F",
                    Title: "Man Health Worker: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F468&#x1F3FD&#x200D&#x2695&#xFE0F",
                    Title: "Man Health Worker: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F468&#x1F3FE&#x200D&#x2695&#xFE0F",
                    Title: "Man Health Worker: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F468&#x1F3FF&#x200D&#x2695&#xFE0F",
                    Title: "Man Health Worker: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F469&#x200D&#x2695&#xFE0F",
                    Title: "Woman Health Worker"
                }, {
                    Emoji: "&#x1F469&#x1F3FB&#x200D&#x2695&#xFE0F",
                    Title: "Woman Health Worker: Light Skin Tone"
                }, {
                    Emoji: "&#x1F469&#x1F3FC&#x200D&#x2695&#xFE0F",
                    Title: "Woman Health Worker: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F469&#x1F3FD&#x200D&#x2695&#xFE0F",
                    Title: "Woman Health Worker: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F469&#x1F3FE&#x200D&#x2695&#xFE0F",
                    Title: "Woman Health Worker: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F469&#x1F3FF&#x200D&#x2695&#xFE0F",
                    Title: "Woman Health Worker: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F468&#x200D&#x1F393",
                    Title: "Man Student"
                }, {
                    Emoji: "&#x1F468&#x1F3FB&#x200D&#x1F393",
                    Title: "Man Student: Light Skin Tone"
                }, {
                    Emoji: "&#x1F468&#x1F3FC&#x200D&#x1F393",
                    Title: "Man Student: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F468&#x1F3FD&#x200D&#x1F393",
                    Title: "Man Student: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F468&#x1F3FE&#x200D&#x1F393",
                    Title: "Man Student: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F468&#x1F3FF&#x200D&#x1F393",
                    Title: "Man Student: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F469&#x200D&#x1F393",
                    Title: "Woman Student"
                }, {
                    Emoji: "&#x1F469&#x1F3FB&#x200D&#x1F393",
                    Title: "Woman Student: Light Skin Tone"
                }, {
                    Emoji: "&#x1F469&#x1F3FC&#x200D&#x1F393",
                    Title: "Woman Student: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F469&#x1F3FD&#x200D&#x1F393",
                    Title: "Woman Student: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F469&#x1F3FE&#x200D&#x1F393",
                    Title: "Woman Student: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F469&#x1F3FF&#x200D&#x1F393",
                    Title: "Woman Student: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F468&#x200D&#x1F3EB",
                    Title: "Man Teacher"
                }, {
                    Emoji: "&#x1F468&#x1F3FB&#x200D&#x1F3EB",
                    Title: "Man Teacher: Light Skin Tone"
                }, {
                    Emoji: "&#x1F468&#x1F3FC&#x200D&#x1F3EB",
                    Title: "Man Teacher: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F468&#x1F3FD&#x200D&#x1F3EB",
                    Title: "Man Teacher: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F468&#x1F3FE&#x200D&#x1F3EB",
                    Title: "Man Teacher: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F468&#x1F3FF&#x200D&#x1F3EB",
                    Title: "Man Teacher: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F469&#x200D&#x1F3EB",
                    Title: "Woman Teacher"
                }, {
                    Emoji: "&#x1F469&#x1F3FB&#x200D&#x1F3EB",
                    Title: "Woman Teacher: Light Skin Tone"
                }, {
                    Emoji: "&#x1F469&#x1F3FC&#x200D&#x1F3EB",
                    Title: "Woman Teacher: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F469&#x1F3FD&#x200D&#x1F3EB",
                    Title: "Woman Teacher: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F469&#x1F3FE&#x200D&#x1F3EB",
                    Title: "Woman Teacher: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F469&#x1F3FF&#x200D&#x1F3EB",
                    Title: "Woman Teacher: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F468&#x200D&#x2696&#xFE0F",
                    Title: "Man Judge"
                }, {
                    Emoji: "&#x1F468&#x1F3FB&#x200D&#x2696&#xFE0F",
                    Title: "Man Judge: Light Skin Tone"
                }, {
                    Emoji: "&#x1F468&#x1F3FC&#x200D&#x2696&#xFE0F",
                    Title: "Man Judge: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F468&#x1F3FD&#x200D&#x2696&#xFE0F",
                    Title: "Man Judge: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F468&#x1F3FE&#x200D&#x2696&#xFE0F",
                    Title: "Man Judge: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F468&#x1F3FF&#x200D&#x2696&#xFE0F",
                    Title: "Man Judge: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F469&#x200D&#x2696&#xFE0F",
                    Title: "Woman Judge"
                }, {
                    Emoji: "&#x1F469&#x1F3FB&#x200D&#x2696&#xFE0F",
                    Title: "Woman Judge: Light Skin Tone"
                }, {
                    Emoji: "&#x1F469&#x1F3FC&#x200D&#x2696&#xFE0F",
                    Title: "Woman Judge: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F469&#x1F3FD&#x200D&#x2696&#xFE0F",
                    Title: "Woman Judge: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F469&#x1F3FE&#x200D&#x2696&#xFE0F",
                    Title: "Woman Judge: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F469&#x1F3FF&#x200D&#x2696&#xFE0F",
                    Title: "Woman Judge: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F468&#x200D&#x1F33E",
                    Title: "Man Farmer"
                }, {
                    Emoji: "&#x1F468&#x1F3FB&#x200D&#x1F33E",
                    Title: "Man Farmer: Light Skin Tone"
                }, {
                    Emoji: "&#x1F468&#x1F3FC&#x200D&#x1F33E",
                    Title: "Man Farmer: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F468&#x1F3FD&#x200D&#x1F33E",
                    Title: "Man Farmer: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F468&#x1F3FE&#x200D&#x1F33E",
                    Title: "Man Farmer: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F468&#x1F3FF&#x200D&#x1F33E",
                    Title: "Man Farmer: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F469&#x200D&#x1F33E",
                    Title: "Woman Farmer"
                }, {
                    Emoji: "&#x1F469&#x1F3FB&#x200D&#x1F33E",
                    Title: "Woman Farmer: Light Skin Tone"
                }, {
                    Emoji: "&#x1F469&#x1F3FC&#x200D&#x1F33E",
                    Title: "Woman Farmer: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F469&#x1F3FD&#x200D&#x1F33E",
                    Title: "Woman Farmer: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F469&#x1F3FE&#x200D&#x1F33E",
                    Title: "Woman Farmer: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F469&#x1F3FF&#x200D&#x1F33E",
                    Title: "Woman Farmer: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F468&#x200D&#x1F373",
                    Title: "Man Cook"
                }, {
                    Emoji: "&#x1F468&#x1F3FB&#x200D&#x1F373",
                    Title: "Man Cook: Light Skin Tone"
                }, {
                    Emoji: "&#x1F468&#x1F3FC&#x200D&#x1F373",
                    Title: "Man Cook: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F468&#x1F3FD&#x200D&#x1F373",
                    Title: "Man Cook: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F468&#x1F3FE&#x200D&#x1F373",
                    Title: "Man Cook: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F468&#x1F3FF&#x200D&#x1F373",
                    Title: "Man Cook: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F469&#x200D&#x1F373",
                    Title: "Woman Cook"
                }, {
                    Emoji: "&#x1F469&#x1F3FB&#x200D&#x1F373",
                    Title: "Woman Cook: Light Skin Tone"
                }, {
                    Emoji: "&#x1F469&#x1F3FC&#x200D&#x1F373",
                    Title: "Woman Cook: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F469&#x1F3FD&#x200D&#x1F373",
                    Title: "Woman Cook: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F469&#x1F3FE&#x200D&#x1F373",
                    Title: "Woman Cook: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F469&#x1F3FF&#x200D&#x1F373",
                    Title: "Woman Cook: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F468&#x200D&#x1F527",
                    Title: "Man Mechanic"
                }, {
                    Emoji: "&#x1F468&#x1F3FB&#x200D&#x1F527",
                    Title: "Man Mechanic: Light Skin Tone"
                }, {
                    Emoji: "&#x1F468&#x1F3FC&#x200D&#x1F527",
                    Title: "Man Mechanic: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F468&#x1F3FD&#x200D&#x1F527",
                    Title: "Man Mechanic: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F468&#x1F3FE&#x200D&#x1F527",
                    Title: "Man Mechanic: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F468&#x1F3FF&#x200D&#x1F527",
                    Title: "Man Mechanic: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F469&#x200D&#x1F527",
                    Title: "Woman Mechanic"
                }, {
                    Emoji: "&#x1F469&#x1F3FB&#x200D&#x1F527",
                    Title: "Woman Mechanic: Light Skin Tone"
                }, {
                    Emoji: "&#x1F469&#x1F3FC&#x200D&#x1F527",
                    Title: "Woman Mechanic: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F469&#x1F3FD&#x200D&#x1F527",
                    Title: "Woman Mechanic: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F469&#x1F3FE&#x200D&#x1F527",
                    Title: "Woman Mechanic: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F469&#x1F3FF&#x200D&#x1F527",
                    Title: "Woman Mechanic: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F468&#x200D&#x1F3ED",
                    Title: "Man Factory Worker"
                }, {
                    Emoji: "&#x1F468&#x1F3FB&#x200D&#x1F3ED",
                    Title: "Man Factory Worker: Light Skin Tone"
                }, {
                    Emoji: "&#x1F468&#x1F3FC&#x200D&#x1F3ED",
                    Title: "Man Factory Worker: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F468&#x1F3FD&#x200D&#x1F3ED",
                    Title: "Man Factory Worker: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F468&#x1F3FE&#x200D&#x1F3ED",
                    Title: "Man Factory Worker: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F468&#x1F3FF&#x200D&#x1F3ED",
                    Title: "Man Factory Worker: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F469&#x200D&#x1F3ED",
                    Title: "Woman Factory Worker"
                }, {
                    Emoji: "&#x1F469&#x1F3FB&#x200D&#x1F3ED",
                    Title: "Woman Factory Worker: Light Skin Tone"
                }, {
                    Emoji: "&#x1F469&#x1F3FC&#x200D&#x1F3ED",
                    Title: "Woman Factory Worker: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F469&#x1F3FD&#x200D&#x1F3ED",
                    Title: "Woman Factory Worker: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F469&#x1F3FE&#x200D&#x1F3ED",
                    Title: "Woman Factory Worker: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F469&#x1F3FF&#x200D&#x1F3ED",
                    Title: "Woman Factory Worker: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F468&#x200D&#x1F4BC",
                    Title: "Man Office Worker"
                }, {
                    Emoji: "&#x1F468&#x1F3FB&#x200D&#x1F4BC",
                    Title: "Man Office Worker: Light Skin Tone"
                }, {
                    Emoji: "&#x1F468&#x1F3FC&#x200D&#x1F4BC",
                    Title: "Man Office Worker: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F468&#x1F3FD&#x200D&#x1F4BC",
                    Title: "Man Office Worker: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F468&#x1F3FE&#x200D&#x1F4BC",
                    Title: "Man Office Worker: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F468&#x1F3FF&#x200D&#x1F4BC",
                    Title: "Man Office Worker: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F469&#x200D&#x1F4BC",
                    Title: "Woman Office Worker"
                }, {
                    Emoji: "&#x1F469&#x1F3FB&#x200D&#x1F4BC",
                    Title: "Woman Office Worker: Light Skin Tone"
                }, {
                    Emoji: "&#x1F469&#x1F3FC&#x200D&#x1F4BC",
                    Title: "Woman Office Worker: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F469&#x1F3FD&#x200D&#x1F4BC",
                    Title: "Woman Office Worker: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F469&#x1F3FE&#x200D&#x1F4BC",
                    Title: "Woman Office Worker: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F469&#x1F3FF&#x200D&#x1F4BC",
                    Title: "Woman Office Worker: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F468&#x200D&#x1F52C",
                    Title: "Man Scientist"
                }, {
                    Emoji: "&#x1F468&#x1F3FB&#x200D&#x1F52C",
                    Title: "Man Scientist: Light Skin Tone"
                }, {
                    Emoji: "&#x1F468&#x1F3FC&#x200D&#x1F52C",
                    Title: "Man Scientist: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F468&#x1F3FD&#x200D&#x1F52C",
                    Title: "Man Scientist: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F468&#x1F3FE&#x200D&#x1F52C",
                    Title: "Man Scientist: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F468&#x1F3FF&#x200D&#x1F52C",
                    Title: "Man Scientist: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F469&#x200D&#x1F52C",
                    Title: "Woman Scientist"
                }, {
                    Emoji: "&#x1F469&#x1F3FB&#x200D&#x1F52C",
                    Title: "Woman Scientist: Light Skin Tone"
                }, {
                    Emoji: "&#x1F469&#x1F3FC&#x200D&#x1F52C",
                    Title: "Woman Scientist: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F469&#x1F3FD&#x200D&#x1F52C",
                    Title: "Woman Scientist: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F469&#x1F3FE&#x200D&#x1F52C",
                    Title: "Woman Scientist: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F469&#x1F3FF&#x200D&#x1F52C",
                    Title: "Woman Scientist: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F468&#x200D&#x1F4BB",
                    Title: "Man Technologist"
                }, {
                    Emoji: "&#x1F468&#x1F3FB&#x200D&#x1F4BB",
                    Title: "Man Technologist: Light Skin Tone"
                }, {
                    Emoji: "&#x1F468&#x1F3FC&#x200D&#x1F4BB",
                    Title: "Man Technologist: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F468&#x1F3FD&#x200D&#x1F4BB",
                    Title: "Man Technologist: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F468&#x1F3FE&#x200D&#x1F4BB",
                    Title: "Man Technologist: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F468&#x1F3FF&#x200D&#x1F4BB",
                    Title: "Man Technologist: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F469&#x200D&#x1F4BB",
                    Title: "Woman Technologist"
                }, {
                    Emoji: "&#x1F469&#x1F3FB&#x200D&#x1F4BB",
                    Title: "Woman Technologist: Light Skin Tone"
                }, {
                    Emoji: "&#x1F469&#x1F3FC&#x200D&#x1F4BB",
                    Title: "Woman Technologist: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F469&#x1F3FD&#x200D&#x1F4BB",
                    Title: "Woman Technologist: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F469&#x1F3FE&#x200D&#x1F4BB",
                    Title: "Woman Technologist: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F469&#x1F3FF&#x200D&#x1F4BB",
                    Title: "Woman Technologist: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F468&#x200D&#x1F3A4",
                    Title: "Man Singer"
                }, {
                    Emoji: "&#x1F468&#x1F3FB&#x200D&#x1F3A4",
                    Title: "Man Singer: Light Skin Tone"
                }, {
                    Emoji: "&#x1F468&#x1F3FC&#x200D&#x1F3A4",
                    Title: "Man Singer: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F468&#x1F3FD&#x200D&#x1F3A4",
                    Title: "Man Singer: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F468&#x1F3FE&#x200D&#x1F3A4",
                    Title: "Man Singer: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F468&#x1F3FF&#x200D&#x1F3A4",
                    Title: "Man Singer: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F469&#x200D&#x1F3A4",
                    Title: "Woman Singer"
                }, {
                    Emoji: "&#x1F469&#x1F3FB&#x200D&#x1F3A4",
                    Title: "Woman Singer: Light Skin Tone"
                }, {
                    Emoji: "&#x1F469&#x1F3FC&#x200D&#x1F3A4",
                    Title: "Woman Singer: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F469&#x1F3FD&#x200D&#x1F3A4",
                    Title: "Woman Singer: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F469&#x1F3FE&#x200D&#x1F3A4",
                    Title: "Woman Singer: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F469&#x1F3FF&#x200D&#x1F3A4",
                    Title: "Woman Singer: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F468&#x200D&#x1F3A8",
                    Title: "Man Artist"
                }, {
                    Emoji: "&#x1F468&#x1F3FB&#x200D&#x1F3A8",
                    Title: "Man Artist: Light Skin Tone"
                }, {
                    Emoji: "&#x1F468&#x1F3FC&#x200D&#x1F3A8",
                    Title: "Man Artist: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F468&#x1F3FD&#x200D&#x1F3A8",
                    Title: "Man Artist: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F468&#x1F3FE&#x200D&#x1F3A8",
                    Title: "Man Artist: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F468&#x1F3FF&#x200D&#x1F3A8",
                    Title: "Man Artist: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F469&#x200D&#x1F3A8",
                    Title: "Woman Artist"
                }, {
                    Emoji: "&#x1F469&#x1F3FB&#x200D&#x1F3A8",
                    Title: "Woman Artist: Light Skin Tone"
                }, {
                    Emoji: "&#x1F469&#x1F3FC&#x200D&#x1F3A8",
                    Title: "Woman Artist: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F469&#x1F3FD&#x200D&#x1F3A8",
                    Title: "Woman Artist: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F469&#x1F3FE&#x200D&#x1F3A8",
                    Title: "Woman Artist: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F469&#x1F3FF&#x200D&#x1F3A8",
                    Title: "Woman Artist: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F468&#x200D&#x2708&#xFE0F",
                    Title: "Man Pilot"
                }, {
                    Emoji: "&#x1F468&#x1F3FB&#x200D&#x2708&#xFE0F",
                    Title: "Man Pilot: Light Skin Tone"
                }, {
                    Emoji: "&#x1F468&#x1F3FC&#x200D&#x2708&#xFE0F",
                    Title: "Man Pilot: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F468&#x1F3FD&#x200D&#x2708&#xFE0F",
                    Title: "Man Pilot: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F468&#x1F3FE&#x200D&#x2708&#xFE0F",
                    Title: "Man Pilot: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F468&#x1F3FF&#x200D&#x2708&#xFE0F",
                    Title: "Man Pilot: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F469&#x200D&#x2708&#xFE0F",
                    Title: "Woman Pilot"
                }, {
                    Emoji: "&#x1F469&#x1F3FB&#x200D&#x2708&#xFE0F",
                    Title: "Woman Pilot: Light Skin Tone"
                }, {
                    Emoji: "&#x1F469&#x1F3FC&#x200D&#x2708&#xFE0F",
                    Title: "Woman Pilot: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F469&#x1F3FD&#x200D&#x2708&#xFE0F",
                    Title: "Woman Pilot: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F469&#x1F3FE&#x200D&#x2708&#xFE0F",
                    Title: "Woman Pilot: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F469&#x1F3FF&#x200D&#x2708&#xFE0F",
                    Title: "Woman Pilot: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F468&#x200D&#x1F680",
                    Title: "Man Astronaut"
                }, {
                    Emoji: "&#x1F468&#x1F3FB&#x200D&#x1F680",
                    Title: "Man Astronaut: Light Skin Tone"
                }, {
                    Emoji: "&#x1F468&#x1F3FC&#x200D&#x1F680",
                    Title: "Man Astronaut: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F468&#x1F3FD&#x200D&#x1F680",
                    Title: "Man Astronaut: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F468&#x1F3FE&#x200D&#x1F680",
                    Title: "Man Astronaut: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F468&#x1F3FF&#x200D&#x1F680",
                    Title: "Man Astronaut: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F469&#x200D&#x1F680",
                    Title: "Woman Astronaut"
                }, {
                    Emoji: "&#x1F469&#x1F3FB&#x200D&#x1F680",
                    Title: "Woman Astronaut: Light Skin Tone"
                }, {
                    Emoji: "&#x1F469&#x1F3FC&#x200D&#x1F680",
                    Title: "Woman Astronaut: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F469&#x1F3FD&#x200D&#x1F680",
                    Title: "Woman Astronaut: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F469&#x1F3FE&#x200D&#x1F680",
                    Title: "Woman Astronaut: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F469&#x1F3FF&#x200D&#x1F680",
                    Title: "Woman Astronaut: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F468&#x200D&#x1F692",
                    Title: "Man Firefighter"
                }, {
                    Emoji: "&#x1F468&#x1F3FB&#x200D&#x1F692",
                    Title: "Man Firefighter: Light Skin Tone"
                }, {
                    Emoji: "&#x1F468&#x1F3FC&#x200D&#x1F692",
                    Title: "Man Firefighter: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F468&#x1F3FD&#x200D&#x1F692",
                    Title: "Man Firefighter: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F468&#x1F3FE&#x200D&#x1F692",
                    Title: "Man Firefighter: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F468&#x1F3FF&#x200D&#x1F692",
                    Title: "Man Firefighter: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F469&#x200D&#x1F692",
                    Title: "Woman Firefighter"
                }, {
                    Emoji: "&#x1F469&#x1F3FB&#x200D&#x1F692",
                    Title: "Woman Firefighter: Light Skin Tone"
                }, {
                    Emoji: "&#x1F469&#x1F3FC&#x200D&#x1F692",
                    Title: "Woman Firefighter: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F469&#x1F3FD&#x200D&#x1F692",
                    Title: "Woman Firefighter: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F469&#x1F3FE&#x200D&#x1F692",
                    Title: "Woman Firefighter: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F469&#x1F3FF&#x200D&#x1F692",
                    Title: "Woman Firefighter: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F46E",
                    Title: "Police Officer"
                }, {
                    Emoji: "&#x1F46E&#x1F3FB",
                    Title: "Police Officer: Light Skin Tone"
                }, {
                    Emoji: "&#x1F46E&#x1F3FC",
                    Title: "Police Officer: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F46E&#x1F3FD",
                    Title: "Police Officer: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F46E&#x1F3FE",
                    Title: "Police Officer: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F46E&#x1F3FF",
                    Title: "Police Officer: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F46E&#x200D&#x2642&#xFE0F",
                    Title: "Man Police Officer"
                }, {
                    Emoji: "&#x1F46E&#x1F3FB&#x200D&#x2642&#xFE0F",
                    Title: "Man Police Officer: Light Skin Tone"
                }, {
                    Emoji: "&#x1F46E&#x1F3FC&#x200D&#x2642&#xFE0F",
                    Title: "Man Police Officer: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F46E&#x1F3FD&#x200D&#x2642&#xFE0F",
                    Title: "Man Police Officer: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F46E&#x1F3FE&#x200D&#x2642&#xFE0F",
                    Title: "Man Police Officer: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F46E&#x1F3FF&#x200D&#x2642&#xFE0F",
                    Title: "Man Police Officer: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F46E&#x200D&#x2640&#xFE0F",
                    Title: "Woman Police Officer"
                }, {
                    Emoji: "&#x1F46E&#x1F3FB&#x200D&#x2640&#xFE0F",
                    Title: "Woman Police Officer: Light Skin Tone"
                }, {
                    Emoji: "&#x1F46E&#x1F3FC&#x200D&#x2640&#xFE0F",
                    Title: "Woman Police Officer: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F46E&#x1F3FD&#x200D&#x2640&#xFE0F",
                    Title: "Woman Police Officer: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F46E&#x1F3FE&#x200D&#x2640&#xFE0F",
                    Title: "Woman Police Officer: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F46E&#x1F3FF&#x200D&#x2640&#xFE0F",
                    Title: "Woman Police Officer: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F575",
                    Title: "Detective"
                }, {
                    Emoji: "&#x1F575&#x1F3FB",
                    Title: "Detective: Light Skin Tone"
                }, {
                    Emoji: "&#x1F575&#x1F3FC",
                    Title: "Detective: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F575&#x1F3FD",
                    Title: "Detective: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F575&#x1F3FE",
                    Title: "Detective: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F575&#x1F3FF",
                    Title: "Detective: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F575&#xFE0F&#x200D&#x2642&#xFE0F",
                    Title: "Man Detective"
                }, {
                    Emoji: "&#x1F575&#x1F3FB&#x200D&#x2642&#xFE0F",
                    Title: "Man Detective: Light Skin Tone"
                }, {
                    Emoji: "&#x1F575&#x1F3FC&#x200D&#x2642&#xFE0F",
                    Title: "Man Detective: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F575&#x1F3FD&#x200D&#x2642&#xFE0F",
                    Title: "Man Detective: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F575&#x1F3FE&#x200D&#x2642&#xFE0F",
                    Title: "Man Detective: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F575&#x1F3FF&#x200D&#x2642&#xFE0F",
                    Title: "Man Detective: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F575&#xFE0F&#x200D&#x2640&#xFE0F",
                    Title: "Woman Detective"
                }, {
                    Emoji: "&#x1F575&#x1F3FB&#x200D&#x2640&#xFE0F",
                    Title: "Woman Detective: Light Skin Tone"
                }, {
                    Emoji: "&#x1F575&#x1F3FC&#x200D&#x2640&#xFE0F",
                    Title: "Woman Detective: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F575&#x1F3FD&#x200D&#x2640&#xFE0F",
                    Title: "Woman Detective: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F575&#x1F3FE&#x200D&#x2640&#xFE0F",
                    Title: "Woman Detective: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F575&#x1F3FF&#x200D&#x2640&#xFE0F",
                    Title: "Woman Detective: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F482",
                    Title: "Guard"
                }, {
                    Emoji: "&#x1F482&#x1F3FB",
                    Title: "Guard: Light Skin Tone"
                }, {
                    Emoji: "&#x1F482&#x1F3FC",
                    Title: "Guard: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F482&#x1F3FD",
                    Title: "Guard: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F482&#x1F3FE",
                    Title: "Guard: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F482&#x1F3FF",
                    Title: "Guard: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F482&#x200D&#x2642&#xFE0F",
                    Title: "Man Guard"
                }, {
                    Emoji: "&#x1F482&#x1F3FB&#x200D&#x2642&#xFE0F",
                    Title: "Man Guard: Light Skin Tone"
                }, {
                    Emoji: "&#x1F482&#x1F3FC&#x200D&#x2642&#xFE0F",
                    Title: "Man Guard: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F482&#x1F3FD&#x200D&#x2642&#xFE0F",
                    Title: "Man Guard: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F482&#x1F3FE&#x200D&#x2642&#xFE0F",
                    Title: "Man Guard: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F482&#x1F3FF&#x200D&#x2642&#xFE0F",
                    Title: "Man Guard: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F482&#x200D&#x2640&#xFE0F",
                    Title: "Woman Guard"
                }, {
                    Emoji: "&#x1F482&#x1F3FB&#x200D&#x2640&#xFE0F",
                    Title: "Woman Guard: Light Skin Tone"
                }, {
                    Emoji: "&#x1F482&#x1F3FC&#x200D&#x2640&#xFE0F",
                    Title: "Woman Guard: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F482&#x1F3FD&#x200D&#x2640&#xFE0F",
                    Title: "Woman Guard: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F482&#x1F3FE&#x200D&#x2640&#xFE0F",
                    Title: "Woman Guard: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F482&#x1F3FF&#x200D&#x2640&#xFE0F",
                    Title: "Woman Guard: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F477",
                    Title: "Construction Worker"
                }, {
                    Emoji: "&#x1F477&#x1F3FB",
                    Title: "Construction Worker: Light Skin Tone"
                }, {
                    Emoji: "&#x1F477&#x1F3FC",
                    Title: "Construction Worker: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F477&#x1F3FD",
                    Title: "Construction Worker: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F477&#x1F3FE",
                    Title: "Construction Worker: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F477&#x1F3FF",
                    Title: "Construction Worker: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F477&#x200D&#x2642&#xFE0F",
                    Title: "Man Construction Worker"
                }, {
                    Emoji: "&#x1F477&#x1F3FB&#x200D&#x2642&#xFE0F",
                    Title: "Man Construction Worker: Light Skin Tone"
                }, {
                    Emoji: "&#x1F477&#x1F3FC&#x200D&#x2642&#xFE0F",
                    Title: "Man Construction Worker: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F477&#x1F3FD&#x200D&#x2642&#xFE0F",
                    Title: "Man Construction Worker: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F477&#x1F3FE&#x200D&#x2642&#xFE0F",
                    Title: "Man Construction Worker: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F477&#x1F3FF&#x200D&#x2642&#xFE0F",
                    Title: "Man Construction Worker: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F477&#x200D&#x2640&#xFE0F",
                    Title: "Woman Construction Worker"
                }, {
                    Emoji: "&#x1F477&#x1F3FB&#x200D&#x2640&#xFE0F",
                    Title: "Woman Construction Worker: Light Skin Tone"
                }, {
                    Emoji: "&#x1F477&#x1F3FC&#x200D&#x2640&#xFE0F",
                    Title: "Woman Construction Worker: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F477&#x1F3FD&#x200D&#x2640&#xFE0F",
                    Title: "Woman Construction Worker: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F477&#x1F3FE&#x200D&#x2640&#xFE0F",
                    Title: "Woman Construction Worker: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F477&#x1F3FF&#x200D&#x2640&#xFE0F",
                    Title: "Woman Construction Worker: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F473",
                    Title: "Person Wearing Turban"
                }, {
                    Emoji: "&#x1F473&#x1F3FB",
                    Title: "Person Wearing Turban: Light Skin Tone"
                }, {
                    Emoji: "&#x1F473&#x1F3FC",
                    Title: "Person Wearing Turban: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F473&#x1F3FD",
                    Title: "Person Wearing Turban: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F473&#x1F3FE",
                    Title: "Person Wearing Turban: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F473&#x1F3FF",
                    Title: "Person Wearing Turban: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F473&#x200D&#x2642&#xFE0F",
                    Title: "Man Wearing Turban"
                }, {
                    Emoji: "&#x1F473&#x1F3FB&#x200D&#x2642&#xFE0F",
                    Title: "Man Wearing Turban: Light Skin Tone"
                }, {
                    Emoji: "&#x1F473&#x1F3FC&#x200D&#x2642&#xFE0F",
                    Title: "Man Wearing Turban: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F473&#x1F3FD&#x200D&#x2642&#xFE0F",
                    Title: "Man Wearing Turban: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F473&#x1F3FE&#x200D&#x2642&#xFE0F",
                    Title: "Man Wearing Turban: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F473&#x1F3FF&#x200D&#x2642&#xFE0F",
                    Title: "Man Wearing Turban: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F473&#x200D&#x2640&#xFE0F",
                    Title: "Woman Wearing Turban"
                }, {
                    Emoji: "&#x1F473&#x1F3FB&#x200D&#x2640&#xFE0F",
                    Title: "Woman Wearing Turban: Light Skin Tone"
                }, {
                    Emoji: "&#x1F473&#x1F3FC&#x200D&#x2640&#xFE0F",
                    Title: "Woman Wearing Turban: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F473&#x1F3FD&#x200D&#x2640&#xFE0F",
                    Title: "Woman Wearing Turban: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F473&#x1F3FE&#x200D&#x2640&#xFE0F",
                    Title: "Woman Wearing Turban: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F473&#x1F3FF&#x200D&#x2640&#xFE0F",
                    Title: "Woman Wearing Turban: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F471",
                    Title: "Blond-Haired Person"
                }, {
                    Emoji: "&#x1F471&#x1F3FB",
                    Title: "Blond-Haired Person: Light Skin Tone"
                }, {
                    Emoji: "&#x1F471&#x1F3FC",
                    Title: "Blond-Haired Person: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F471&#x1F3FD",
                    Title: "Blond-Haired Person: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F471&#x1F3FE",
                    Title: "Blond-Haired Person: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F471&#x1F3FF",
                    Title: "Blond-Haired Person: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F471&#x200D&#x2642&#xFE0F",
                    Title: "Blond-Haired Man"
                }, {
                    Emoji: "&#x1F471&#x1F3FB&#x200D&#x2642&#xFE0F",
                    Title: "Blond-Haired Man: Light Skin Tone"
                }, {
                    Emoji: "&#x1F471&#x1F3FC&#x200D&#x2642&#xFE0F",
                    Title: "Blond-Haired Man: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F471&#x1F3FD&#x200D&#x2642&#xFE0F",
                    Title: "Blond-Haired Man: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F471&#x1F3FE&#x200D&#x2642&#xFE0F",
                    Title: "Blond-Haired Man: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F471&#x1F3FF&#x200D&#x2642&#xFE0F",
                    Title: "Blond-Haired Man: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F471&#x200D&#x2640&#xFE0F",
                    Title: "Blond-Haired Woman"
                }, {
                    Emoji: "&#x1F471&#x1F3FB&#x200D&#x2640&#xFE0F",
                    Title: "Blond-Haired Woman: Light Skin Tone"
                }, {
                    Emoji: "&#x1F471&#x1F3FC&#x200D&#x2640&#xFE0F",
                    Title: "Blond-Haired Woman: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F471&#x1F3FD&#x200D&#x2640&#xFE0F",
                    Title: "Blond-Haired Woman: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F471&#x1F3FE&#x200D&#x2640&#xFE0F",
                    Title: "Blond-Haired Woman: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F471&#x1F3FF&#x200D&#x2640&#xFE0F",
                    Title: "Blond-Haired Woman: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F385",
                    Title: "Santa Claus"
                }, {
                    Emoji: "&#x1F385&#x1F3FB",
                    Title: "Santa Claus: Light Skin Tone"
                }, {
                    Emoji: "&#x1F385&#x1F3FC",
                    Title: "Santa Claus: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F385&#x1F3FD",
                    Title: "Santa Claus: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F385&#x1F3FE",
                    Title: "Santa Claus: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F385&#x1F3FF",
                    Title: "Santa Claus: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F936",
                    Title: "Mrs. Claus"
                }, {
                    Emoji: "&#x1F936&#x1F3FB",
                    Title: "Mrs. Claus: Light Skin Tone"
                }, {
                    Emoji: "&#x1F936&#x1F3FC",
                    Title: "Mrs. Claus: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F936&#x1F3FD",
                    Title: "Mrs. Claus: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F936&#x1F3FE",
                    Title: "Mrs. Claus: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F936&#x1F3FF",
                    Title: "Mrs. Claus: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F478",
                    Title: "Princess"
                }, {
                    Emoji: "&#x1F478&#x1F3FB",
                    Title: "Princess: Light Skin Tone"
                }, {
                    Emoji: "&#x1F478&#x1F3FC",
                    Title: "Princess: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F478&#x1F3FD",
                    Title: "Princess: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F478&#x1F3FE",
                    Title: "Princess: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F478&#x1F3FF",
                    Title: "Princess: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F934",
                    Title: "Prince"
                }, {
                    Emoji: "&#x1F934&#x1F3FB",
                    Title: "Prince: Light Skin Tone"
                }, {
                    Emoji: "&#x1F934&#x1F3FC",
                    Title: "Prince: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F934&#x1F3FD",
                    Title: "Prince: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F934&#x1F3FE",
                    Title: "Prince: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F934&#x1F3FF",
                    Title: "Prince: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F470",
                    Title: "Bride With Veil"
                }, {
                    Emoji: "&#x1F470&#x1F3FB",
                    Title: "Bride With Veil: Light Skin Tone"
                }, {
                    Emoji: "&#x1F470&#x1F3FC",
                    Title: "Bride With Veil: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F470&#x1F3FD",
                    Title: "Bride With Veil: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F470&#x1F3FE",
                    Title: "Bride With Veil: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F470&#x1F3FF",
                    Title: "Bride With Veil: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F935",
                    Title: "Man In Tuxedo"
                }, {
                    Emoji: "&#x1F935&#x1F3FB",
                    Title: "Man In Tuxedo: Light Skin Tone"
                }, {
                    Emoji: "&#x1F935&#x1F3FC",
                    Title: "Man In Tuxedo: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F935&#x1F3FD",
                    Title: "Man In Tuxedo: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F935&#x1F3FE",
                    Title: "Man In Tuxedo: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F935&#x1F3FF",
                    Title: "Man In Tuxedo: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F930",
                    Title: "Pregnant Woman"
                }, {
                    Emoji: "&#x1F930&#x1F3FB",
                    Title: "Pregnant Woman: Light Skin Tone"
                }, {
                    Emoji: "&#x1F930&#x1F3FC",
                    Title: "Pregnant Woman: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F930&#x1F3FD",
                    Title: "Pregnant Woman: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F930&#x1F3FE",
                    Title: "Pregnant Woman: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F930&#x1F3FF",
                    Title: "Pregnant Woman: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F472",
                    Title: "Man With Chinese Cap"
                }, {
                    Emoji: "&#x1F472&#x1F3FB",
                    Title: "Man With Chinese Cap: Light Skin Tone"
                }, {
                    Emoji: "&#x1F472&#x1F3FC",
                    Title: "Man With Chinese Cap: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F472&#x1F3FD",
                    Title: "Man With Chinese Cap: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F472&#x1F3FE",
                    Title: "Man With Chinese Cap: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F472&#x1F3FF",
                    Title: "Man With Chinese Cap: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F64D",
                    Title: "Person Frowning"
                }, {
                    Emoji: "&#x1F64D&#x1F3FB",
                    Title: "Person Frowning: Light Skin Tone"
                }, {
                    Emoji: "&#x1F64D&#x1F3FC",
                    Title: "Person Frowning: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F64D&#x1F3FD",
                    Title: "Person Frowning: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F64D&#x1F3FE",
                    Title: "Person Frowning: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F64D&#x1F3FF",
                    Title: "Person Frowning: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F64D&#x200D&#x2642&#xFE0F",
                    Title: "Man Frowning"
                }, {
                    Emoji: "&#x1F64D&#x1F3FB&#x200D&#x2642&#xFE0F",
                    Title: "Man Frowning: Light Skin Tone"
                }, {
                    Emoji: "&#x1F64D&#x1F3FC&#x200D&#x2642&#xFE0F",
                    Title: "Man Frowning: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F64D&#x1F3FD&#x200D&#x2642&#xFE0F",
                    Title: "Man Frowning: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F64D&#x1F3FE&#x200D&#x2642&#xFE0F",
                    Title: "Man Frowning: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F64D&#x1F3FF&#x200D&#x2642&#xFE0F",
                    Title: "Man Frowning: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F64D&#x200D&#x2640&#xFE0F",
                    Title: "Woman Frowning"
                }, {
                    Emoji: "&#x1F64D&#x1F3FB&#x200D&#x2640&#xFE0F",
                    Title: "Woman Frowning: Light Skin Tone"
                }, {
                    Emoji: "&#x1F64D&#x1F3FC&#x200D&#x2640&#xFE0F",
                    Title: "Woman Frowning: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F64D&#x1F3FD&#x200D&#x2640&#xFE0F",
                    Title: "Woman Frowning: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F64D&#x1F3FE&#x200D&#x2640&#xFE0F",
                    Title: "Woman Frowning: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F64D&#x1F3FF&#x200D&#x2640&#xFE0F",
                    Title: "Woman Frowning: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F64E",
                    Title: "Person Pouting"
                }, {
                    Emoji: "&#x1F64E&#x1F3FB",
                    Title: "Person Pouting: Light Skin Tone"
                }, {
                    Emoji: "&#x1F64E&#x1F3FC",
                    Title: "Person Pouting: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F64E&#x1F3FD",
                    Title: "Person Pouting: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F64E&#x1F3FE",
                    Title: "Person Pouting: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F64E&#x1F3FF",
                    Title: "Person Pouting: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F64E&#x200D&#x2642&#xFE0F",
                    Title: "Man Pouting"
                }, {
                    Emoji: "&#x1F64E&#x1F3FB&#x200D&#x2642&#xFE0F",
                    Title: "Man Pouting: Light Skin Tone"
                }, {
                    Emoji: "&#x1F64E&#x1F3FC&#x200D&#x2642&#xFE0F",
                    Title: "Man Pouting: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F64E&#x1F3FD&#x200D&#x2642&#xFE0F",
                    Title: "Man Pouting: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F64E&#x1F3FE&#x200D&#x2642&#xFE0F",
                    Title: "Man Pouting: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F64E&#x1F3FF&#x200D&#x2642&#xFE0F",
                    Title: "Man Pouting: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F64E&#x200D&#x2640&#xFE0F",
                    Title: "Woman Pouting"
                }, {
                    Emoji: "&#x1F64E&#x1F3FB&#x200D&#x2640&#xFE0F",
                    Title: "Woman Pouting: Light Skin Tone"
                }, {
                    Emoji: "&#x1F64E&#x1F3FC&#x200D&#x2640&#xFE0F",
                    Title: "Woman Pouting: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F64E&#x1F3FD&#x200D&#x2640&#xFE0F",
                    Title: "Woman Pouting: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F64E&#x1F3FE&#x200D&#x2640&#xFE0F",
                    Title: "Woman Pouting: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F64E&#x1F3FF&#x200D&#x2640&#xFE0F",
                    Title: "Woman Pouting: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F645",
                    Title: "Person Gesturing NO"
                }, {
                    Emoji: "&#x1F645&#x1F3FB",
                    Title: "Person Gesturing NO: Light Skin Tone"
                }, {
                    Emoji: "&#x1F645&#x1F3FC",
                    Title: "Person Gesturing NO: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F645&#x1F3FD",
                    Title: "Person Gesturing NO: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F645&#x1F3FE",
                    Title: "Person Gesturing NO: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F645&#x1F3FF",
                    Title: "Person Gesturing NO: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F645&#x200D&#x2642&#xFE0F",
                    Title: "Man Gesturing NO"
                }, {
                    Emoji: "&#x1F645&#x1F3FB&#x200D&#x2642&#xFE0F",
                    Title: "Man Gesturing NO: Light Skin Tone"
                }, {
                    Emoji: "&#x1F645&#x1F3FC&#x200D&#x2642&#xFE0F",
                    Title: "Man Gesturing NO: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F645&#x1F3FD&#x200D&#x2642&#xFE0F",
                    Title: "Man Gesturing NO: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F645&#x1F3FE&#x200D&#x2642&#xFE0F",
                    Title: "Man Gesturing NO: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F645&#x1F3FF&#x200D&#x2642&#xFE0F",
                    Title: "Man Gesturing NO: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F645&#x200D&#x2640&#xFE0F",
                    Title: "Woman Gesturing NO"
                }, {
                    Emoji: "&#x1F645&#x1F3FB&#x200D&#x2640&#xFE0F",
                    Title: "Woman Gesturing NO: Light Skin Tone"
                }, {
                    Emoji: "&#x1F645&#x1F3FC&#x200D&#x2640&#xFE0F",
                    Title: "Woman Gesturing NO: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F645&#x1F3FD&#x200D&#x2640&#xFE0F",
                    Title: "Woman Gesturing NO: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F645&#x1F3FE&#x200D&#x2640&#xFE0F",
                    Title: "Woman Gesturing NO: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F645&#x1F3FF&#x200D&#x2640&#xFE0F",
                    Title: "Woman Gesturing NO: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F646",
                    Title: "Person Gesturing OK"
                }, {
                    Emoji: "&#x1F646&#x1F3FB",
                    Title: "Person Gesturing OK: Light Skin Tone"
                }, {
                    Emoji: "&#x1F646&#x1F3FC",
                    Title: "Person Gesturing OK: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F646&#x1F3FD",
                    Title: "Person Gesturing OK: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F646&#x1F3FE",
                    Title: "Person Gesturing OK: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F646&#x1F3FF",
                    Title: "Person Gesturing OK: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F646&#x200D&#x2642&#xFE0F",
                    Title: "Man Gesturing OK"
                }, {
                    Emoji: "&#x1F646&#x1F3FB&#x200D&#x2642&#xFE0F",
                    Title: "Man Gesturing OK: Light Skin Tone"
                }, {
                    Emoji: "&#x1F646&#x1F3FC&#x200D&#x2642&#xFE0F",
                    Title: "Man Gesturing OK: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F646&#x1F3FD&#x200D&#x2642&#xFE0F",
                    Title: "Man Gesturing OK: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F646&#x1F3FE&#x200D&#x2642&#xFE0F",
                    Title: "Man Gesturing OK: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F646&#x1F3FF&#x200D&#x2642&#xFE0F",
                    Title: "Man Gesturing OK: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F646&#x200D&#x2640&#xFE0F",
                    Title: "Woman Gesturing OK"
                }, {
                    Emoji: "&#x1F646&#x1F3FB&#x200D&#x2640&#xFE0F",
                    Title: "Woman Gesturing OK: Light Skin Tone"
                }, {
                    Emoji: "&#x1F646&#x1F3FC&#x200D&#x2640&#xFE0F",
                    Title: "Woman Gesturing OK: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F646&#x1F3FD&#x200D&#x2640&#xFE0F",
                    Title: "Woman Gesturing OK: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F646&#x1F3FE&#x200D&#x2640&#xFE0F",
                    Title: "Woman Gesturing OK: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F646&#x1F3FF&#x200D&#x2640&#xFE0F",
                    Title: "Woman Gesturing OK: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F481",
                    Title: "Person Tipping Hand"
                }, {
                    Emoji: "&#x1F481&#x1F3FB",
                    Title: "Person Tipping Hand: Light Skin Tone"
                }, {
                    Emoji: "&#x1F481&#x1F3FC",
                    Title: "Person Tipping Hand: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F481&#x1F3FD",
                    Title: "Person Tipping Hand: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F481&#x1F3FE",
                    Title: "Person Tipping Hand: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F481&#x1F3FF",
                    Title: "Person Tipping Hand: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F481&#x200D&#x2642&#xFE0F",
                    Title: "Man Tipping Hand"
                }, {
                    Emoji: "&#x1F481&#x1F3FB&#x200D&#x2642&#xFE0F",
                    Title: "Man Tipping Hand: Light Skin Tone"
                }, {
                    Emoji: "&#x1F481&#x1F3FC&#x200D&#x2642&#xFE0F",
                    Title: "Man Tipping Hand: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F481&#x1F3FD&#x200D&#x2642&#xFE0F",
                    Title: "Man Tipping Hand: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F481&#x1F3FE&#x200D&#x2642&#xFE0F",
                    Title: "Man Tipping Hand: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F481&#x1F3FF&#x200D&#x2642&#xFE0F",
                    Title: "Man Tipping Hand: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F481&#x200D&#x2640&#xFE0F",
                    Title: "Woman Tipping Hand"
                }, {
                    Emoji: "&#x1F481&#x1F3FB&#x200D&#x2640&#xFE0F",
                    Title: "Woman Tipping Hand: Light Skin Tone"
                }, {
                    Emoji: "&#x1F481&#x1F3FC&#x200D&#x2640&#xFE0F",
                    Title: "Woman Tipping Hand: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F481&#x1F3FD&#x200D&#x2640&#xFE0F",
                    Title: "Woman Tipping Hand: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F481&#x1F3FE&#x200D&#x2640&#xFE0F",
                    Title: "Woman Tipping Hand: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F481&#x1F3FF&#x200D&#x2640&#xFE0F",
                    Title: "Woman Tipping Hand: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F64B",
                    Title: "Person Raising Hand"
                }, {
                    Emoji: "&#x1F64B&#x1F3FB",
                    Title: "Person Raising Hand: Light Skin Tone"
                }, {
                    Emoji: "&#x1F64B&#x1F3FC",
                    Title: "Person Raising Hand: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F64B&#x1F3FD",
                    Title: "Person Raising Hand: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F64B&#x1F3FE",
                    Title: "Person Raising Hand: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F64B&#x1F3FF",
                    Title: "Person Raising Hand: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F64B&#x200D&#x2642&#xFE0F",
                    Title: "Man Raising Hand"
                }, {
                    Emoji: "&#x1F64B&#x1F3FB&#x200D&#x2642&#xFE0F",
                    Title: "Man Raising Hand: Light Skin Tone"
                }, {
                    Emoji: "&#x1F64B&#x1F3FC&#x200D&#x2642&#xFE0F",
                    Title: "Man Raising Hand: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F64B&#x1F3FD&#x200D&#x2642&#xFE0F",
                    Title: "Man Raising Hand: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F64B&#x1F3FE&#x200D&#x2642&#xFE0F",
                    Title: "Man Raising Hand: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F64B&#x1F3FF&#x200D&#x2642&#xFE0F",
                    Title: "Man Raising Hand: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F64B&#x200D&#x2640&#xFE0F",
                    Title: "Woman Raising Hand"
                }, {
                    Emoji: "&#x1F64B&#x1F3FB&#x200D&#x2640&#xFE0F",
                    Title: "Woman Raising Hand: Light Skin Tone"
                }, {
                    Emoji: "&#x1F64B&#x1F3FC&#x200D&#x2640&#xFE0F",
                    Title: "Woman Raising Hand: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F64B&#x1F3FD&#x200D&#x2640&#xFE0F",
                    Title: "Woman Raising Hand: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F64B&#x1F3FE&#x200D&#x2640&#xFE0F",
                    Title: "Woman Raising Hand: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F64B&#x1F3FF&#x200D&#x2640&#xFE0F",
                    Title: "Woman Raising Hand: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F647",
                    Title: "Person Bowing"
                }, {
                    Emoji: "&#x1F647&#x1F3FB",
                    Title: "Person Bowing: Light Skin Tone"
                }, {
                    Emoji: "&#x1F647&#x1F3FC",
                    Title: "Person Bowing: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F647&#x1F3FD",
                    Title: "Person Bowing: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F647&#x1F3FE",
                    Title: "Person Bowing: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F647&#x1F3FF",
                    Title: "Person Bowing: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F647&#x200D&#x2642&#xFE0F",
                    Title: "Man Bowing"
                }, {
                    Emoji: "&#x1F647&#x1F3FB&#x200D&#x2642&#xFE0F",
                    Title: "Man Bowing: Light Skin Tone"
                }, {
                    Emoji: "&#x1F647&#x1F3FC&#x200D&#x2642&#xFE0F",
                    Title: "Man Bowing: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F647&#x1F3FD&#x200D&#x2642&#xFE0F",
                    Title: "Man Bowing: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F647&#x1F3FE&#x200D&#x2642&#xFE0F",
                    Title: "Man Bowing: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F647&#x1F3FF&#x200D&#x2642&#xFE0F",
                    Title: "Man Bowing: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F647&#x200D&#x2640&#xFE0F",
                    Title: "Woman Bowing"
                }, {
                    Emoji: "&#x1F647&#x1F3FB&#x200D&#x2640&#xFE0F",
                    Title: "Woman Bowing: Light Skin Tone"
                }, {
                    Emoji: "&#x1F647&#x1F3FC&#x200D&#x2640&#xFE0F",
                    Title: "Woman Bowing: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F647&#x1F3FD&#x200D&#x2640&#xFE0F",
                    Title: "Woman Bowing: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F647&#x1F3FE&#x200D&#x2640&#xFE0F",
                    Title: "Woman Bowing: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F647&#x1F3FF&#x200D&#x2640&#xFE0F",
                    Title: "Woman Bowing: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F926",
                    Title: "Person Facepalming"
                }, {
                    Emoji: "&#x1F926&#x1F3FB",
                    Title: "Person Facepalming: Light Skin Tone"
                }, {
                    Emoji: "&#x1F926&#x1F3FC",
                    Title: "Person Facepalming: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F926&#x1F3FD",
                    Title: "Person Facepalming: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F926&#x1F3FE",
                    Title: "Person Facepalming: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F926&#x1F3FF",
                    Title: "Person Facepalming: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F926&#x200D&#x2642&#xFE0F",
                    Title: "Man Facepalming"
                }, {
                    Emoji: "&#x1F926&#x1F3FB&#x200D&#x2642&#xFE0F",
                    Title: "Man Facepalming: Light Skin Tone"
                }, {
                    Emoji: "&#x1F926&#x1F3FC&#x200D&#x2642&#xFE0F",
                    Title: "Man Facepalming: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F926&#x1F3FD&#x200D&#x2642&#xFE0F",
                    Title: "Man Facepalming: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F926&#x1F3FE&#x200D&#x2642&#xFE0F",
                    Title: "Man Facepalming: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F926&#x1F3FF&#x200D&#x2642&#xFE0F",
                    Title: "Man Facepalming: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F926&#x200D&#x2640&#xFE0F",
                    Title: "Woman Facepalming"
                }, {
                    Emoji: "&#x1F926&#x1F3FB&#x200D&#x2640&#xFE0F",
                    Title: "Woman Facepalming: Light Skin Tone"
                }, {
                    Emoji: "&#x1F926&#x1F3FC&#x200D&#x2640&#xFE0F",
                    Title: "Woman Facepalming: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F926&#x1F3FD&#x200D&#x2640&#xFE0F",
                    Title: "Woman Facepalming: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F926&#x1F3FE&#x200D&#x2640&#xFE0F",
                    Title: "Woman Facepalming: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F926&#x1F3FF&#x200D&#x2640&#xFE0F",
                    Title: "Woman Facepalming: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F937",
                    Title: "Person Shrugging"
                }, {
                    Emoji: "&#x1F937&#x1F3FB",
                    Title: "Person Shrugging: Light Skin Tone"
                }, {
                    Emoji: "&#x1F937&#x1F3FC",
                    Title: "Person Shrugging: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F937&#x1F3FD",
                    Title: "Person Shrugging: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F937&#x1F3FE",
                    Title: "Person Shrugging: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F937&#x1F3FF",
                    Title: "Person Shrugging: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F937&#x200D&#x2642&#xFE0F",
                    Title: "Man Shrugging"
                }, {
                    Emoji: "&#x1F937&#x1F3FB&#x200D&#x2642&#xFE0F",
                    Title: "Man Shrugging: Light Skin Tone"
                }, {
                    Emoji: "&#x1F937&#x1F3FC&#x200D&#x2642&#xFE0F",
                    Title: "Man Shrugging: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F937&#x1F3FD&#x200D&#x2642&#xFE0F",
                    Title: "Man Shrugging: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F937&#x1F3FE&#x200D&#x2642&#xFE0F",
                    Title: "Man Shrugging: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F937&#x1F3FF&#x200D&#x2642&#xFE0F",
                    Title: "Man Shrugging: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F937&#x200D&#x2640&#xFE0F",
                    Title: "Woman Shrugging"
                }, {
                    Emoji: "&#x1F937&#x1F3FB&#x200D&#x2640&#xFE0F",
                    Title: "Woman Shrugging: Light Skin Tone"
                }, {
                    Emoji: "&#x1F937&#x1F3FC&#x200D&#x2640&#xFE0F",
                    Title: "Woman Shrugging: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F937&#x1F3FD&#x200D&#x2640&#xFE0F",
                    Title: "Woman Shrugging: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F937&#x1F3FE&#x200D&#x2640&#xFE0F",
                    Title: "Woman Shrugging: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F937&#x1F3FF&#x200D&#x2640&#xFE0F",
                    Title: "Woman Shrugging: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F486",
                    Title: "Person Getting Massage"
                }, {
                    Emoji: "&#x1F486&#x1F3FB",
                    Title: "Person Getting Massage: Light Skin Tone"
                }, {
                    Emoji: "&#x1F486&#x1F3FC",
                    Title: "Person Getting Massage: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F486&#x1F3FD",
                    Title: "Person Getting Massage: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F486&#x1F3FE",
                    Title: "Person Getting Massage: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F486&#x1F3FF",
                    Title: "Person Getting Massage: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F486&#x200D&#x2642&#xFE0F",
                    Title: "Man Getting Massage"
                }, {
                    Emoji: "&#x1F486&#x1F3FB&#x200D&#x2642&#xFE0F",
                    Title: "Man Getting Massage: Light Skin Tone"
                }, {
                    Emoji: "&#x1F486&#x1F3FC&#x200D&#x2642&#xFE0F",
                    Title: "Man Getting Massage: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F486&#x1F3FD&#x200D&#x2642&#xFE0F",
                    Title: "Man Getting Massage: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F486&#x1F3FE&#x200D&#x2642&#xFE0F",
                    Title: "Man Getting Massage: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F486&#x1F3FF&#x200D&#x2642&#xFE0F",
                    Title: "Man Getting Massage: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F486&#x200D&#x2640&#xFE0F",
                    Title: "Woman Getting Massage"
                }, {
                    Emoji: "&#x1F486&#x1F3FB&#x200D&#x2640&#xFE0F",
                    Title: "Woman Getting Massage: Light Skin Tone"
                }, {
                    Emoji: "&#x1F486&#x1F3FC&#x200D&#x2640&#xFE0F",
                    Title: "Woman Getting Massage: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F486&#x1F3FD&#x200D&#x2640&#xFE0F",
                    Title: "Woman Getting Massage: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F486&#x1F3FE&#x200D&#x2640&#xFE0F",
                    Title: "Woman Getting Massage: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F486&#x1F3FF&#x200D&#x2640&#xFE0F",
                    Title: "Woman Getting Massage: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F487",
                    Title: "Person Getting Haircut"
                }, {
                    Emoji: "&#x1F487&#x1F3FB",
                    Title: "Person Getting Haircut: Light Skin Tone"
                }, {
                    Emoji: "&#x1F487&#x1F3FC",
                    Title: "Person Getting Haircut: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F487&#x1F3FD",
                    Title: "Person Getting Haircut: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F487&#x1F3FE",
                    Title: "Person Getting Haircut: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F487&#x1F3FF",
                    Title: "Person Getting Haircut: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F487&#x200D&#x2642&#xFE0F",
                    Title: "Man Getting Haircut"
                }, {
                    Emoji: "&#x1F487&#x1F3FB&#x200D&#x2642&#xFE0F",
                    Title: "Man Getting Haircut: Light Skin Tone"
                }, {
                    Emoji: "&#x1F487&#x1F3FC&#x200D&#x2642&#xFE0F",
                    Title: "Man Getting Haircut: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F487&#x1F3FD&#x200D&#x2642&#xFE0F",
                    Title: "Man Getting Haircut: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F487&#x1F3FE&#x200D&#x2642&#xFE0F",
                    Title: "Man Getting Haircut: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F487&#x1F3FF&#x200D&#x2642&#xFE0F",
                    Title: "Man Getting Haircut: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F487&#x200D&#x2640&#xFE0F",
                    Title: "Woman Getting Haircut"
                }, {
                    Emoji: "&#x1F487&#x1F3FB&#x200D&#x2640&#xFE0F",
                    Title: "Woman Getting Haircut: Light Skin Tone"
                }, {
                    Emoji: "&#x1F487&#x1F3FC&#x200D&#x2640&#xFE0F",
                    Title: "Woman Getting Haircut: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F487&#x1F3FD&#x200D&#x2640&#xFE0F",
                    Title: "Woman Getting Haircut: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F487&#x1F3FE&#x200D&#x2640&#xFE0F",
                    Title: "Woman Getting Haircut: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F487&#x1F3FF&#x200D&#x2640&#xFE0F",
                    Title: "Woman Getting Haircut: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F6B6",
                    Title: "Person Walking"
                }, {
                    Emoji: "&#x1F6B6&#x1F3FB",
                    Title: "Person Walking: Light Skin Tone"
                }, {
                    Emoji: "&#x1F6B6&#x1F3FC",
                    Title: "Person Walking: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F6B6&#x1F3FD",
                    Title: "Person Walking: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F6B6&#x1F3FE",
                    Title: "Person Walking: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F6B6&#x1F3FF",
                    Title: "Person Walking: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F6B6&#x200D&#x2642&#xFE0F",
                    Title: "Man Walking"
                }, {
                    Emoji: "&#x1F6B6&#x1F3FB&#x200D&#x2642&#xFE0F",
                    Title: "Man Walking: Light Skin Tone"
                }, {
                    Emoji: "&#x1F6B6&#x1F3FC&#x200D&#x2642&#xFE0F",
                    Title: "Man Walking: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F6B6&#x1F3FD&#x200D&#x2642&#xFE0F",
                    Title: "Man Walking: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F6B6&#x1F3FE&#x200D&#x2642&#xFE0F",
                    Title: "Man Walking: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F6B6&#x1F3FF&#x200D&#x2642&#xFE0F",
                    Title: "Man Walking: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F6B6&#x200D&#x2640&#xFE0F",
                    Title: "Woman Walking"
                }, {
                    Emoji: "&#x1F6B6&#x1F3FB&#x200D&#x2640&#xFE0F",
                    Title: "Woman Walking: Light Skin Tone"
                }, {
                    Emoji: "&#x1F6B6&#x1F3FC&#x200D&#x2640&#xFE0F",
                    Title: "Woman Walking: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F6B6&#x1F3FD&#x200D&#x2640&#xFE0F",
                    Title: "Woman Walking: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F6B6&#x1F3FE&#x200D&#x2640&#xFE0F",
                    Title: "Woman Walking: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F6B6&#x1F3FF&#x200D&#x2640&#xFE0F",
                    Title: "Woman Walking: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F3C3",
                    Title: "Person Running"
                }, {
                    Emoji: "&#x1F3C3&#x1F3FB",
                    Title: "Person Running: Light Skin Tone"
                }, {
                    Emoji: "&#x1F3C3&#x1F3FC",
                    Title: "Person Running: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F3C3&#x1F3FD",
                    Title: "Person Running: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F3C3&#x1F3FE",
                    Title: "Person Running: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F3C3&#x1F3FF",
                    Title: "Person Running: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F3C3&#x200D&#x2642&#xFE0F",
                    Title: "Man Running"
                }, {
                    Emoji: "&#x1F3C3&#x1F3FB&#x200D&#x2642&#xFE0F",
                    Title: "Man Running: Light Skin Tone"
                }, {
                    Emoji: "&#x1F3C3&#x1F3FC&#x200D&#x2642&#xFE0F",
                    Title: "Man Running: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F3C3&#x1F3FD&#x200D&#x2642&#xFE0F",
                    Title: "Man Running: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F3C3&#x1F3FE&#x200D&#x2642&#xFE0F",
                    Title: "Man Running: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F3C3&#x1F3FF&#x200D&#x2642&#xFE0F",
                    Title: "Man Running: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F3C3&#x200D&#x2640&#xFE0F",
                    Title: "Woman Running"
                }, {
                    Emoji: "&#x1F3C3&#x1F3FB&#x200D&#x2640&#xFE0F",
                    Title: "Woman Running: Light Skin Tone"
                }, {
                    Emoji: "&#x1F3C3&#x1F3FC&#x200D&#x2640&#xFE0F",
                    Title: "Woman Running: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F3C3&#x1F3FD&#x200D&#x2640&#xFE0F",
                    Title: "Woman Running: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F3C3&#x1F3FE&#x200D&#x2640&#xFE0F",
                    Title: "Woman Running: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F3C3&#x1F3FF&#x200D&#x2640&#xFE0F",
                    Title: "Woman Running: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F483",
                    Title: "Woman Dancing"
                }, {
                    Emoji: "&#x1F483&#x1F3FB",
                    Title: "Woman Dancing: Light Skin Tone"
                }, {
                    Emoji: "&#x1F483&#x1F3FC",
                    Title: "Woman Dancing: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F483&#x1F3FD",
                    Title: "Woman Dancing: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F483&#x1F3FE",
                    Title: "Woman Dancing: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F483&#x1F3FF",
                    Title: "Woman Dancing: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F57A",
                    Title: "Man Dancing"
                }, {
                    Emoji: "&#x1F57A&#x1F3FB",
                    Title: "Man Dancing: Light Skin Tone"
                }, {
                    Emoji: "&#x1F57A&#x1F3FC",
                    Title: "Man Dancing: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F57A&#x1F3FD",
                    Title: "Man Dancing: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F57A&#x1F3FE",
                    Title: "Man Dancing: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F57A&#x1F3FF",
                    Title: "Man Dancing: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F46F",
                    Title: "People With Bunny Ears Partying"
                }, {
                    Emoji: "&#x1F46F&#x200D&#x2642&#xFE0F",
                    Title: "Men With Bunny Ears Partying"
                }, {
                    Emoji: "&#x1F46F&#x200D&#x2640&#xFE0F",
                    Title: "Women With Bunny Ears Partying"
                }, {
                    Emoji: "&#x1F574",
                    Title: "Man In Business Suit Levitating"
                }, {
                    Emoji: "&#x1F574&#x1F3FB",
                    Title: "Man In Business Suit Levitating: Light Skin Tone"
                }, {
                    Emoji: "&#x1F574&#x1F3FC",
                    Title: "Man In Business Suit Levitating: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F574&#x1F3FD",
                    Title: "Man In Business Suit Levitating: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F574&#x1F3FE",
                    Title: "Man In Business Suit Levitating: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F574&#x1F3FF",
                    Title: "Man In Business Suit Levitating: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F5E3",
                    Title: "Speaking Head"
                }, {
                    Emoji: "&#x1F464",
                    Title: "Bust In Silhouette"
                }, {
                    Emoji: "&#x1F465",
                    Title: "Busts In Silhouette"
                }, {
                    Emoji: "&#x1F93A",
                    Title: "Person Fencing"
                }, {
                    Emoji: "&#x1F3C7",
                    Title: "Horse Racing"
                }, {
                    Emoji: "&#x1F3C7&#x1F3FB",
                    Title: "Horse Racing: Light Skin Tone"
                }, {
                    Emoji: "&#x1F3C7&#x1F3FC",
                    Title: "Horse Racing: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F3C7&#x1F3FD",
                    Title: "Horse Racing: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F3C7&#x1F3FE",
                    Title: "Horse Racing: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F3C7&#x1F3FF",
                    Title: "Horse Racing: Dark Skin Tone"
                }, {
                    Emoji: "&#x26F7",
                    Title: "Skier"
                }, {
                    Emoji: "&#x1F3C2",
                    Title: "Snowboarder"
                }, {
                    Emoji: "&#x1F3C2&#x1F3FB",
                    Title: "Snowboarder: Light Skin Tone"
                }, {
                    Emoji: "&#x1F3C2&#x1F3FC",
                    Title: "Snowboarder: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F3C2&#x1F3FD",
                    Title: "Snowboarder: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F3C2&#x1F3FE",
                    Title: "Snowboarder: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F3C2&#x1F3FF",
                    Title: "Snowboarder: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F3CC",
                    Title: "Person Golfing"
                }, {
                    Emoji: "&#x1F3CC&#x1F3FB",
                    Title: "Person Golfing: Light Skin Tone"
                }, {
                    Emoji: "&#x1F3CC&#x1F3FC",
                    Title: "Person Golfing: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F3CC&#x1F3FD",
                    Title: "Person Golfing: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F3CC&#x1F3FE",
                    Title: "Person Golfing: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F3CC&#x1F3FF",
                    Title: "Person Golfing: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F3CC&#xFE0F&#x200D&#x2642&#xFE0F",
                    Title: "Man Golfing"
                }, {
                    Emoji: "&#x1F3CC&#x1F3FB&#x200D&#x2642&#xFE0F",
                    Title: "Man Golfing: Light Skin Tone"
                }, {
                    Emoji: "&#x1F3CC&#x1F3FC&#x200D&#x2642&#xFE0F",
                    Title: "Man Golfing: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F3CC&#x1F3FD&#x200D&#x2642&#xFE0F",
                    Title: "Man Golfing: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F3CC&#x1F3FE&#x200D&#x2642&#xFE0F",
                    Title: "Man Golfing: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F3CC&#x1F3FF&#x200D&#x2642&#xFE0F",
                    Title: "Man Golfing: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F3CC&#xFE0F&#x200D&#x2640&#xFE0F",
                    Title: "Woman Golfing"
                }, {
                    Emoji: "&#x1F3CC&#x1F3FB&#x200D&#x2640&#xFE0F",
                    Title: "Woman Golfing: Light Skin Tone"
                }, {
                    Emoji: "&#x1F3CC&#x1F3FC&#x200D&#x2640&#xFE0F",
                    Title: "Woman Golfing: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F3CC&#x1F3FD&#x200D&#x2640&#xFE0F",
                    Title: "Woman Golfing: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F3CC&#x1F3FE&#x200D&#x2640&#xFE0F",
                    Title: "Woman Golfing: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F3CC&#x1F3FF&#x200D&#x2640&#xFE0F",
                    Title: "Woman Golfing: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F3C4",
                    Title: "Person Surfing"
                }, {
                    Emoji: "&#x1F3C4&#x1F3FB",
                    Title: "Person Surfing: Light Skin Tone"
                }, {
                    Emoji: "&#x1F3C4&#x1F3FC",
                    Title: "Person Surfing: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F3C4&#x1F3FD",
                    Title: "Person Surfing: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F3C4&#x1F3FE",
                    Title: "Person Surfing: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F3C4&#x1F3FF",
                    Title: "Person Surfing: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F3C4&#x200D&#x2642&#xFE0F",
                    Title: "Man Surfing"
                }, {
                    Emoji: "&#x1F3C4&#x1F3FB&#x200D&#x2642&#xFE0F",
                    Title: "Man Surfing: Light Skin Tone"
                }, {
                    Emoji: "&#x1F3C4&#x1F3FC&#x200D&#x2642&#xFE0F",
                    Title: "Man Surfing: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F3C4&#x1F3FD&#x200D&#x2642&#xFE0F",
                    Title: "Man Surfing: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F3C4&#x1F3FE&#x200D&#x2642&#xFE0F",
                    Title: "Man Surfing: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F3C4&#x1F3FF&#x200D&#x2642&#xFE0F",
                    Title: "Man Surfing: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F3C4&#x200D&#x2640&#xFE0F",
                    Title: "Woman Surfing"
                }, {
                    Emoji: "&#x1F3C4&#x1F3FB&#x200D&#x2640&#xFE0F",
                    Title: "Woman Surfing: Light Skin Tone"
                }, {
                    Emoji: "&#x1F3C4&#x1F3FC&#x200D&#x2640&#xFE0F",
                    Title: "Woman Surfing: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F3C4&#x1F3FD&#x200D&#x2640&#xFE0F",
                    Title: "Woman Surfing: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F3C4&#x1F3FE&#x200D&#x2640&#xFE0F",
                    Title: "Woman Surfing: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F3C4&#x1F3FF&#x200D&#x2640&#xFE0F",
                    Title: "Woman Surfing: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F6A3",
                    Title: "Person Rowing Boat"
                }, {
                    Emoji: "&#x1F6A3&#x1F3FB",
                    Title: "Person Rowing Boat: Light Skin Tone"
                }, {
                    Emoji: "&#x1F6A3&#x1F3FC",
                    Title: "Person Rowing Boat: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F6A3&#x1F3FD",
                    Title: "Person Rowing Boat: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F6A3&#x1F3FE",
                    Title: "Person Rowing Boat: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F6A3&#x1F3FF",
                    Title: "Person Rowing Boat: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F6A3&#x200D&#x2642&#xFE0F",
                    Title: "Man Rowing Boat"
                }, {
                    Emoji: "&#x1F6A3&#x1F3FB&#x200D&#x2642&#xFE0F",
                    Title: "Man Rowing Boat: Light Skin Tone"
                }, {
                    Emoji: "&#x1F6A3&#x1F3FC&#x200D&#x2642&#xFE0F",
                    Title: "Man Rowing Boat: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F6A3&#x1F3FD&#x200D&#x2642&#xFE0F",
                    Title: "Man Rowing Boat: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F6A3&#x1F3FE&#x200D&#x2642&#xFE0F",
                    Title: "Man Rowing Boat: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F6A3&#x1F3FF&#x200D&#x2642&#xFE0F",
                    Title: "Man Rowing Boat: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F6A3&#x200D&#x2640&#xFE0F",
                    Title: "Woman Rowing Boat"
                }, {
                    Emoji: "&#x1F6A3&#x1F3FB&#x200D&#x2640&#xFE0F",
                    Title: "Woman Rowing Boat: Light Skin Tone"
                }, {
                    Emoji: "&#x1F6A3&#x1F3FC&#x200D&#x2640&#xFE0F",
                    Title: "Woman Rowing Boat: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F6A3&#x1F3FD&#x200D&#x2640&#xFE0F",
                    Title: "Woman Rowing Boat: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F6A3&#x1F3FE&#x200D&#x2640&#xFE0F",
                    Title: "Woman Rowing Boat: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F6A3&#x1F3FF&#x200D&#x2640&#xFE0F",
                    Title: "Woman Rowing Boat: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F3CA",
                    Title: "Person Swimming"
                }, {
                    Emoji: "&#x1F3CA&#x1F3FB",
                    Title: "Person Swimming: Light Skin Tone"
                }, {
                    Emoji: "&#x1F3CA&#x1F3FC",
                    Title: "Person Swimming: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F3CA&#x1F3FD",
                    Title: "Person Swimming: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F3CA&#x1F3FE",
                    Title: "Person Swimming: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F3CA&#x1F3FF",
                    Title: "Person Swimming: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F3CA&#x200D&#x2642&#xFE0F",
                    Title: "Man Swimming"
                }, {
                    Emoji: "&#x1F3CA&#x1F3FB&#x200D&#x2642&#xFE0F",
                    Title: "Man Swimming: Light Skin Tone"
                }, {
                    Emoji: "&#x1F3CA&#x1F3FC&#x200D&#x2642&#xFE0F",
                    Title: "Man Swimming: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F3CA&#x1F3FD&#x200D&#x2642&#xFE0F",
                    Title: "Man Swimming: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F3CA&#x1F3FE&#x200D&#x2642&#xFE0F",
                    Title: "Man Swimming: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F3CA&#x1F3FF&#x200D&#x2642&#xFE0F",
                    Title: "Man Swimming: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F3CA&#x200D&#x2640&#xFE0F",
                    Title: "Woman Swimming"
                }, {
                    Emoji: "&#x1F3CA&#x1F3FB&#x200D&#x2640&#xFE0F",
                    Title: "Woman Swimming: Light Skin Tone"
                }, {
                    Emoji: "&#x1F3CA&#x1F3FC&#x200D&#x2640&#xFE0F",
                    Title: "Woman Swimming: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F3CA&#x1F3FD&#x200D&#x2640&#xFE0F",
                    Title: "Woman Swimming: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F3CA&#x1F3FE&#x200D&#x2640&#xFE0F",
                    Title: "Woman Swimming: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F3CA&#x1F3FF&#x200D&#x2640&#xFE0F",
                    Title: "Woman Swimming: Dark Skin Tone"
                }, {
                    Emoji: "&#x26F9",
                    Title: "Person Bouncing Ball"
                }, {
                    Emoji: "&#x26F9&#x1F3FB",
                    Title: "Person Bouncing Ball: Light Skin Tone"
                }, {
                    Emoji: "&#x26F9&#x1F3FC",
                    Title: "Person Bouncing Ball: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x26F9&#x1F3FD",
                    Title: "Person Bouncing Ball: Medium Skin Tone"
                }, {
                    Emoji: "&#x26F9&#x1F3FE",
                    Title: "Person Bouncing Ball: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x26F9&#x1F3FF",
                    Title: "Person Bouncing Ball: Dark Skin Tone"
                }, {
                    Emoji: "&#x26F9&#xFE0F&#x200D&#x2642&#xFE0F",
                    Title: "Man Bouncing Ball"
                }, {
                    Emoji: "&#x26F9&#x1F3FB&#x200D&#x2642&#xFE0F",
                    Title: "Man Bouncing Ball: Light Skin Tone"
                }, {
                    Emoji: "&#x26F9&#x1F3FC&#x200D&#x2642&#xFE0F",
                    Title: "Man Bouncing Ball: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x26F9&#x1F3FD&#x200D&#x2642&#xFE0F",
                    Title: "Man Bouncing Ball: Medium Skin Tone"
                }, {
                    Emoji: "&#x26F9&#x1F3FE&#x200D&#x2642&#xFE0F",
                    Title: "Man Bouncing Ball: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x26F9&#x1F3FF&#x200D&#x2642&#xFE0F",
                    Title: "Man Bouncing Ball: Dark Skin Tone"
                }, {
                    Emoji: "&#x26F9&#xFE0F&#x200D&#x2640&#xFE0F",
                    Title: "Woman Bouncing Ball"
                }, {
                    Emoji: "&#x26F9&#x1F3FB&#x200D&#x2640&#xFE0F",
                    Title: "Woman Bouncing Ball: Light Skin Tone"
                }, {
                    Emoji: "&#x26F9&#x1F3FC&#x200D&#x2640&#xFE0F",
                    Title: "Woman Bouncing Ball: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x26F9&#x1F3FD&#x200D&#x2640&#xFE0F",
                    Title: "Woman Bouncing Ball: Medium Skin Tone"
                }, {
                    Emoji: "&#x26F9&#x1F3FE&#x200D&#x2640&#xFE0F",
                    Title: "Woman Bouncing Ball: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x26F9&#x1F3FF&#x200D&#x2640&#xFE0F",
                    Title: "Woman Bouncing Ball: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F3CB",
                    Title: "Person Lifting Weights"
                }, {
                    Emoji: "&#x1F3CB&#x1F3FB",
                    Title: "Person Lifting Weights: Light Skin Tone"
                }, {
                    Emoji: "&#x1F3CB&#x1F3FC",
                    Title: "Person Lifting Weights: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F3CB&#x1F3FD",
                    Title: "Person Lifting Weights: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F3CB&#x1F3FE",
                    Title: "Person Lifting Weights: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F3CB&#x1F3FF",
                    Title: "Person Lifting Weights: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F3CB&#xFE0F&#x200D&#x2642&#xFE0F",
                    Title: "Man Lifting Weights"
                }, {
                    Emoji: "&#x1F3CB&#x1F3FB&#x200D&#x2642&#xFE0F",
                    Title: "Man Lifting Weights: Light Skin Tone"
                }, {
                    Emoji: "&#x1F3CB&#x1F3FC&#x200D&#x2642&#xFE0F",
                    Title: "Man Lifting Weights: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F3CB&#x1F3FD&#x200D&#x2642&#xFE0F",
                    Title: "Man Lifting Weights: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F3CB&#x1F3FE&#x200D&#x2642&#xFE0F",
                    Title: "Man Lifting Weights: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F3CB&#x1F3FF&#x200D&#x2642&#xFE0F",
                    Title: "Man Lifting Weights: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F3CB&#xFE0F&#x200D&#x2640&#xFE0F",
                    Title: "Woman Lifting Weights"
                }, {
                    Emoji: "&#x1F3CB&#x1F3FB&#x200D&#x2640&#xFE0F",
                    Title: "Woman Lifting Weights: Light Skin Tone"
                }, {
                    Emoji: "&#x1F3CB&#x1F3FC&#x200D&#x2640&#xFE0F",
                    Title: "Woman Lifting Weights: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F3CB&#x1F3FD&#x200D&#x2640&#xFE0F",
                    Title: "Woman Lifting Weights: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F3CB&#x1F3FE&#x200D&#x2640&#xFE0F",
                    Title: "Woman Lifting Weights: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F3CB&#x1F3FF&#x200D&#x2640&#xFE0F",
                    Title: "Woman Lifting Weights: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F6B4",
                    Title: "Person Biking"
                }, {
                    Emoji: "&#x1F6B4&#x1F3FB",
                    Title: "Person Biking: Light Skin Tone"
                }, {
                    Emoji: "&#x1F6B4&#x1F3FC",
                    Title: "Person Biking: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F6B4&#x1F3FD",
                    Title: "Person Biking: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F6B4&#x1F3FE",
                    Title: "Person Biking: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F6B4&#x1F3FF",
                    Title: "Person Biking: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F6B4&#x200D&#x2642&#xFE0F",
                    Title: "Man Biking"
                }, {
                    Emoji: "&#x1F6B4&#x1F3FB&#x200D&#x2642&#xFE0F",
                    Title: "Man Biking: Light Skin Tone"
                }, {
                    Emoji: "&#x1F6B4&#x1F3FC&#x200D&#x2642&#xFE0F",
                    Title: "Man Biking: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F6B4&#x1F3FD&#x200D&#x2642&#xFE0F",
                    Title: "Man Biking: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F6B4&#x1F3FE&#x200D&#x2642&#xFE0F",
                    Title: "Man Biking: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F6B4&#x1F3FF&#x200D&#x2642&#xFE0F",
                    Title: "Man Biking: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F6B4&#x200D&#x2640&#xFE0F",
                    Title: "Woman Biking"
                }, {
                    Emoji: "&#x1F6B4&#x1F3FB&#x200D&#x2640&#xFE0F",
                    Title: "Woman Biking: Light Skin Tone"
                }, {
                    Emoji: "&#x1F6B4&#x1F3FC&#x200D&#x2640&#xFE0F",
                    Title: "Woman Biking: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F6B4&#x1F3FD&#x200D&#x2640&#xFE0F",
                    Title: "Woman Biking: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F6B4&#x1F3FE&#x200D&#x2640&#xFE0F",
                    Title: "Woman Biking: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F6B4&#x1F3FF&#x200D&#x2640&#xFE0F",
                    Title: "Woman Biking: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F6B5",
                    Title: "Person Mountain Biking"
                }, {
                    Emoji: "&#x1F6B5&#x1F3FB",
                    Title: "Person Mountain Biking: Light Skin Tone"
                }, {
                    Emoji: "&#x1F6B5&#x1F3FC",
                    Title: "Person Mountain Biking: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F6B5&#x1F3FD",
                    Title: "Person Mountain Biking: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F6B5&#x1F3FE",
                    Title: "Person Mountain Biking: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F6B5&#x1F3FF",
                    Title: "Person Mountain Biking: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F6B5&#x200D&#x2642&#xFE0F",
                    Title: "Man Mountain Biking"
                }, {
                    Emoji: "&#x1F6B5&#x1F3FB&#x200D&#x2642&#xFE0F",
                    Title: "Man Mountain Biking: Light Skin Tone"
                }, {
                    Emoji: "&#x1F6B5&#x1F3FC&#x200D&#x2642&#xFE0F",
                    Title: "Man Mountain Biking: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F6B5&#x1F3FD&#x200D&#x2642&#xFE0F",
                    Title: "Man Mountain Biking: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F6B5&#x1F3FE&#x200D&#x2642&#xFE0F",
                    Title: "Man Mountain Biking: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F6B5&#x1F3FF&#x200D&#x2642&#xFE0F",
                    Title: "Man Mountain Biking: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F6B5&#x200D&#x2640&#xFE0F",
                    Title: "Woman Mountain Biking"
                }, {
                    Emoji: "&#x1F6B5&#x1F3FB&#x200D&#x2640&#xFE0F",
                    Title: "Woman Mountain Biking: Light Skin Tone"
                }, {
                    Emoji: "&#x1F6B5&#x1F3FC&#x200D&#x2640&#xFE0F",
                    Title: "Woman Mountain Biking: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F6B5&#x1F3FD&#x200D&#x2640&#xFE0F",
                    Title: "Woman Mountain Biking: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F6B5&#x1F3FE&#x200D&#x2640&#xFE0F",
                    Title: "Woman Mountain Biking: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F6B5&#x1F3FF&#x200D&#x2640&#xFE0F",
                    Title: "Woman Mountain Biking: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F3CE",
                    Title: "Racing Car"
                }, {
                    Emoji: "&#x1F3CD",
                    Title: "Motorcycle"
                }, {
                    Emoji: "&#x1F938",
                    Title: "Person Cartwheeling"
                }, {
                    Emoji: "&#x1F938&#x1F3FB",
                    Title: "Person Cartwheeling: Light Skin Tone"
                }, {
                    Emoji: "&#x1F938&#x1F3FC",
                    Title: "Person Cartwheeling: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F938&#x1F3FD",
                    Title: "Person Cartwheeling: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F938&#x1F3FE",
                    Title: "Person Cartwheeling: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F938&#x1F3FF",
                    Title: "Person Cartwheeling: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F938&#x200D&#x2642&#xFE0F",
                    Title: "Man Cartwheeling"
                }, {
                    Emoji: "&#x1F938&#x1F3FB&#x200D&#x2642&#xFE0F",
                    Title: "Man Cartwheeling: Light Skin Tone"
                }, {
                    Emoji: "&#x1F938&#x1F3FC&#x200D&#x2642&#xFE0F",
                    Title: "Man Cartwheeling: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F938&#x1F3FD&#x200D&#x2642&#xFE0F",
                    Title: "Man Cartwheeling: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F938&#x1F3FE&#x200D&#x2642&#xFE0F",
                    Title: "Man Cartwheeling: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F938&#x1F3FF&#x200D&#x2642&#xFE0F",
                    Title: "Man Cartwheeling: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F938&#x200D&#x2640&#xFE0F",
                    Title: "Woman Cartwheeling"
                }, {
                    Emoji: "&#x1F938&#x1F3FB&#x200D&#x2640&#xFE0F",
                    Title: "Woman Cartwheeling: Light Skin Tone"
                }, {
                    Emoji: "&#x1F938&#x1F3FC&#x200D&#x2640&#xFE0F",
                    Title: "Woman Cartwheeling: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F938&#x1F3FD&#x200D&#x2640&#xFE0F",
                    Title: "Woman Cartwheeling: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F938&#x1F3FE&#x200D&#x2640&#xFE0F",
                    Title: "Woman Cartwheeling: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F938&#x1F3FF&#x200D&#x2640&#xFE0F",
                    Title: "Woman Cartwheeling: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F93C",
                    Title: "People Wrestling"
                }, {
                    Emoji: "&#x1F93C&#x200D&#x2642&#xFE0F",
                    Title: "Men Wrestling"
                }, {
                    Emoji: "&#x1F93C&#x200D&#x2640&#xFE0F",
                    Title: "Women Wrestling"
                }, {
                    Emoji: "&#x1F93D",
                    Title: "Person Playing Water Polo"
                }, {
                    Emoji: "&#x1F93D&#x1F3FB",
                    Title: "Person Playing Water Polo: Light Skin Tone"
                }, {
                    Emoji: "&#x1F93D&#x1F3FC",
                    Title: "Person Playing Water Polo: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F93D&#x1F3FD",
                    Title: "Person Playing Water Polo: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F93D&#x1F3FE",
                    Title: "Person Playing Water Polo: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F93D&#x1F3FF",
                    Title: "Person Playing Water Polo: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F93D&#x200D&#x2642&#xFE0F",
                    Title: "Man Playing Water Polo"
                }, {
                    Emoji: "&#x1F93D&#x1F3FB&#x200D&#x2642&#xFE0F",
                    Title: "Man Playing Water Polo: Light Skin Tone"
                }, {
                    Emoji: "&#x1F93D&#x1F3FC&#x200D&#x2642&#xFE0F",
                    Title: "Man Playing Water Polo: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F93D&#x1F3FD&#x200D&#x2642&#xFE0F",
                    Title: "Man Playing Water Polo: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F93D&#x1F3FE&#x200D&#x2642&#xFE0F",
                    Title: "Man Playing Water Polo: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F93D&#x1F3FF&#x200D&#x2642&#xFE0F",
                    Title: "Man Playing Water Polo: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F93D&#x200D&#x2640&#xFE0F",
                    Title: "Woman Playing Water Polo"
                }, {
                    Emoji: "&#x1F93D&#x1F3FB&#x200D&#x2640&#xFE0F",
                    Title: "Woman Playing Water Polo: Light Skin Tone"
                }, {
                    Emoji: "&#x1F93D&#x1F3FC&#x200D&#x2640&#xFE0F",
                    Title: "Woman Playing Water Polo: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F93D&#x1F3FD&#x200D&#x2640&#xFE0F",
                    Title: "Woman Playing Water Polo: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F93D&#x1F3FE&#x200D&#x2640&#xFE0F",
                    Title: "Woman Playing Water Polo: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F93D&#x1F3FF&#x200D&#x2640&#xFE0F",
                    Title: "Woman Playing Water Polo: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F93E",
                    Title: "Person Playing Handball"
                }, {
                    Emoji: "&#x1F93E&#x1F3FB",
                    Title: "Person Playing Handball: Light Skin Tone"
                }, {
                    Emoji: "&#x1F93E&#x1F3FC",
                    Title: "Person Playing Handball: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F93E&#x1F3FD",
                    Title: "Person Playing Handball: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F93E&#x1F3FE",
                    Title: "Person Playing Handball: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F93E&#x1F3FF",
                    Title: "Person Playing Handball: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F93E&#x200D&#x2642&#xFE0F",
                    Title: "Man Playing Handball"
                }, {
                    Emoji: "&#x1F93E&#x1F3FB&#x200D&#x2642&#xFE0F",
                    Title: "Man Playing Handball: Light Skin Tone"
                }, {
                    Emoji: "&#x1F93E&#x1F3FC&#x200D&#x2642&#xFE0F",
                    Title: "Man Playing Handball: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F93E&#x1F3FD&#x200D&#x2642&#xFE0F",
                    Title: "Man Playing Handball: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F93E&#x1F3FE&#x200D&#x2642&#xFE0F",
                    Title: "Man Playing Handball: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F93E&#x1F3FF&#x200D&#x2642&#xFE0F",
                    Title: "Man Playing Handball: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F93E&#x200D&#x2640&#xFE0F",
                    Title: "Woman Playing Handball"
                }, {
                    Emoji: "&#x1F93E&#x1F3FB&#x200D&#x2640&#xFE0F",
                    Title: "Woman Playing Handball: Light Skin Tone"
                }, {
                    Emoji: "&#x1F93E&#x1F3FC&#x200D&#x2640&#xFE0F",
                    Title: "Woman Playing Handball: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F93E&#x1F3FD&#x200D&#x2640&#xFE0F",
                    Title: "Woman Playing Handball: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F93E&#x1F3FE&#x200D&#x2640&#xFE0F",
                    Title: "Woman Playing Handball: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F93E&#x1F3FF&#x200D&#x2640&#xFE0F",
                    Title: "Woman Playing Handball: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F939",
                    Title: "Person Juggling"
                }, {
                    Emoji: "&#x1F939&#x1F3FB",
                    Title: "Person Juggling: Light Skin Tone"
                }, {
                    Emoji: "&#x1F939&#x1F3FC",
                    Title: "Person Juggling: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F939&#x1F3FD",
                    Title: "Person Juggling: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F939&#x1F3FE",
                    Title: "Person Juggling: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F939&#x1F3FF",
                    Title: "Person Juggling: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F939&#x200D&#x2642&#xFE0F",
                    Title: "Man Juggling"
                }, {
                    Emoji: "&#x1F939&#x1F3FB&#x200D&#x2642&#xFE0F",
                    Title: "Man Juggling: Light Skin Tone"
                }, {
                    Emoji: "&#x1F939&#x1F3FC&#x200D&#x2642&#xFE0F",
                    Title: "Man Juggling: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F939&#x1F3FD&#x200D&#x2642&#xFE0F",
                    Title: "Man Juggling: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F939&#x1F3FE&#x200D&#x2642&#xFE0F",
                    Title: "Man Juggling: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F939&#x1F3FF&#x200D&#x2642&#xFE0F",
                    Title: "Man Juggling: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F939&#x200D&#x2640&#xFE0F",
                    Title: "Woman Juggling"
                }, {
                    Emoji: "&#x1F939&#x1F3FB&#x200D&#x2640&#xFE0F",
                    Title: "Woman Juggling: Light Skin Tone"
                }, {
                    Emoji: "&#x1F939&#x1F3FC&#x200D&#x2640&#xFE0F",
                    Title: "Woman Juggling: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F939&#x1F3FD&#x200D&#x2640&#xFE0F",
                    Title: "Woman Juggling: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F939&#x1F3FE&#x200D&#x2640&#xFE0F",
                    Title: "Woman Juggling: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F939&#x1F3FF&#x200D&#x2640&#xFE0F",
                    Title: "Woman Juggling: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F46B",
                    Title: "Man And Woman Holding Hands"
                }, {
                    Emoji: "&#x1F46C",
                    Title: "Two Men Holding Hands"
                }, {
                    Emoji: "&#x1F46D",
                    Title: "Two Women Holding Hands"
                }, {
                    Emoji: "&#x1F48F",
                    Title: "Kiss"
                }, {
                    Emoji: "&#x1F469&#x200D&#x2764&#xFE0F&#x200D&#x1F48B&#x200D&#x1F468",
                    Title: "Kiss: Woman, Man"
                }, {
                    Emoji: "&#x1F468&#x200D&#x2764&#xFE0F&#x200D&#x1F48B&#x200D&#x1F468",
                    Title: "Kiss: Man, Man"
                }, {
                    Emoji: "&#x1F469&#x200D&#x2764&#xFE0F&#x200D&#x1F48B&#x200D&#x1F469",
                    Title: "Kiss: Woman, Woman"
                }, {
                    Emoji: "&#x1F491",
                    Title: "Couple With Heart"
                }, {
                    Emoji: "&#x1F469&#x200D&#x2764&#xFE0F&#x200D&#x1F468",
                    Title: "Couple With Heart: Woman, Man"
                }, {
                    Emoji: "&#x1F468&#x200D&#x2764&#xFE0F&#x200D&#x1F468",
                    Title: "Couple With Heart: Man, Man"
                }, {
                    Emoji: "&#x1F469&#x200D&#x2764&#xFE0F&#x200D&#x1F469",
                    Title: "Couple With Heart: Woman, Woman"
                }, {
                    Emoji: "&#x1F46A",
                    Title: "Family"
                }, {
                    Emoji: "&#x1F468&#x200D&#x1F469&#x200D&#x1F466",
                    Title: "Family: Man, Woman, Boy"
                }, {
                    Emoji: "&#x1F468&#x200D&#x1F469&#x200D&#x1F467",
                    Title: "Family: Man, Woman, Girl"
                }, {
                    Emoji: "&#x1F468&#x200D&#x1F469&#x200D&#x1F467&#x200D&#x1F466",
                    Title: "Family: Man, Woman, Girl, Boy"
                }, {
                    Emoji: "&#x1F468&#x200D&#x1F469&#x200D&#x1F466&#x200D&#x1F466",
                    Title: "Family: Man, Woman, Boy, Boy"
                }, {
                    Emoji: "&#x1F468&#x200D&#x1F469&#x200D&#x1F467&#x200D&#x1F467",
                    Title: "Family: Man, Woman, Girl, Girl"
                }, {
                    Emoji: "&#x1F468&#x200D&#x1F468&#x200D&#x1F466",
                    Title: "Family: Man, Man, Boy"
                }, {
                    Emoji: "&#x1F468&#x200D&#x1F468&#x200D&#x1F467",
                    Title: "Family: Man, Man, Girl"
                }, {
                    Emoji: "&#x1F468&#x200D&#x1F468&#x200D&#x1F467&#x200D&#x1F466",
                    Title: "Family: Man, Man, Girl, Boy"
                }, {
                    Emoji: "&#x1F468&#x200D&#x1F468&#x200D&#x1F466&#x200D&#x1F466",
                    Title: "Family: Man, Man, Boy, Boy"
                }, {
                    Emoji: "&#x1F468&#x200D&#x1F468&#x200D&#x1F467&#x200D&#x1F467",
                    Title: "Family: Man, Man, Girl, Girl"
                }, {
                    Emoji: "&#x1F469&#x200D&#x1F469&#x200D&#x1F466",
                    Title: "Family: Woman, Woman, Boy"
                }, {
                    Emoji: "&#x1F469&#x200D&#x1F469&#x200D&#x1F467",
                    Title: "Family: Woman, Woman, Girl"
                }, {
                    Emoji: "&#x1F469&#x200D&#x1F469&#x200D&#x1F467&#x200D&#x1F466",
                    Title: "Family: Woman, Woman, Girl, Boy"
                }, {
                    Emoji: "&#x1F469&#x200D&#x1F469&#x200D&#x1F466&#x200D&#x1F466",
                    Title: "Family: Woman, Woman, Boy, Boy"
                }, {
                    Emoji: "&#x1F469&#x200D&#x1F469&#x200D&#x1F467&#x200D&#x1F467",
                    Title: "Family: Woman, Woman, Girl, Girl"
                }, {
                    Emoji: "&#x1F468&#x200D&#x1F466",
                    Title: "Family: Man, Boy"
                }, {
                    Emoji: "&#x1F468&#x200D&#x1F466&#x200D&#x1F466",
                    Title: "Family: Man, Boy, Boy"
                }, {
                    Emoji: "&#x1F468&#x200D&#x1F467",
                    Title: "Family: Man, Girl"
                }, {
                    Emoji: "&#x1F468&#x200D&#x1F467&#x200D&#x1F466",
                    Title: "Family: Man, Girl, Boy"
                }, {
                    Emoji: "&#x1F468&#x200D&#x1F467&#x200D&#x1F467",
                    Title: "Family: Man, Girl, Girl"
                }, {
                    Emoji: "&#x1F469&#x200D&#x1F466",
                    Title: "Family: Woman, Boy"
                }, {
                    Emoji: "&#x1F469&#x200D&#x1F466&#x200D&#x1F466",
                    Title: "Family: Woman, Boy, Boy"
                }, {
                    Emoji: "&#x1F469&#x200D&#x1F467",
                    Title: "Family: Woman, Girl"
                }, {
                    Emoji: "&#x1F469&#x200D&#x1F467&#x200D&#x1F466",
                    Title: "Family: Woman, Girl, Boy"
                }, {
                    Emoji: "&#x1F469&#x200D&#x1F467&#x200D&#x1F467",
                    Title: "Family: Woman, Girl, Girl"
                }, {
                    Emoji: "&#x1F3FB",
                    Title: "Light Skin Tone"
                }, {
                    Emoji: "&#x1F3FC",
                    Title: "Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F3FD",
                    Title: "Medium Skin Tone"
                }, {
                    Emoji: "&#x1F3FE",
                    Title: "Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F3FF",
                    Title: "Dark Skin Tone"
                }, {
                    Emoji: "&#x1F4AA",
                    Title: "Flexed Biceps"
                }, {
                    Emoji: "&#x1F4AA&#x1F3FB",
                    Title: "Flexed Biceps: Light Skin Tone"
                }, {
                    Emoji: "&#x1F4AA&#x1F3FC",
                    Title: "Flexed Biceps: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F4AA&#x1F3FD",
                    Title: "Flexed Biceps: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F4AA&#x1F3FE",
                    Title: "Flexed Biceps: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F4AA&#x1F3FF",
                    Title: "Flexed Biceps: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F933",
                    Title: "Selfie"
                }, {
                    Emoji: "&#x1F933&#x1F3FB",
                    Title: "Selfie: Light Skin Tone"
                }, {
                    Emoji: "&#x1F933&#x1F3FC",
                    Title: "Selfie: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F933&#x1F3FD",
                    Title: "Selfie: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F933&#x1F3FE",
                    Title: "Selfie: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F933&#x1F3FF",
                    Title: "Selfie: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F448",
                    Title: "Backhand Index Pointing Left"
                }, {
                    Emoji: "&#x1F448&#x1F3FB",
                    Title: "Backhand Index Pointing Left: Light Skin Tone"
                }, {
                    Emoji: "&#x1F448&#x1F3FC",
                    Title: "Backhand Index Pointing Left: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F448&#x1F3FD",
                    Title: "Backhand Index Pointing Left: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F448&#x1F3FE",
                    Title: "Backhand Index Pointing Left: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F448&#x1F3FF",
                    Title: "Backhand Index Pointing Left: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F449",
                    Title: "Backhand Index Pointing Right"
                }, {
                    Emoji: "&#x1F449&#x1F3FB",
                    Title: "Backhand Index Pointing Right: Light Skin Tone"
                }, {
                    Emoji: "&#x1F449&#x1F3FC",
                    Title: "Backhand Index Pointing Right: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F449&#x1F3FD",
                    Title: "Backhand Index Pointing Right: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F449&#x1F3FE",
                    Title: "Backhand Index Pointing Right: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F449&#x1F3FF",
                    Title: "Backhand Index Pointing Right: Dark Skin Tone"
                }, {
                    Emoji: "&#x261D",
                    Title: "Index Pointing Up"
                }, {
                    Emoji: "&#x261D&#x1F3FB",
                    Title: "Index Pointing Up: Light Skin Tone"
                }, {
                    Emoji: "&#x261D&#x1F3FC",
                    Title: "Index Pointing Up: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x261D&#x1F3FD",
                    Title: "Index Pointing Up: Medium Skin Tone"
                }, {
                    Emoji: "&#x261D&#x1F3FE",
                    Title: "Index Pointing Up: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x261D&#x1F3FF",
                    Title: "Index Pointing Up: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F446",
                    Title: "Backhand Index Pointing Up"
                }, {
                    Emoji: "&#x1F446&#x1F3FB",
                    Title: "Backhand Index Pointing Up: Light Skin Tone"
                }, {
                    Emoji: "&#x1F446&#x1F3FC",
                    Title: "Backhand Index Pointing Up: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F446&#x1F3FD",
                    Title: "Backhand Index Pointing Up: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F446&#x1F3FE",
                    Title: "Backhand Index Pointing Up: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F446&#x1F3FF",
                    Title: "Backhand Index Pointing Up: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F595",
                    Title: "Middle Finger"
                }, {
                    Emoji: "&#x1F595&#x1F3FB",
                    Title: "Middle Finger: Light Skin Tone"
                }, {
                    Emoji: "&#x1F595&#x1F3FC",
                    Title: "Middle Finger: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F595&#x1F3FD",
                    Title: "Middle Finger: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F595&#x1F3FE",
                    Title: "Middle Finger: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F595&#x1F3FF",
                    Title: "Middle Finger: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F447",
                    Title: "Backhand Index Pointing Down"
                }, {
                    Emoji: "&#x1F447&#x1F3FB",
                    Title: "Backhand Index Pointing Down: Light Skin Tone"
                }, {
                    Emoji: "&#x1F447&#x1F3FC",
                    Title: "Backhand Index Pointing Down: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F447&#x1F3FD",
                    Title: "Backhand Index Pointing Down: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F447&#x1F3FE",
                    Title: "Backhand Index Pointing Down: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F447&#x1F3FF",
                    Title: "Backhand Index Pointing Down: Dark Skin Tone"
                }, {
                    Emoji: "&#x270C",
                    Title: "Victory Hand"
                }, {
                    Emoji: "&#x270C&#x1F3FB",
                    Title: "Victory Hand: Light Skin Tone"
                }, {
                    Emoji: "&#x270C&#x1F3FC",
                    Title: "Victory Hand: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x270C&#x1F3FD",
                    Title: "Victory Hand: Medium Skin Tone"
                }, {
                    Emoji: "&#x270C&#x1F3FE",
                    Title: "Victory Hand: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x270C&#x1F3FF",
                    Title: "Victory Hand: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F91E",
                    Title: "Crossed Fingers"
                }, {
                    Emoji: "&#x1F91E&#x1F3FB",
                    Title: "Crossed Fingers: Light Skin Tone"
                }, {
                    Emoji: "&#x1F91E&#x1F3FC",
                    Title: "Crossed Fingers: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F91E&#x1F3FD",
                    Title: "Crossed Fingers: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F91E&#x1F3FE",
                    Title: "Crossed Fingers: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F91E&#x1F3FF",
                    Title: "Crossed Fingers: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F596",
                    Title: "Vulcan Salute"
                }, {
                    Emoji: "&#x1F596&#x1F3FB",
                    Title: "Vulcan Salute: Light Skin Tone"
                }, {
                    Emoji: "&#x1F596&#x1F3FC",
                    Title: "Vulcan Salute: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F596&#x1F3FD",
                    Title: "Vulcan Salute: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F596&#x1F3FE",
                    Title: "Vulcan Salute: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F596&#x1F3FF",
                    Title: "Vulcan Salute: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F918",
                    Title: "Sign Of The Horns"
                }, {
                    Emoji: "&#x1F918&#x1F3FB",
                    Title: "Sign Of The Horns: Light Skin Tone"
                }, {
                    Emoji: "&#x1F918&#x1F3FC",
                    Title: "Sign Of The Horns: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F918&#x1F3FD",
                    Title: "Sign Of The Horns: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F918&#x1F3FE",
                    Title: "Sign Of The Horns: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F918&#x1F3FF",
                    Title: "Sign Of The Horns: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F919",
                    Title: "Call Me Hand"
                }, {
                    Emoji: "&#x1F919&#x1F3FB",
                    Title: "Call Me Hand: Light Skin Tone"
                }, {
                    Emoji: "&#x1F919&#x1F3FC",
                    Title: "Call Me Hand: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F919&#x1F3FD",
                    Title: "Call Me Hand: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F919&#x1F3FE",
                    Title: "Call Me Hand: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F919&#x1F3FF",
                    Title: "Call Me Hand: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F590",
                    Title: "Raised Hand With Fingers Splayed"
                }, {
                    Emoji: "&#x1F590&#x1F3FB",
                    Title: "Raised Hand With Fingers Splayed: Light Skin Tone"
                }, {
                    Emoji: "&#x1F590&#x1F3FC",
                    Title: "Raised Hand With Fingers Splayed: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F590&#x1F3FD",
                    Title: "Raised Hand With Fingers Splayed: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F590&#x1F3FE",
                    Title: "Raised Hand With Fingers Splayed: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F590&#x1F3FF",
                    Title: "Raised Hand With Fingers Splayed: Dark Skin Tone"
                }, {
                    Emoji: "&#x270B",
                    Title: "Raised Hand"
                }, {
                    Emoji: "&#x270B&#x1F3FB",
                    Title: "Raised Hand: Light Skin Tone"
                }, {
                    Emoji: "&#x270B&#x1F3FC",
                    Title: "Raised Hand: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x270B&#x1F3FD",
                    Title: "Raised Hand: Medium Skin Tone"
                }, {
                    Emoji: "&#x270B&#x1F3FE",
                    Title: "Raised Hand: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x270B&#x1F3FF",
                    Title: "Raised Hand: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F44C",
                    Title: "OK Hand"
                }, {
                    Emoji: "&#x1F44C&#x1F3FB",
                    Title: "OK Hand: Light Skin Tone"
                }, {
                    Emoji: "&#x1F44C&#x1F3FC",
                    Title: "OK Hand: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F44C&#x1F3FD",
                    Title: "OK Hand: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F44C&#x1F3FE",
                    Title: "OK Hand: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F44C&#x1F3FF",
                    Title: "OK Hand: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F44D",
                    Title: "Thumbs Up"
                }, {
                    Emoji: "&#x1F44D&#x1F3FB",
                    Title: "Thumbs Up: Light Skin Tone"
                }, {
                    Emoji: "&#x1F44D&#x1F3FC",
                    Title: "Thumbs Up: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F44D&#x1F3FD",
                    Title: "Thumbs Up: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F44D&#x1F3FE",
                    Title: "Thumbs Up: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F44D&#x1F3FF",
                    Title: "Thumbs Up: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F44E",
                    Title: "Thumbs Down"
                }, {
                    Emoji: "&#x1F44E&#x1F3FB",
                    Title: "Thumbs Down: Light Skin Tone"
                }, {
                    Emoji: "&#x1F44E&#x1F3FC",
                    Title: "Thumbs Down: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F44E&#x1F3FD",
                    Title: "Thumbs Down: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F44E&#x1F3FE",
                    Title: "Thumbs Down: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F44E&#x1F3FF",
                    Title: "Thumbs Down: Dark Skin Tone"
                }, {
                    Emoji: "&#x270A",
                    Title: "Raised Fist"
                }, {
                    Emoji: "&#x270A&#x1F3FB",
                    Title: "Raised Fist: Light Skin Tone"
                }, {
                    Emoji: "&#x270A&#x1F3FC",
                    Title: "Raised Fist: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x270A&#x1F3FD",
                    Title: "Raised Fist: Medium Skin Tone"
                }, {
                    Emoji: "&#x270A&#x1F3FE",
                    Title: "Raised Fist: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x270A&#x1F3FF",
                    Title: "Raised Fist: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F44A",
                    Title: "Oncoming Fist"
                }, {
                    Emoji: "&#x1F44A&#x1F3FB",
                    Title: "Oncoming Fist: Light Skin Tone"
                }, {
                    Emoji: "&#x1F44A&#x1F3FC",
                    Title: "Oncoming Fist: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F44A&#x1F3FD",
                    Title: "Oncoming Fist: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F44A&#x1F3FE",
                    Title: "Oncoming Fist: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F44A&#x1F3FF",
                    Title: "Oncoming Fist: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F91B",
                    Title: "Left-Facing Fist"
                }, {
                    Emoji: "&#x1F91B&#x1F3FB",
                    Title: "Left-Facing Fist: Light Skin Tone"
                }, {
                    Emoji: "&#x1F91B&#x1F3FC",
                    Title: "Left-Facing Fist: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F91B&#x1F3FD",
                    Title: "Left-Facing Fist: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F91B&#x1F3FE",
                    Title: "Left-Facing Fist: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F91B&#x1F3FF",
                    Title: "Left-Facing Fist: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F91C",
                    Title: "Right-Facing Fist"
                }, {
                    Emoji: "&#x1F91C&#x1F3FB",
                    Title: "Right-Facing Fist: Light Skin Tone"
                }, {
                    Emoji: "&#x1F91C&#x1F3FC",
                    Title: "Right-Facing Fist: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F91C&#x1F3FD",
                    Title: "Right-Facing Fist: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F91C&#x1F3FE",
                    Title: "Right-Facing Fist: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F91C&#x1F3FF",
                    Title: "Right-Facing Fist: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F91A",
                    Title: "Raised Back Of Hand"
                }, {
                    Emoji: "&#x1F91A&#x1F3FB",
                    Title: "Raised Back Of Hand: Light Skin Tone"
                }, {
                    Emoji: "&#x1F91A&#x1F3FC",
                    Title: "Raised Back Of Hand: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F91A&#x1F3FD",
                    Title: "Raised Back Of Hand: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F91A&#x1F3FE",
                    Title: "Raised Back Of Hand: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F91A&#x1F3FF",
                    Title: "Raised Back Of Hand: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F44B",
                    Title: "Waving Hand"
                }, {
                    Emoji: "&#x1F44B&#x1F3FB",
                    Title: "Waving Hand: Light Skin Tone"
                }, {
                    Emoji: "&#x1F44B&#x1F3FC",
                    Title: "Waving Hand: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F44B&#x1F3FD",
                    Title: "Waving Hand: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F44B&#x1F3FE",
                    Title: "Waving Hand: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F44B&#x1F3FF",
                    Title: "Waving Hand: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F44F",
                    Title: "Clapping Hands"
                }, {
                    Emoji: "&#x1F44F&#x1F3FB",
                    Title: "Clapping Hands: Light Skin Tone"
                }, {
                    Emoji: "&#x1F44F&#x1F3FC",
                    Title: "Clapping Hands: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F44F&#x1F3FD",
                    Title: "Clapping Hands: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F44F&#x1F3FE",
                    Title: "Clapping Hands: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F44F&#x1F3FF",
                    Title: "Clapping Hands: Dark Skin Tone"
                }, {
                    Emoji: "&#x270D",
                    Title: "Writing Hand"
                }, {
                    Emoji: "&#x270D&#x1F3FB",
                    Title: "Writing Hand: Light Skin Tone"
                }, {
                    Emoji: "&#x270D&#x1F3FC",
                    Title: "Writing Hand: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x270D&#x1F3FD",
                    Title: "Writing Hand: Medium Skin Tone"
                }, {
                    Emoji: "&#x270D&#x1F3FE",
                    Title: "Writing Hand: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x270D&#x1F3FF",
                    Title: "Writing Hand: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F450",
                    Title: "Open Hands"
                }, {
                    Emoji: "&#x1F450&#x1F3FB",
                    Title: "Open Hands: Light Skin Tone"
                }, {
                    Emoji: "&#x1F450&#x1F3FC",
                    Title: "Open Hands: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F450&#x1F3FD",
                    Title: "Open Hands: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F450&#x1F3FE",
                    Title: "Open Hands: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F450&#x1F3FF",
                    Title: "Open Hands: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F64C",
                    Title: "Raising Hands"
                }, {
                    Emoji: "&#x1F64C&#x1F3FB",
                    Title: "Raising Hands: Light Skin Tone"
                }, {
                    Emoji: "&#x1F64C&#x1F3FC",
                    Title: "Raising Hands: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F64C&#x1F3FD",
                    Title: "Raising Hands: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F64C&#x1F3FE",
                    Title: "Raising Hands: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F64C&#x1F3FF",
                    Title: "Raising Hands: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F64F",
                    Title: "Folded Hands"
                }, {
                    Emoji: "&#x1F64F&#x1F3FB",
                    Title: "Folded Hands: Light Skin Tone"
                }, {
                    Emoji: "&#x1F64F&#x1F3FC",
                    Title: "Folded Hands: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F64F&#x1F3FD",
                    Title: "Folded Hands: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F64F&#x1F3FE",
                    Title: "Folded Hands: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F64F&#x1F3FF",
                    Title: "Folded Hands: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F91D",
                    Title: "Handshake"
                }, {
                    Emoji: "&#x1F485",
                    Title: "Nail Polish"
                }, {
                    Emoji: "&#x1F485&#x1F3FB",
                    Title: "Nail Polish: Light Skin Tone"
                }, {
                    Emoji: "&#x1F485&#x1F3FC",
                    Title: "Nail Polish: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F485&#x1F3FD",
                    Title: "Nail Polish: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F485&#x1F3FE",
                    Title: "Nail Polish: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F485&#x1F3FF",
                    Title: "Nail Polish: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F442",
                    Title: "Ear"
                }, {
                    Emoji: "&#x1F442&#x1F3FB",
                    Title: "Ear: Light Skin Tone"
                }, {
                    Emoji: "&#x1F442&#x1F3FC",
                    Title: "Ear: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F442&#x1F3FD",
                    Title: "Ear: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F442&#x1F3FE",
                    Title: "Ear: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F442&#x1F3FF",
                    Title: "Ear: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F443",
                    Title: "Nose"
                }, {
                    Emoji: "&#x1F443&#x1F3FB",
                    Title: "Nose: Light Skin Tone"
                }, {
                    Emoji: "&#x1F443&#x1F3FC",
                    Title: "Nose: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F443&#x1F3FD",
                    Title: "Nose: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F443&#x1F3FE",
                    Title: "Nose: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F443&#x1F3FF",
                    Title: "Nose: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F463",
                    Title: "Footprints"
                }, {
                    Emoji: "&#x1F440",
                    Title: "Eyes"
                }, {
                    Emoji: "&#x1F441",
                    Title: "Eye"
                }, {
                    Emoji: "&#x1F441&#xFE0F&#x200D&#x1F5E8&#xFE0F",
                    Title: "Eye In Speech Bubble"
                }, {
                    Emoji: "&#x1F445",
                    Title: "Tongue"
                }, {
                    Emoji: "&#x1F444",
                    Title: "Mouth"
                }, {
                    Emoji: "&#x1F48B",
                    Title: "Kiss Mark"
                }, {
                    Emoji: "&#x1F498",
                    Title: "Heart With Arrow"
                }, {
                    Emoji: "&#x2764",
                    Title: "Red Heart"
                }, {
                    Emoji: "&#x1F493",
                    Title: "Beating Heart"
                }, {
                    Emoji: "&#x1F494",
                    Title: "Broken Heart"
                }, {
                    Emoji: "&#x1F495",
                    Title: "Two Hearts"
                }, {
                    Emoji: "&#x1F496",
                    Title: "Sparkling Heart"
                }, {
                    Emoji: "&#x1F497",
                    Title: "Growing Heart"
                }, {
                    Emoji: "&#x1F499",
                    Title: "Blue Heart"
                }, {
                    Emoji: "&#x1F49A",
                    Title: "Green Heart"
                }, {
                    Emoji: "&#x1F49B",
                    Title: "Yellow Heart"
                }, {
                    Emoji: "&#x1F49C",
                    Title: "Purple Heart"
                }, {
                    Emoji: "&#x1F5A4",
                    Title: "Black Heart"
                }, {
                    Emoji: "&#x1F49D",
                    Title: "Heart With Ribbon"
                }, {
                    Emoji: "&#x1F49E",
                    Title: "Revolving Hearts"
                }, {
                    Emoji: "&#x1F49F",
                    Title: "Heart Decoration"
                }, {
                    Emoji: "&#x2763",
                    Title: "Heavy Heart Exclamation"
                }, {
                    Emoji: "&#x1F48C",
                    Title: "Love Letter"
                }, {
                    Emoji: "&#x1F4A4",
                    Title: "Zzz"
                }, {
                    Emoji: "&#x1F4A2",
                    Title: "Anger Symbol"
                }, {
                    Emoji: "&#x1F4A3",
                    Title: "Bomb"
                }, {
                    Emoji: "&#x1F4A5",
                    Title: "Collision"
                }, {
                    Emoji: "&#x1F4A6",
                    Title: "Sweat Droplets"
                }, {
                    Emoji: "&#x1F4A8",
                    Title: "Dashing Away"
                }, {
                    Emoji: "&#x1F4AB",
                    Title: "Dizzy"
                }, {
                    Emoji: "&#x1F4AC",
                    Title: "Speech Balloon"
                }, {
                    Emoji: "&#x1F5E8",
                    Title: "Left Speech Bubble"
                }, {
                    Emoji: "&#x1F5EF",
                    Title: "Right Anger Bubble"
                }, {
                    Emoji: "&#x1F4AD",
                    Title: "Thought Balloon"
                }, {
                    Emoji: "&#x1F573",
                    Title: "Hole"
                }, {
                    Emoji: "&#x1F453",
                    Title: "Glasses"
                }, {
                    Emoji: "&#x1F576",
                    Title: "Sunglasses"
                }, {
                    Emoji: "&#x1F454",
                    Title: "Necktie"
                }, {
                    Emoji: "&#x1F455",
                    Title: "T-Shirt"
                }, {
                    Emoji: "&#x1F456",
                    Title: "Jeans"
                }, {
                    Emoji: "&#x1F457",
                    Title: "Dress"
                }, {
                    Emoji: "&#x1F458",
                    Title: "Kimono"
                }, {
                    Emoji: "&#x1F459",
                    Title: "Bikini"
                }, {
                    Emoji: "&#x1F45A",
                    Title: "Woman’s Clothes"
                }, {
                    Emoji: "&#x1F45B",
                    Title: "Purse"
                }, {
                    Emoji: "&#x1F45C",
                    Title: "Handbag"
                }, {
                    Emoji: "&#x1F45D",
                    Title: "Clutch Bag"
                }, {
                    Emoji: "&#x1F6CD",
                    Title: "Shopping Bags"
                }, {
                    Emoji: "&#x1F392",
                    Title: "School Backpack"
                }, {
                    Emoji: "&#x1F45E",
                    Title: "Man’s Shoe"
                }, {
                    Emoji: "&#x1F45F",
                    Title: "Running Shoe"
                }, {
                    Emoji: "&#x1F460",
                    Title: "High-Heeled Shoe"
                }, {
                    Emoji: "&#x1F461",
                    Title: "Woman’s Sandal"
                }, {
                    Emoji: "&#x1F462",
                    Title: "Woman’s Boot"
                }, {
                    Emoji: "&#x1F451",
                    Title: "Crown"
                }, {
                    Emoji: "&#x1F452",
                    Title: "Woman’s Hat"
                }, {
                    Emoji: "&#x1F3A9",
                    Title: "Top Hat"
                }, {
                    Emoji: "&#x1F393",
                    Title: "Graduation Cap"
                }, {
                    Emoji: "&#x26D1",
                    Title: "Rescue Worker’s Helmet"
                }, {
                    Emoji: "&#x1F4FF",
                    Title: "Prayer Beads"
                }, {
                    Emoji: "&#x1F484",
                    Title: "Lipstick"
                }, {
                    Emoji: "&#x1F48D",
                    Title: "Ring"
                }, {
                    Emoji: "&#x1F48E",
                    Title: "Gem Stone"
                }, {
                    Emoji: "&#x1F435",
                    Title: "Monkey Face"
                }, {
                    Emoji: "&#x1F412",
                    Title: "Monkey"
                }, {
                    Emoji: "&#x1F98D",
                    Title: "Gorilla"
                }, {
                    Emoji: "&#x1F436",
                    Title: "Dog Face"
                }, {
                    Emoji: "&#x1F415",
                    Title: "Dog"
                }, {
                    Emoji: "&#x1F429",
                    Title: "Poodle"
                }, {
                    Emoji: "&#x1F43A",
                    Title: "Wolf Face"
                }, {
                    Emoji: "&#x1F98A",
                    Title: "Fox Face"
                }, {
                    Emoji: "&#x1F431",
                    Title: "Cat Face"
                }, {
                    Emoji: "&#x1F408",
                    Title: "Cat"
                }, {
                    Emoji: "&#x1F981",
                    Title: "Lion Face"
                }, {
                    Emoji: "&#x1F42F",
                    Title: "Tiger Face"
                }, {
                    Emoji: "&#x1F405",
                    Title: "Tiger"
                }, {
                    Emoji: "&#x1F406",
                    Title: "Leopard"
                }, {
                    Emoji: "&#x1F434",
                    Title: "Horse Face"
                }, {
                    Emoji: "&#x1F40E",
                    Title: "Horse"
                }, {
                    Emoji: "&#x1F98C",
                    Title: "Deer"
                }, {
                    Emoji: "&#x1F984",
                    Title: "Unicorn Face"
                }, {
                    Emoji: "&#x1F42E",
                    Title: "Cow Face"
                }, {
                    Emoji: "&#x1F402",
                    Title: "Ox"
                }, {
                    Emoji: "&#x1F403",
                    Title: "Water Buffalo"
                }, {
                    Emoji: "&#x1F404",
                    Title: "Cow"
                }, {
                    Emoji: "&#x1F437",
                    Title: "Pig Face"
                }, {
                    Emoji: "&#x1F416",
                    Title: "Pig"
                }, {
                    Emoji: "&#x1F417",
                    Title: "Boar"
                }, {
                    Emoji: "&#x1F43D",
                    Title: "Pig Nose"
                }, {
                    Emoji: "&#x1F40F",
                    Title: "Ram"
                }, {
                    Emoji: "&#x1F411",
                    Title: "Sheep"
                }, {
                    Emoji: "&#x1F410",
                    Title: "Goat"
                }, {
                    Emoji: "&#x1F42A",
                    Title: "Camel"
                }, {
                    Emoji: "&#x1F42B",
                    Title: "Two-Hump Camel"
                }, {
                    Emoji: "&#x1F418",
                    Title: "Elephant"
                }, {
                    Emoji: "&#x1F98F",
                    Title: "Rhinoceros"
                }, {
                    Emoji: "&#x1F42D",
                    Title: "Mouse Face"
                }, {
                    Emoji: "&#x1F401",
                    Title: "Mouse"
                }, {
                    Emoji: "&#x1F400",
                    Title: "Rat"
                }, {
                    Emoji: "&#x1F439",
                    Title: "Hamster Face"
                }, {
                    Emoji: "&#x1F430",
                    Title: "Rabbit Face"
                }, {
                    Emoji: "&#x1F407",
                    Title: "Rabbit"
                }, {
                    Emoji: "&#x1F43F",
                    Title: "Chipmunk"
                }, {
                    Emoji: "&#x1F987",
                    Title: "Bat"
                }, {
                    Emoji: "&#x1F43B",
                    Title: "Bear Face"
                }, {
                    Emoji: "&#x1F428",
                    Title: "Koala"
                }, {
                    Emoji: "&#x1F43C",
                    Title: "Panda Face"
                }, {
                    Emoji: "&#x1F43E",
                    Title: "Paw Prints"
                }, {
                    Emoji: "&#x1F983",
                    Title: "Turkey"
                }, {
                    Emoji: "&#x1F414",
                    Title: "Chicken"
                }, {
                    Emoji: "&#x1F413",
                    Title: "Rooster"
                }, {
                    Emoji: "&#x1F423",
                    Title: "Hatching Chick"
                }, {
                    Emoji: "&#x1F424",
                    Title: "Baby Chick"
                }, {
                    Emoji: "&#x1F425",
                    Title: "Front-Facing Baby Chick"
                }, {
                    Emoji: "&#x1F426",
                    Title: "Bird"
                }, {
                    Emoji: "&#x1F427",
                    Title: "Penguin"
                }, {
                    Emoji: "&#x1F54A",
                    Title: "Dove"
                }, {
                    Emoji: "&#x1F985",
                    Title: "Eagle"
                }, {
                    Emoji: "&#x1F986",
                    Title: "Duck"
                }, {
                    Emoji: "&#x1F989",
                    Title: "Owl"
                }, {
                    Emoji: "&#x1F438",
                    Title: "Frog Face"
                }, {
                    Emoji: "&#x1F40A",
                    Title: "Crocodile"
                }, {
                    Emoji: "&#x1F422",
                    Title: "Turtle"
                }, {
                    Emoji: "&#x1F98E",
                    Title: "Lizard"
                }, {
                    Emoji: "&#x1F40D",
                    Title: "Snake"
                }, {
                    Emoji: "&#x1F432",
                    Title: "Dragon Face"
                }, {
                    Emoji: "&#x1F409",
                    Title: "Dragon"
                }, {
                    Emoji: "&#x1F433",
                    Title: "Spouting Whale"
                }, {
                    Emoji: "&#x1F40B",
                    Title: "Whale"
                }, {
                    Emoji: "&#x1F42C",
                    Title: "Dolphin"
                }, {
                    Emoji: "&#x1F41F",
                    Title: "Fish"
                }, {
                    Emoji: "&#x1F420",
                    Title: "Tropical Fish"
                }, {
                    Emoji: "&#x1F421",
                    Title: "Blowfish"
                }, {
                    Emoji: "&#x1F988",
                    Title: "Shark"
                }, {
                    Emoji: "&#x1F419",
                    Title: "Octopus"
                }, {
                    Emoji: "&#x1F41A",
                    Title: "Spiral Shell"
                }, {
                    Emoji: "&#x1F980",
                    Title: "Crab"
                }, {
                    Emoji: "&#x1F990",
                    Title: "Shrimp"
                }, {
                    Emoji: "&#x1F991",
                    Title: "Squid"
                }, {
                    Emoji: "&#x1F98B",
                    Title: "Butterfly"
                }, {
                    Emoji: "&#x1F40C",
                    Title: "Snail"
                }, {
                    Emoji: "&#x1F41B",
                    Title: "Bug"
                }, {
                    Emoji: "&#x1F41C",
                    Title: "Ant"
                }, {
                    Emoji: "&#x1F41D",
                    Title: "Honeybee"
                }, {
                    Emoji: "&#x1F41E",
                    Title: "Lady Beetle"
                }, {
                    Emoji: "&#x1F577",
                    Title: "Spider"
                }, {
                    Emoji: "&#x1F578",
                    Title: "Spider Web"
                }, {
                    Emoji: "&#x1F982",
                    Title: "Scorpion"
                }, {
                    Emoji: "&#x1F490",
                    Title: "Bouquet"
                }, {
                    Emoji: "&#x1F338",
                    Title: "Cherry Blossom"
                }, {
                    Emoji: "&#x1F4AE",
                    Title: "White Flower"
                }, {
                    Emoji: "&#x1F3F5",
                    Title: "Rosette"
                }, {
                    Emoji: "&#x1F339",
                    Title: "Rose"
                }, {
                    Emoji: "&#x1F940",
                    Title: "Wilted Flower"
                }, {
                    Emoji: "&#x1F33A",
                    Title: "Hibiscus"
                }, {
                    Emoji: "&#x1F33B",
                    Title: "Sunflower"
                }, {
                    Emoji: "&#x1F33C",
                    Title: "Blossom"
                }, {
                    Emoji: "&#x1F337",
                    Title: "Tulip"
                }, {
                    Emoji: "&#x1F331",
                    Title: "Seedling"
                }, {
                    Emoji: "&#x1F332",
                    Title: "Evergreen Tree"
                }, {
                    Emoji: "&#x1F333",
                    Title: "Deciduous Tree"
                }, {
                    Emoji: "&#x1F334",
                    Title: "Palm Tree"
                }, {
                    Emoji: "&#x1F335",
                    Title: "Cactus"
                }, {
                    Emoji: "&#x1F33E",
                    Title: "Sheaf Of Rice"
                }, {
                    Emoji: "&#x1F33F",
                    Title: "Herb"
                }, {
                    Emoji: "&#x2618",
                    Title: "Shamrock"
                }, {
                    Emoji: "&#x1F340",
                    Title: "Four Leaf Clover"
                }, {
                    Emoji: "&#x1F341",
                    Title: "Maple Leaf"
                }, {
                    Emoji: "&#x1F342",
                    Title: "Fallen Leaf"
                }, {
                    Emoji: "&#x1F343",
                    Title: "Leaf Fluttering In Wind"
                }, {
                    Emoji: "&#x1F347",
                    Title: "Grapes"
                }, {
                    Emoji: "&#x1F348",
                    Title: "Melon"
                }, {
                    Emoji: "&#x1F349",
                    Title: "Watermelon"
                }, {
                    Emoji: "&#x1F34A",
                    Title: "Tangerine"
                }, {
                    Emoji: "&#x1F34B",
                    Title: "Lemon"
                }, {
                    Emoji: "&#x1F34C",
                    Title: "Banana"
                }, {
                    Emoji: "&#x1F34D",
                    Title: "Pineapple"
                }, {
                    Emoji: "&#x1F34E",
                    Title: "Red Apple"
                }, {
                    Emoji: "&#x1F34F",
                    Title: "Green Apple"
                }, {
                    Emoji: "&#x1F350",
                    Title: "Pear"
                }, {
                    Emoji: "&#x1F351",
                    Title: "Peach"
                }, {
                    Emoji: "&#x1F352",
                    Title: "Cherries"
                }, {
                    Emoji: "&#x1F353",
                    Title: "Strawberry"
                }, {
                    Emoji: "&#x1F95D",
                    Title: "Kiwi Fruit"
                }, {
                    Emoji: "&#x1F345",
                    Title: "Tomato"
                }, {
                    Emoji: "&#x1F951",
                    Title: "Avocado"
                }, {
                    Emoji: "&#x1F346",
                    Title: "Eggplant"
                }, {
                    Emoji: "&#x1F954",
                    Title: "Potato"
                }, {
                    Emoji: "&#x1F955",
                    Title: "Carrot"
                }, {
                    Emoji: "&#x1F33D",
                    Title: "Ear Of Corn"
                }, {
                    Emoji: "&#x1F336",
                    Title: "Hot Pepper"
                }, {
                    Emoji: "&#x1F952",
                    Title: "Cucumber"
                }, {
                    Emoji: "&#x1F344",
                    Title: "Mushroom"
                }, {
                    Emoji: "&#x1F95C",
                    Title: "Peanuts"
                }, {
                    Emoji: "&#x1F330",
                    Title: "Chestnut"
                }, {
                    Emoji: "&#x1F35E",
                    Title: "Bread"
                }, {
                    Emoji: "&#x1F950",
                    Title: "Croissant"
                }, {
                    Emoji: "&#x1F956",
                    Title: "Baguette Bread"
                }, {
                    Emoji: "&#x1F95E",
                    Title: "Pancakes"
                }, {
                    Emoji: "&#x1F9C0",
                    Title: "Cheese Wedge"
                }, {
                    Emoji: "&#x1F356",
                    Title: "Meat On Bone"
                }, {
                    Emoji: "&#x1F357",
                    Title: "Poultry Leg"
                }, {
                    Emoji: "&#x1F953",
                    Title: "Bacon"
                }, {
                    Emoji: "&#x1F354",
                    Title: "Hamburger"
                }, {
                    Emoji: "&#x1F35F",
                    Title: "French Fries"
                }, {
                    Emoji: "&#x1F355",
                    Title: "Pizza"
                }, {
                    Emoji: "&#x1F32D",
                    Title: "Hot Dog"
                }, {
                    Emoji: "&#x1F32E",
                    Title: "Taco"
                }, {
                    Emoji: "&#x1F32F",
                    Title: "Burrito"
                }, {
                    Emoji: "&#x1F959",
                    Title: "Stuffed Flatbread"
                }, {
                    Emoji: "&#x1F95A",
                    Title: "Egg"
                }, {
                    Emoji: "&#x1F373",
                    Title: "Cooking"
                }, {
                    Emoji: "&#x1F958",
                    Title: "Shallow Pan Of Food"
                }, {
                    Emoji: "&#x1F372",
                    Title: "Pot Of Food"
                }, {
                    Emoji: "&#x1F957",
                    Title: "Green Salad"
                }, {
                    Emoji: "&#x1F37F",
                    Title: "Popcorn"
                }, {
                    Emoji: "&#x1F371",
                    Title: "Bento Box"
                }, {
                    Emoji: "&#x1F358",
                    Title: "Rice Cracker"
                }, {
                    Emoji: "&#x1F359",
                    Title: "Rice Ball"
                }, {
                    Emoji: "&#x1F35A",
                    Title: "Cooked Rice"
                }, {
                    Emoji: "&#x1F35B",
                    Title: "Curry Rice"
                }, {
                    Emoji: "&#x1F35C",
                    Title: "Steaming Bowl"
                }, {
                    Emoji: "&#x1F35D",
                    Title: "Spaghetti"
                }, {
                    Emoji: "&#x1F360",
                    Title: "Roasted Sweet Potato"
                }, {
                    Emoji: "&#x1F362",
                    Title: "Oden"
                }, {
                    Emoji: "&#x1F363",
                    Title: "Sushi"
                }, {
                    Emoji: "&#x1F364",
                    Title: "Fried Shrimp"
                }, {
                    Emoji: "&#x1F365",
                    Title: "Fish Cake With Swirl"
                }, {
                    Emoji: "&#x1F361",
                    Title: "Dango"
                }, {
                    Emoji: "&#x1F366",
                    Title: "Soft Ice Cream"
                }, {
                    Emoji: "&#x1F367",
                    Title: "Shaved Ice"
                }, {
                    Emoji: "&#x1F368",
                    Title: "Ice Cream"
                }, {
                    Emoji: "&#x1F369",
                    Title: "Doughnut"
                }, {
                    Emoji: "&#x1F36A",
                    Title: "Cookie"
                }, {
                    Emoji: "&#x1F382",
                    Title: "Birthday Cake"
                }, {
                    Emoji: "&#x1F370",
                    Title: "Shortcake"
                }, {
                    Emoji: "&#x1F36B",
                    Title: "Chocolate Bar"
                }, {
                    Emoji: "&#x1F36C",
                    Title: "Candy"
                }, {
                    Emoji: "&#x1F36D",
                    Title: "Lollipop"
                }, {
                    Emoji: "&#x1F36E",
                    Title: "Custard"
                }, {
                    Emoji: "&#x1F36F",
                    Title: "Honey Pot"
                }, {
                    Emoji: "&#x1F37C",
                    Title: "Baby Bottle"
                }, {
                    Emoji: "&#x1F95B",
                    Title: "Glass Of Milk"
                }, {
                    Emoji: "&#x2615",
                    Title: "Hot Beverage"
                }, {
                    Emoji: "&#x1F375",
                    Title: "Teacup Without Handle"
                }, {
                    Emoji: "&#x1F376",
                    Title: "Sake"
                }, {
                    Emoji: "&#x1F37E",
                    Title: "Bottle With Popping Cork"
                }, {
                    Emoji: "&#x1F377",
                    Title: "Wine Glass"
                }, {
                    Emoji: "&#x1F378",
                    Title: "Cocktail Glass"
                }, {
                    Emoji: "&#x1F379",
                    Title: "Tropical Drink"
                }, {
                    Emoji: "&#x1F37A",
                    Title: "Beer Mug"
                }, {
                    Emoji: "&#x1F37B",
                    Title: "Clinking Beer Mugs"
                }, {
                    Emoji: "&#x1F942",
                    Title: "Clinking Glasses"
                }, {
                    Emoji: "&#x1F943",
                    Title: "Tumbler Glass"
                }, {
                    Emoji: "&#x1F37D",
                    Title: "Fork And Knife With Plate"
                }, {
                    Emoji: "&#x1F374",
                    Title: "Fork And Knife"
                }, {
                    Emoji: "&#x1F944",
                    Title: "Spoon"
                }, {
                    Emoji: "&#x1F52A",
                    Title: "Kitchen Knife"
                }, {
                    Emoji: "&#x1F3FA",
                    Title: "Amphora"
                }, {
                    Emoji: "&#x1F30D",
                    Title: "Globe Showing Europe-Africa"
                }, {
                    Emoji: "&#x1F30E",
                    Title: "Globe Showing Americas"
                }, {
                    Emoji: "&#x1F30F",
                    Title: "Globe Showing Asia-Australia"
                }, {
                    Emoji: "&#x1F310",
                    Title: "Globe With Meridians"
                }, {
                    Emoji: "&#x1F5FA",
                    Title: "World Map"
                }, {
                    Emoji: "&#x1F5FE",
                    Title: "Map Of Japan"
                }, {
                    Emoji: "&#x1F3D4",
                    Title: "Snow-Capped Mountain"
                }, {
                    Emoji: "&#x26F0",
                    Title: "Mountain"
                }, {
                    Emoji: "&#x1F30B",
                    Title: "Volcano"
                }, {
                    Emoji: "&#x1F5FB",
                    Title: "Mount Fuji"
                }, {
                    Emoji: "&#x1F3D5",
                    Title: "Camping"
                }, {
                    Emoji: "&#x1F3D6",
                    Title: "Beach With Umbrella"
                }, {
                    Emoji: "&#x1F3DC",
                    Title: "Desert"
                }, {
                    Emoji: "&#x1F3DD",
                    Title: "Desert Island"
                }, {
                    Emoji: "&#x1F3DE",
                    Title: "National Park"
                }, {
                    Emoji: "&#x1F3DF",
                    Title: "Stadium"
                }, {
                    Emoji: "&#x1F3DB",
                    Title: "Classical Building"
                }, {
                    Emoji: "&#x1F3D7",
                    Title: "Building Construction"
                }, {
                    Emoji: "&#x1F3D8",
                    Title: "House"
                }, {
                    Emoji: "&#x1F3D9",
                    Title: "Cityscape"
                }, {
                    Emoji: "&#x1F3DA",
                    Title: "Derelict House"
                }, {
                    Emoji: "&#x1F3E0",
                    Title: "House"
                }, {
                    Emoji: "&#x1F3E1",
                    Title: "House With Garden"
                }, {
                    Emoji: "&#x1F3E2",
                    Title: "Office Building"
                }, {
                    Emoji: "&#x1F3E3",
                    Title: "Japanese Post Office"
                }, {
                    Emoji: "&#x1F3E4",
                    Title: "Post Office"
                }, {
                    Emoji: "&#x1F3E5",
                    Title: "Hospital"
                }, {
                    Emoji: "&#x1F3E6",
                    Title: "Bank"
                }, {
                    Emoji: "&#x1F3E8",
                    Title: "Hotel"
                }, {
                    Emoji: "&#x1F3E9",
                    Title: "Love Hotel"
                }, {
                    Emoji: "&#x1F3EA",
                    Title: "Convenience Store"
                }, {
                    Emoji: "&#x1F3EB",
                    Title: "School"
                }, {
                    Emoji: "&#x1F3EC",
                    Title: "Department Store"
                }, {
                    Emoji: "&#x1F3ED",
                    Title: "Factory"
                }, {
                    Emoji: "&#x1F3EF",
                    Title: "Japanese Castle"
                }, {
                    Emoji: "&#x1F3F0",
                    Title: "Castle"
                }, {
                    Emoji: "&#x1F492",
                    Title: "Wedding"
                }, {
                    Emoji: "&#x1F5FC",
                    Title: "Tokyo Tower"
                }, {
                    Emoji: "&#x1F5FD",
                    Title: "Statue Of Liberty"
                }, {
                    Emoji: "&#x26EA",
                    Title: "Church"
                }, {
                    Emoji: "&#x1F54C",
                    Title: "Mosque"
                }, {
                    Emoji: "&#x1F54D",
                    Title: "Synagogue"
                }, {
                    Emoji: "&#x26E9",
                    Title: "Shinto Shrine"
                }, {
                    Emoji: "&#x1F54B",
                    Title: "Kaaba"
                }, {
                    Emoji: "&#x26F2",
                    Title: "Fountain"
                }, {
                    Emoji: "&#x26FA",
                    Title: "Tent"
                }, {
                    Emoji: "&#x1F301",
                    Title: "Foggy"
                }, {
                    Emoji: "&#x1F303",
                    Title: "Night With Stars"
                }, {
                    Emoji: "&#x1F304",
                    Title: "Sunrise Over Mountains"
                }, {
                    Emoji: "&#x1F305",
                    Title: "Sunrise"
                }, {
                    Emoji: "&#x1F306",
                    Title: "Cityscape At Dusk"
                }, {
                    Emoji: "&#x1F307",
                    Title: "Sunset"
                }, {
                    Emoji: "&#x1F309",
                    Title: "Bridge At Night"
                }, {
                    Emoji: "&#x2668",
                    Title: "Hot Springs"
                }, {
                    Emoji: "&#x1F30C",
                    Title: "Milky Way"
                }, {
                    Emoji: "&#x1F3A0",
                    Title: "Carousel Horse"
                }, {
                    Emoji: "&#x1F3A1",
                    Title: "Ferris Wheel"
                }, {
                    Emoji: "&#x1F3A2",
                    Title: "Roller Coaster"
                }, {
                    Emoji: "&#x1F488",
                    Title: "Barber Pole"
                }, {
                    Emoji: "&#x1F3AA",
                    Title: "Circus Tent"
                }, {
                    Emoji: "&#x1F3AD",
                    Title: "Performing Arts"
                }, {
                    Emoji: "&#x1F5BC",
                    Title: "Framed Picture"
                }, {
                    Emoji: "&#x1F3A8",
                    Title: "Artist Palette"
                }, {
                    Emoji: "&#x1F3B0",
                    Title: "Slot Machine"
                }, {
                    Emoji: "&#x1F682",
                    Title: "Locomotive"
                }, {
                    Emoji: "&#x1F683",
                    Title: "Railway Car"
                }, {
                    Emoji: "&#x1F684",
                    Title: "High-Speed Train"
                }, {
                    Emoji: "&#x1F685",
                    Title: "High-Speed Train With Bullet Nose"
                }, {
                    Emoji: "&#x1F686",
                    Title: "Train"
                }, {
                    Emoji: "&#x1F687",
                    Title: "Metro"
                }, {
                    Emoji: "&#x1F688",
                    Title: "Light Rail"
                }, {
                    Emoji: "&#x1F689",
                    Title: "Station"
                }, {
                    Emoji: "&#x1F68A",
                    Title: "Tram"
                }, {
                    Emoji: "&#x1F69D",
                    Title: "Monorail"
                }, {
                    Emoji: "&#x1F69E",
                    Title: "Mountain Railway"
                }, {
                    Emoji: "&#x1F68B",
                    Title: "Tram Car"
                }, {
                    Emoji: "&#x1F68C",
                    Title: "Bus"
                }, {
                    Emoji: "&#x1F68D",
                    Title: "Oncoming Bus"
                }, {
                    Emoji: "&#x1F68E",
                    Title: "Trolleybus"
                }, {
                    Emoji: "&#x1F690",
                    Title: "Minibus"
                }, {
                    Emoji: "&#x1F691",
                    Title: "Ambulance"
                }, {
                    Emoji: "&#x1F692",
                    Title: "Fire Engine"
                }, {
                    Emoji: "&#x1F693",
                    Title: "Police Car"
                }, {
                    Emoji: "&#x1F694",
                    Title: "Oncoming Police Car"
                }, {
                    Emoji: "&#x1F695",
                    Title: "Taxi"
                }, {
                    Emoji: "&#x1F696",
                    Title: "Oncoming Taxi"
                }, {
                    Emoji: "&#x1F697",
                    Title: "Automobile"
                }, {
                    Emoji: "&#x1F698",
                    Title: "Oncoming Automobile"
                }, {
                    Emoji: "&#x1F699",
                    Title: "Sport Utility Vehicle"
                }, {
                    Emoji: "&#x1F69A",
                    Title: "Delivery Truck"
                }, {
                    Emoji: "&#x1F69B",
                    Title: "Articulated Lorry"
                }, {
                    Emoji: "&#x1F69C",
                    Title: "Tractor"
                }, {
                    Emoji: "&#x1F6B2",
                    Title: "Bicycle"
                }, {
                    Emoji: "&#x1F6F4",
                    Title: "Kick Scooter"
                }, {
                    Emoji: "&#x1F6F5",
                    Title: "Motor Scooter"
                }, {
                    Emoji: "&#x1F68F",
                    Title: "Bus Stop"
                }, {
                    Emoji: "&#x1F6E3",
                    Title: "Motorway"
                }, {
                    Emoji: "&#x1F6E4",
                    Title: "Railway Track"
                }, {
                    Emoji: "&#x26FD",
                    Title: "Fuel Pump"
                }, {
                    Emoji: "&#x1F6A8",
                    Title: "Police Car Light"
                }, {
                    Emoji: "&#x1F6A5",
                    Title: "Horizontal Traffic Light"
                }, {
                    Emoji: "&#x1F6A6",
                    Title: "Vertical Traffic Light"
                }, {
                    Emoji: "&#x1F6A7",
                    Title: "Construction"
                }, {
                    Emoji: "&#x1F6D1",
                    Title: "Stop Sign"
                }, {
                    Emoji: "&#x2693",
                    Title: "Anchor"
                }, {
                    Emoji: "&#x26F5",
                    Title: "Sailboat"
                }, {
                    Emoji: "&#x1F6F6",
                    Title: "Canoe"
                }, {
                    Emoji: "&#x1F6A4",
                    Title: "Speedboat"
                }, {
                    Emoji: "&#x1F6F3",
                    Title: "Passenger Ship"
                }, {
                    Emoji: "&#x26F4",
                    Title: "Ferry"
                }, {
                    Emoji: "&#x1F6E5",
                    Title: "Motor Boat"
                }, {
                    Emoji: "&#x1F6A2",
                    Title: "Ship"
                }, {
                    Emoji: "&#x2708",
                    Title: "Airplane"
                }, {
                    Emoji: "&#x1F6E9",
                    Title: "Small Airplane"
                }, {
                    Emoji: "&#x1F6EB",
                    Title: "Airplane Departure"
                }, {
                    Emoji: "&#x1F6EC",
                    Title: "Airplane Arrival"
                }, {
                    Emoji: "&#x1F4BA",
                    Title: "Seat"
                }, {
                    Emoji: "&#x1F681",
                    Title: "Helicopter"
                }, {
                    Emoji: "&#x1F69F",
                    Title: "Suspension Railway"
                }, {
                    Emoji: "&#x1F6A0",
                    Title: "Mountain Cableway"
                }, {
                    Emoji: "&#x1F6A1",
                    Title: "Aerial Tramway"
                }, {
                    Emoji: "&#x1F680",
                    Title: "Rocket"
                }, {
                    Emoji: "&#x1F6F0",
                    Title: "Satellite"
                }, {
                    Emoji: "&#x1F6CE",
                    Title: "Bellhop Bell"
                }, {
                    Emoji: "&#x1F6AA",
                    Title: "Door"
                }, {
                    Emoji: "&#x1F6CC",
                    Title: "Person In Bed"
                }, {
                    Emoji: "&#x1F6CC&#x1F3FB",
                    Title: "Person In Bed: Light Skin Tone"
                }, {
                    Emoji: "&#x1F6CC&#x1F3FC",
                    Title: "Person In Bed: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F6CC&#x1F3FD",
                    Title: "Person In Bed: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F6CC&#x1F3FE",
                    Title: "Person In Bed: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F6CC&#x1F3FF",
                    Title: "Person In Bed: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F6CF",
                    Title: "Bed"
                }, {
                    Emoji: "&#x1F6CB",
                    Title: "Couch And Lamp"
                }, {
                    Emoji: "&#x1F6BD",
                    Title: "Toilet"
                }, {
                    Emoji: "&#x1F6BF",
                    Title: "Shower"
                }, {
                    Emoji: "&#x1F6C0",
                    Title: "Person Taking Bath"
                }, {
                    Emoji: "&#x1F6C0&#x1F3FB",
                    Title: "Person Taking Bath: Light Skin Tone"
                }, {
                    Emoji: "&#x1F6C0&#x1F3FC",
                    Title: "Person Taking Bath: Medium-Light Skin Tone"
                }, {
                    Emoji: "&#x1F6C0&#x1F3FD",
                    Title: "Person Taking Bath: Medium Skin Tone"
                }, {
                    Emoji: "&#x1F6C0&#x1F3FE",
                    Title: "Person Taking Bath: Medium-Dark Skin Tone"
                }, {
                    Emoji: "&#x1F6C0&#x1F3FF",
                    Title: "Person Taking Bath: Dark Skin Tone"
                }, {
                    Emoji: "&#x1F6C1",
                    Title: "Bathtub"
                }, {
                    Emoji: "&#x231B",
                    Title: "Hourglass"
                }, {
                    Emoji: "&#x23F3",
                    Title: "Hourglass With Flowing Sand"
                }, {
                    Emoji: "&#x231A",
                    Title: "Watch"
                }, {
                    Emoji: "&#x23F0",
                    Title: "Alarm Clock"
                }, {
                    Emoji: "&#x23F1",
                    Title: "Stopwatch"
                }, {
                    Emoji: "&#x23F2",
                    Title: "Timer Clock"
                }, {
                    Emoji: "&#x1F570",
                    Title: "Mantelpiece Clock"
                }, {
                    Emoji: "&#x1F55B",
                    Title: "Twelve O’clock"
                }, {
                    Emoji: "&#x1F567",
                    Title: "Twelve-Thirty"
                }, {
                    Emoji: "&#x1F550",
                    Title: "One O’clock"
                }, {
                    Emoji: "&#x1F55C",
                    Title: "One-Thirty"
                }, {
                    Emoji: "&#x1F551",
                    Title: "Two O’clock"
                }, {
                    Emoji: "&#x1F55D",
                    Title: "Two-Thirty"
                }, {
                    Emoji: "&#x1F552",
                    Title: "Three O’clock"
                }, {
                    Emoji: "&#x1F55E",
                    Title: "Three-Thirty"
                }, {
                    Emoji: "&#x1F553",
                    Title: "Four O’clock"
                }, {
                    Emoji: "&#x1F55F",
                    Title: "Four-Thirty"
                }, {
                    Emoji: "&#x1F554",
                    Title: "Five O’clock"
                }, {
                    Emoji: "&#x1F560",
                    Title: "Five-Thirty"
                }, {
                    Emoji: "&#x1F555",
                    Title: "Six O’clock"
                }, {
                    Emoji: "&#x1F561",
                    Title: "Six-Thirty"
                }, {
                    Emoji: "&#x1F556",
                    Title: "Seven O’clock"
                }, {
                    Emoji: "&#x1F562",
                    Title: "Seven-Thirty"
                }, {
                    Emoji: "&#x1F557",
                    Title: "Eight O’clock"
                }, {
                    Emoji: "&#x1F563",
                    Title: "Eight-Thirty"
                }, {
                    Emoji: "&#x1F558",
                    Title: "Nine O’clock"
                }, {
                    Emoji: "&#x1F564",
                    Title: "Nine-Thirty"
                }, {
                    Emoji: "&#x1F559",
                    Title: "Ten O’clock"
                }, {
                    Emoji: "&#x1F565",
                    Title: "Ten-Thirty"
                }, {
                    Emoji: "&#x1F55A",
                    Title: "Eleven O’clock"
                }, {
                    Emoji: "&#x1F566",
                    Title: "Eleven-Thirty"
                }, {
                    Emoji: "&#x1F311",
                    Title: "New Moon"
                }, {
                    Emoji: "&#x1F312",
                    Title: "Waxing Crescent Moon"
                }, {
                    Emoji: "&#x1F313",
                    Title: "First Quarter Moon"
                }, {
                    Emoji: "&#x1F314",
                    Title: "Waxing Gibbous Moon"
                }, {
                    Emoji: "&#x1F315",
                    Title: "Full Moon"
                }, {
                    Emoji: "&#x1F316",
                    Title: "Waning Gibbous Moon"
                }, {
                    Emoji: "&#x1F317",
                    Title: "Last Quarter Moon"
                }, {
                    Emoji: "&#x1F318",
                    Title: "Waning Crescent Moon"
                }, {
                    Emoji: "&#x1F319",
                    Title: "Crescent Moon"
                }, {
                    Emoji: "&#x1F31A",
                    Title: "New Moon Face"
                }, {
                    Emoji: "&#x1F31B",
                    Title: "First Quarter Moon With Face"
                }, {
                    Emoji: "&#x1F31C",
                    Title: "Last Quarter Moon With Face"
                }, {
                    Emoji: "&#x1F321",
                    Title: "Thermometer"
                }, {
                    Emoji: "&#x2600",
                    Title: "Sun"
                }, {
                    Emoji: "&#x1F31D",
                    Title: "Full Moon With Face"
                }, {
                    Emoji: "&#x1F31E",
                    Title: "Sun With Face"
                }, {
                    Emoji: "&#x2B50",
                    Title: "White Medium Star"
                }, {
                    Emoji: "&#x1F31F",
                    Title: "Glowing Star"
                }, {
                    Emoji: "&#x1F320",
                    Title: "Shooting Star"
                }, {
                    Emoji: "&#x2601",
                    Title: "Cloud"
                }, {
                    Emoji: "&#x26C5",
                    Title: "Sun Behind Cloud"
                }, {
                    Emoji: "&#x26C8",
                    Title: "Cloud With Lightning And Rain"
                }, {
                    Emoji: "&#x1F324",
                    Title: "Sun Behind Small Cloud"
                }, {
                    Emoji: "&#x1F325",
                    Title: "Sun Behind Large Cloud"
                }, {
                    Emoji: "&#x1F326",
                    Title: "Sun Behind Rain Cloud"
                }, {
                    Emoji: "&#x1F327",
                    Title: "Cloud With Rain"
                }, {
                    Emoji: "&#x1F328",
                    Title: "Cloud With Snow"
                }, {
                    Emoji: "&#x1F329",
                    Title: "Cloud With Lightning"
                }, {
                    Emoji: "&#x1F32A",
                    Title: "Tornado"
                }, {
                    Emoji: "&#x1F32B",
                    Title: "Fog"
                }, {
                    Emoji: "&#x1F32C",
                    Title: "Wind Face"
                }, {
                    Emoji: "&#x1F300",
                    Title: "Cyclone"
                }, {
                    Emoji: "&#x1F308",
                    Title: "Rainbow"
                }, {
                    Emoji: "&#x1F302",
                    Title: "Closed Umbrella"
                }, {
                    Emoji: "&#x2602",
                    Title: "Umbrella"
                }, {
                    Emoji: "&#x2614",
                    Title: "Umbrella With Rain Drops"
                }, {
                    Emoji: "&#x26F1",
                    Title: "Umbrella On Ground"
                }, {
                    Emoji: "&#x26A1",
                    Title: "High Voltage"
                }, {
                    Emoji: "&#x2744",
                    Title: "Snowflake"
                }, {
                    Emoji: "&#x2603",
                    Title: "Snowman"
                }, {
                    Emoji: "&#x26C4",
                    Title: "Snowman Without Snow"
                }, {
                    Emoji: "&#x2604",
                    Title: "Comet"
                }, {
                    Emoji: "&#x1F525",
                    Title: "Fire"
                }, {
                    Emoji: "&#x1F4A7",
                    Title: "Droplet"
                }, {
                    Emoji: "&#x1F30A",
                    Title: "Water Wave"
                }, {
                    Emoji: "&#x1F383",
                    Title: "Jack-O-Lantern"
                }, {
                    Emoji: "&#x1F384",
                    Title: "Christmas Tree"
                }, {
                    Emoji: "&#x1F386",
                    Title: "Fireworks"
                }, {
                    Emoji: "&#x1F387",
                    Title: "Sparkler"
                }, {
                    Emoji: "&#x2728",
                    Title: "Sparkles"
                }, {
                    Emoji: "&#x1F388",
                    Title: "Balloon"
                }, {
                    Emoji: "&#x1F389",
                    Title: "Party Popper"
                }, {
                    Emoji: "&#x1F38A",
                    Title: "Confetti Ball"
                }, {
                    Emoji: "&#x1F38B",
                    Title: "Tanabata Tree"
                }, {
                    Emoji: "&#x1F38D",
                    Title: "Pine Decoration"
                }, {
                    Emoji: "&#x1F38E",
                    Title: "Japanese Dolls"
                }, {
                    Emoji: "&#x1F38F",
                    Title: "Carp Streamer"
                }, {
                    Emoji: "&#x1F390",
                    Title: "Wind Chime"
                }, {
                    Emoji: "&#x1F391",
                    Title: "Moon Viewing Ceremony"
                }, {
                    Emoji: "&#x1F380",
                    Title: "Ribbon"
                }, {
                    Emoji: "&#x1F381",
                    Title: "Wrapped Gift"
                }, {
                    Emoji: "&#x1F397",
                    Title: "Reminder Ribbon"
                }, {
                    Emoji: "&#x1F39F",
                    Title: "Admission Tickets"
                }, {
                    Emoji: "&#x1F3AB",
                    Title: "Ticket"
                }, {
                    Emoji: "&#x1F396",
                    Title: "Military Medal"
                }, {
                    Emoji: "&#x1F3C6",
                    Title: "Trophy"
                }, {
                    Emoji: "&#x1F3C5",
                    Title: "Sports Medal"
                }, {
                    Emoji: "&#x1F947",
                    Title: "1st Place Medal"
                }, {
                    Emoji: "&#x1F948",
                    Title: "2nd Place Medal"
                }, {
                    Emoji: "&#x1F949",
                    Title: "3rd Place Medal"
                }, {
                    Emoji: "&#x26BD",
                    Title: "Soccer Ball"
                }, {
                    Emoji: "&#x26BE",
                    Title: "Baseball"
                }, {
                    Emoji: "&#x1F3C0",
                    Title: "Basketball"
                }, {
                    Emoji: "&#x1F3D0",
                    Title: "Volleyball"
                }, {
                    Emoji: "&#x1F3C8",
                    Title: "American Football"
                }, {
                    Emoji: "&#x1F3C9",
                    Title: "Rugby Football"
                }, {
                    Emoji: "&#x1F3BE",
                    Title: "Tennis"
                }, {
                    Emoji: "&#x1F3B1",
                    Title: "Pool 8 Ball"
                }, {
                    Emoji: "&#x1F3B3",
                    Title: "Bowling"
                }, {
                    Emoji: "&#x1F3CF",
                    Title: "Cricket"
                }, {
                    Emoji: "&#x1F3D1",
                    Title: "Field Hockey"
                }, {
                    Emoji: "&#x1F3D2",
                    Title: "Ice Hockey"
                }, {
                    Emoji: "&#x1F3D3",
                    Title: "Ping Pong"
                }, {
                    Emoji: "&#x1F3F8",
                    Title: "Badminton"
                }, {
                    Emoji: "&#x1F94A",
                    Title: "Boxing Glove"
                }, {
                    Emoji: "&#x1F94B",
                    Title: "Martial Arts Uniform"
                }, {
                    Emoji: "&#x1F945",
                    Title: "Goal Net"
                }, {
                    Emoji: "&#x1F3AF",
                    Title: "Direct Hit"
                }, {
                    Emoji: "&#x26F3",
                    Title: "Flag In Hole"
                }, {
                    Emoji: "&#x26F8",
                    Title: "Ice Skate"
                }, {
                    Emoji: "&#x1F3A3",
                    Title: "Fishing Pole"
                }, {
                    Emoji: "&#x1F3BD",
                    Title: "Running Shirt"
                }, {
                    Emoji: "&#x1F3BF",
                    Title: "Skis"
                }, {
                    Emoji: "&#x1F3AE",
                    Title: "Video Game"
                }, {
                    Emoji: "&#x1F579",
                    Title: "Joystick"
                }, {
                    Emoji: "&#x1F3B2",
                    Title: "Game Die"
                }, {
                    Emoji: "&#x2660",
                    Title: "Spade Suit"
                }, {
                    Emoji: "&#x2665",
                    Title: "Heart Suit"
                }, {
                    Emoji: "&#x2666",
                    Title: "Diamond Suit"
                }, {
                    Emoji: "&#x2663",
                    Title: "Club Suit"
                }, {
                    Emoji: "&#x1F0CF",
                    Title: "Joker"
                }, {
                    Emoji: "&#x1F004",
                    Title: "Mahjong Red Dragon"
                }, {
                    Emoji: "&#x1F3B4",
                    Title: "Flower Playing Cards"
                }, {
                    Emoji: "&#x1F507",
                    Title: "Muted Speaker"
                }, {
                    Emoji: "&#x1F508",
                    Title: "Speaker Low Volume"
                }, {
                    Emoji: "&#x1F509",
                    Title: "Speaker Medium Volume"
                }, {
                    Emoji: "&#x1F50A",
                    Title: "Speaker High Volume"
                }, {
                    Emoji: "&#x1F4E2",
                    Title: "Loudspeaker"
                }, {
                    Emoji: "&#x1F4E3",
                    Title: "Megaphone"
                }, {
                    Emoji: "&#x1F4EF",
                    Title: "Postal Horn"
                }, {
                    Emoji: "&#x1F514",
                    Title: "Bell"
                }, {
                    Emoji: "&#x1F515",
                    Title: "Bell With Slash"
                }, {
                    Emoji: "&#x1F3BC",
                    Title: "Musical Score"
                }, {
                    Emoji: "&#x1F3B5",
                    Title: "Musical Note"
                }, {
                    Emoji: "&#x1F3B6",
                    Title: "Musical Notes"
                }, {
                    Emoji: "&#x1F399",
                    Title: "Studio Microphone"
                }, {
                    Emoji: "&#x1F39A",
                    Title: "Level Slider"
                }, {
                    Emoji: "&#x1F39B",
                    Title: "Control Knobs"
                }, {
                    Emoji: "&#x1F3A4",
                    Title: "Microphone"
                }, {
                    Emoji: "&#x1F3A7",
                    Title: "Headphone"
                }, {
                    Emoji: "&#x1F4FB",
                    Title: "Radio"
                }, {
                    Emoji: "&#x1F3B7",
                    Title: "Saxophone"
                }, {
                    Emoji: "&#x1F3B8",
                    Title: "Guitar"
                }, {
                    Emoji: "&#x1F3B9",
                    Title: "Musical Keyboard"
                }, {
                    Emoji: "&#x1F3BA",
                    Title: "Trumpet"
                }, {
                    Emoji: "&#x1F3BB",
                    Title: "Violin"
                }, {
                    Emoji: "&#x1F941",
                    Title: "Drum"
                }, {
                    Emoji: "&#x1F4F1",
                    Title: "Mobile Phone"
                }, {
                    Emoji: "&#x1F4F2",
                    Title: "Mobile Phone With Arrow"
                }, {
                    Emoji: "&#x260E",
                    Title: "Telephone"
                }, {
                    Emoji: "&#x1F4DE",
                    Title: "Telephone Receiver"
                }, {
                    Emoji: "&#x1F4DF",
                    Title: "Pager"
                }, {
                    Emoji: "&#x1F4E0",
                    Title: "Fax Machine"
                }, {
                    Emoji: "&#x1F50B",
                    Title: "Battery"
                }, {
                    Emoji: "&#x1F50C",
                    Title: "Electric Plug"
                }, {
                    Emoji: "&#x1F4BB",
                    Title: "Laptop Computer"
                }, {
                    Emoji: "&#x1F5A5",
                    Title: "Desktop Computer"
                }, {
                    Emoji: "&#x1F5A8",
                    Title: "Printer"
                }, {
                    Emoji: "&#x2328",
                    Title: "Keyboard"
                }, {
                    Emoji: "&#x1F5B1",
                    Title: "Computer Mouse"
                }, {
                    Emoji: "&#x1F5B2",
                    Title: "Trackball"
                }, {
                    Emoji: "&#x1F4BD",
                    Title: "Computer Disk"
                }, {
                    Emoji: "&#x1F4BE",
                    Title: "Floppy Disk"
                }, {
                    Emoji: "&#x1F4BF",
                    Title: "Optical Disk"
                }, {
                    Emoji: "&#x1F4C0",
                    Title: "Dvd"
                }, {
                    Emoji: "&#x1F3A5",
                    Title: "Movie Camera"
                }, {
                    Emoji: "&#x1F39E",
                    Title: "Film Frames"
                }, {
                    Emoji: "&#x1F4FD",
                    Title: "Film Projector"
                }, {
                    Emoji: "&#x1F3AC",
                    Title: "Clapper Board"
                }, {
                    Emoji: "&#x1F4FA",
                    Title: "Television"
                }, {
                    Emoji: "&#x1F4F7",
                    Title: "Camera"
                }, {
                    Emoji: "&#x1F4F8",
                    Title: "Camera With Flash"
                }, {
                    Emoji: "&#x1F4F9",
                    Title: "Video Camera"
                }, {
                    Emoji: "&#x1F4FC",
                    Title: "Videocassette"
                }, {
                    Emoji: "&#x1F50D",
                    Title: "Left-Pointing Magnifying Glass"
                }, {
                    Emoji: "&#x1F50E",
                    Title: "Right-Pointing Magnifying Glass"
                }, {
                    Emoji: "&#x1F52C",
                    Title: "Microscope"
                }, {
                    Emoji: "&#x1F52D",
                    Title: "Telescope"
                }, {
                    Emoji: "&#x1F4E1",
                    Title: "Satellite Antenna"
                }, {
                    Emoji: "&#x1F56F",
                    Title: "Candle"
                }, {
                    Emoji: "&#x1F4A1",
                    Title: "Light Bulb"
                }, {
                    Emoji: "&#x1F526",
                    Title: "Flashlight"
                }, {
                    Emoji: "&#x1F3EE",
                    Title: "Red Paper Lantern"
                }, {
                    Emoji: "&#x1F4D4",
                    Title: "Notebook With Decorative Cover"
                }, {
                    Emoji: "&#x1F4D5",
                    Title: "Closed Book"
                }, {
                    Emoji: "&#x1F4D6",
                    Title: "Open Book"
                }, {
                    Emoji: "&#x1F4D7",
                    Title: "Green Book"
                }, {
                    Emoji: "&#x1F4D8",
                    Title: "Blue Book"
                }, {
                    Emoji: "&#x1F4D9",
                    Title: "Orange Book"
                }, {
                    Emoji: "&#x1F4DA",
                    Title: "Books"
                }, {
                    Emoji: "&#x1F4D3",
                    Title: "Notebook"
                }, {
                    Emoji: "&#x1F4D2",
                    Title: "Ledger"
                }, {
                    Emoji: "&#x1F4C3",
                    Title: "Page With Curl"
                }, {
                    Emoji: "&#x1F4DC",
                    Title: "Scroll"
                }, {
                    Emoji: "&#x1F4C4",
                    Title: "Page Facing Up"
                }, {
                    Emoji: "&#x1F4F0",
                    Title: "Newspaper"
                }, {
                    Emoji: "&#x1F5DE",
                    Title: "Rolled-Up Newspaper"
                }, {
                    Emoji: "&#x1F4D1",
                    Title: "Bookmark Tabs"
                }, {
                    Emoji: "&#x1F516",
                    Title: "Bookmark"
                }, {
                    Emoji: "&#x1F3F7",
                    Title: "Label"
                }, {
                    Emoji: "&#x1F4B0",
                    Title: "Money Bag"
                }, {
                    Emoji: "&#x1F4B4",
                    Title: "Yen Banknote"
                }, {
                    Emoji: "&#x1F4B5",
                    Title: "Dollar Banknote"
                }, {
                    Emoji: "&#x1F4B6",
                    Title: "Euro Banknote"
                }, {
                    Emoji: "&#x1F4B7",
                    Title: "Pound Banknote"
                }, {
                    Emoji: "&#x1F4B8",
                    Title: "Money With Wings"
                }, {
                    Emoji: "&#x1F4B3",
                    Title: "Credit Card"
                }, {
                    Emoji: "&#x1F4B9",
                    Title: "Chart Increasing With Yen"
                }, {
                    Emoji: "&#x1F4B1",
                    Title: "Currency Exchange"
                }, {
                    Emoji: "&#x1F4B2",
                    Title: "Heavy Dollar Sign"
                }, {
                    Emoji: "&#x2709",
                    Title: "Envelope"
                }, {
                    Emoji: "&#x1F4E7",
                    Title: "E-Mail"
                }, {
                    Emoji: "&#x1F4E8",
                    Title: "Incoming Envelope"
                }, {
                    Emoji: "&#x1F4E9",
                    Title: "Envelope With Arrow"
                }, {
                    Emoji: "&#x1F4E4",
                    Title: "Outbox Tray"
                }, {
                    Emoji: "&#x1F4E5",
                    Title: "Inbox Tray"
                }, {
                    Emoji: "&#x1F4E6",
                    Title: "Package"
                }, {
                    Emoji: "&#x1F4EB",
                    Title: "Closed Mailbox With Raised Flag"
                }, {
                    Emoji: "&#x1F4EA",
                    Title: "Closed Mailbox With Lowered Flag"
                }, {
                    Emoji: "&#x1F4EC",
                    Title: "Open Mailbox With Raised Flag"
                }, {
                    Emoji: "&#x1F4ED",
                    Title: "Open Mailbox With Lowered Flag"
                }, {
                    Emoji: "&#x1F4EE",
                    Title: "Postbox"
                }, {
                    Emoji: "&#x1F5F3",
                    Title: "Ballot Box With Ballot"
                }, {
                    Emoji: "&#x270F",
                    Title: "Pencil"
                }, {
                    Emoji: "&#x2712",
                    Title: "Black Nib"
                }, {
                    Emoji: "&#x1F58B",
                    Title: "Fountain Pen"
                }, {
                    Emoji: "&#x1F58A",
                    Title: "Pen"
                }, {
                    Emoji: "&#x1F58C",
                    Title: "Paintbrush"
                }, {
                    Emoji: "&#x1F58D",
                    Title: "Crayon"
                }, {
                    Emoji: "&#x1F4DD",
                    Title: "Memo"
                }, {
                    Emoji: "&#x1F4BC",
                    Title: "Briefcase"
                }, {
                    Emoji: "&#x1F4C1",
                    Title: "File Folder"
                }, {
                    Emoji: "&#x1F4C2",
                    Title: "Open File Folder"
                }, {
                    Emoji: "&#x1F5C2",
                    Title: "Card Index Dividers"
                }, {
                    Emoji: "&#x1F4C5",
                    Title: "Calendar"
                }, {
                    Emoji: "&#x1F4C6",
                    Title: "Tear-Off Calendar"
                }, {
                    Emoji: "&#x1F5D2",
                    Title: "Spiral Notepad"
                }, {
                    Emoji: "&#x1F5D3",
                    Title: "Spiral Calendar"
                }, {
                    Emoji: "&#x1F4C7",
                    Title: "Card Index"
                }, {
                    Emoji: "&#x1F4C8",
                    Title: "Chart Increasing"
                }, {
                    Emoji: "&#x1F4C9",
                    Title: "Chart Decreasing"
                }, {
                    Emoji: "&#x1F4CA",
                    Title: "Bar Chart"
                }, {
                    Emoji: "&#x1F4CB",
                    Title: "Clipboard"
                }, {
                    Emoji: "&#x1F4CC",
                    Title: "Pushpin"
                }, {
                    Emoji: "&#x1F4CD",
                    Title: "Round Pushpin"
                }, {
                    Emoji: "&#x1F4CE",
                    Title: "Paperclip"
                }, {
                    Emoji: "&#x1F587",
                    Title: "Linked Paperclips"
                }, {
                    Emoji: "&#x1F4CF",
                    Title: "Straight Ruler"
                }, {
                    Emoji: "&#x1F4D0",
                    Title: "Triangular Ruler"
                }, {
                    Emoji: "&#x2702",
                    Title: "Scissors"
                }, {
                    Emoji: "&#x1F5C3",
                    Title: "Card File Box"
                }, {
                    Emoji: "&#x1F5C4",
                    Title: "File Cabinet"
                }, {
                    Emoji: "&#x1F5D1",
                    Title: "Wastebasket"
                }, {
                    Emoji: "&#x1F512",
                    Title: "Locked"
                }, {
                    Emoji: "&#x1F513",
                    Title: "Unlocked"
                }, {
                    Emoji: "&#x1F50F",
                    Title: "Locked With Pen"
                }, {
                    Emoji: "&#x1F510",
                    Title: "Locked With Key"
                }, {
                    Emoji: "&#x1F511",
                    Title: "Key"
                }, {
                    Emoji: "&#x1F5DD",
                    Title: "Old Key"
                }, {
                    Emoji: "&#x1F528",
                    Title: "Hammer"
                }, {
                    Emoji: "&#x26CF",
                    Title: "Pick"
                }, {
                    Emoji: "&#x2692",
                    Title: "Hammer And Pick"
                }, {
                    Emoji: "&#x1F6E0",
                    Title: "Hammer And Wrench"
                }, {
                    Emoji: "&#x1F5E1",
                    Title: "Dagger"
                }, {
                    Emoji: "&#x2694",
                    Title: "Crossed Swords"
                }, {
                    Emoji: "&#x1F52B",
                    Title: "Pistol"
                }, {
                    Emoji: "&#x1F3F9",
                    Title: "Bow And Arrow"
                }, {
                    Emoji: "&#x1F6E1",
                    Title: "Shield"
                }, {
                    Emoji: "&#x1F527",
                    Title: "Wrench"
                }, {
                    Emoji: "&#x1F529",
                    Title: "Nut And Bolt"
                }, {
                    Emoji: "&#x2699",
                    Title: "Gear"
                }, {
                    Emoji: "&#x1F5DC",
                    Title: "Clamp"
                }, {
                    Emoji: "&#x2697",
                    Title: "Alembic"
                }, {
                    Emoji: "&#x2696",
                    Title: "Balance Scale"
                }, {
                    Emoji: "&#x1F517",
                    Title: "Link"
                }, {
                    Emoji: "&#x26D3",
                    Title: "Chains"
                }, {
                    Emoji: "&#x1F489",
                    Title: "Syringe"
                }, {
                    Emoji: "&#x1F48A",
                    Title: "Pill"
                }, {
                    Emoji: "&#x1F6AC",
                    Title: "Cigarette"
                }, {
                    Emoji: "&#x26B0",
                    Title: "Coffin"
                }, {
                    Emoji: "&#x26B1",
                    Title: "Funeral Urn"
                }, {
                    Emoji: "&#x1F5FF",
                    Title: "Moai"
                }, {
                    Emoji: "&#x1F6E2",
                    Title: "Oil Drum"
                }, {
                    Emoji: "&#x1F52E",
                    Title: "Crystal Ball"
                }, {
                    Emoji: "&#x1F6D2",
                    Title: "Shopping Cart"
                }, {
                    Emoji: "&#x1F3E7",
                    Title: "ATM Sign"
                }, {
                    Emoji: "&#x1F6AE",
                    Title: "Litter In Bin Sign"
                }, {
                    Emoji: "&#x1F6B0",
                    Title: "Potable Water"
                }, {
                    Emoji: "&#x267F",
                    Title: "Wheelchair Symbol"
                }, {
                    Emoji: "&#x1F6B9",
                    Title: "Men’s Room"
                }, {
                    Emoji: "&#x1F6BA",
                    Title: "Women’s Room"
                }, {
                    Emoji: "&#x1F6BB",
                    Title: "Restroom"
                }, {
                    Emoji: "&#x1F6BC",
                    Title: "Baby Symbol"
                }, {
                    Emoji: "&#x1F6BE",
                    Title: "Water Closet"
                }, {
                    Emoji: "&#x1F6C2",
                    Title: "Passport Control"
                }, {
                    Emoji: "&#x1F6C3",
                    Title: "Customs"
                }, {
                    Emoji: "&#x1F6C4",
                    Title: "Baggage Claim"
                }, {
                    Emoji: "&#x1F6C5",
                    Title: "Left Luggage"
                }, {
                    Emoji: "&#x26A0",
                    Title: "Warning"
                }, {
                    Emoji: "&#x1F6B8",
                    Title: "Children Crossing"
                }, {
                    Emoji: "&#x26D4",
                    Title: "No Entry"
                }, {
                    Emoji: "&#x1F6AB",
                    Title: "Prohibited"
                }, {
                    Emoji: "&#x1F6B3",
                    Title: "No Bicycles"
                }, {
                    Emoji: "&#x1F6AD",
                    Title: "No Smoking"
                }, {
                    Emoji: "&#x1F6AF",
                    Title: "No Littering"
                }, {
                    Emoji: "&#x1F6B1",
                    Title: "Non-Potable Water"
                }, {
                    Emoji: "&#x1F6B7",
                    Title: "No Pedestrians"
                }, {
                    Emoji: "&#x1F4F5",
                    Title: "No Mobile Phones"
                }, {
                    Emoji: "&#x1F51E",
                    Title: "No One Under Eighteen"
                }, {
                    Emoji: "&#x2622",
                    Title: "Radioactive"
                }, {
                    Emoji: "&#x2623",
                    Title: "Biohazard"
                }, {
                    Emoji: "&#x2B06",
                    Title: "Up Arrow"
                }, {
                    Emoji: "&#x2197",
                    Title: "Up-Right Arrow"
                }, {
                    Emoji: "&#x27A1",
                    Title: "Right Arrow"
                }, {
                    Emoji: "&#x2198",
                    Title: "Down-Right Arrow"
                }, {
                    Emoji: "&#x2B07",
                    Title: "Down Arrow"
                }, {
                    Emoji: "&#x2199",
                    Title: "Down-Left Arrow"
                }, {
                    Emoji: "&#x2B05",
                    Title: "Left Arrow"
                }, {
                    Emoji: "&#x2196",
                    Title: "Up-Left Arrow"
                }, {
                    Emoji: "&#x2195",
                    Title: "Up-Down Arrow"
                }, {
                    Emoji: "&#x2194",
                    Title: "Left-Right Arrow"
                }, {
                    Emoji: "&#x21A9",
                    Title: "Right Arrow Curving Left"
                }, {
                    Emoji: "&#x21AA",
                    Title: "Left Arrow Curving Right"
                }, {
                    Emoji: "&#x2934",
                    Title: "Right Arrow Curving Up"
                }, {
                    Emoji: "&#x2935",
                    Title: "Right Arrow Curving Down"
                }, {
                    Emoji: "&#x1F503",
                    Title: "Clockwise Vertical Arrows"
                }, {
                    Emoji: "&#x1F504",
                    Title: "Anticlockwise Arrows Button"
                }, {
                    Emoji: "&#x1F519",
                    Title: "BACK Arrow"
                }, {
                    Emoji: "&#x1F51A",
                    Title: "END Arrow"
                }, {
                    Emoji: "&#x1F51B",
                    Title: "ON! Arrow"
                }, {
                    Emoji: "&#x1F51C",
                    Title: "SOON Arrow"
                }, {
                    Emoji: "&#x1F51D",
                    Title: "TOP Arrow"
                }, {
                    Emoji: "&#x1F6D0",
                    Title: "Place Of Worship"
                }, {
                    Emoji: "&#x269B",
                    Title: "Atom Symbol"
                }, {
                    Emoji: "&#x1F549",
                    Title: "Om"
                }, {
                    Emoji: "&#x2721",
                    Title: "Star Of David"
                }, {
                    Emoji: "&#x2638",
                    Title: "Wheel Of Dharma"
                }, {
                    Emoji: "&#x262F",
                    Title: "Yin Yang"
                }, {
                    Emoji: "&#x271D",
                    Title: "Latin Cross"
                }, {
                    Emoji: "&#x2626",
                    Title: "Orthodox Cross"
                }, {
                    Emoji: "&#x262A",
                    Title: "Star And Crescent"
                }, {
                    Emoji: "&#x262E",
                    Title: "Peace Symbol"
                }, {
                    Emoji: "&#x1F54E",
                    Title: "Menorah"
                }, {
                    Emoji: "&#x1F52F",
                    Title: "Dotted Six-Pointed Star"
                }, {
                    Emoji: "&#x2648",
                    Title: "Aries"
                }, {
                    Emoji: "&#x2649",
                    Title: "Taurus"
                }, {
                    Emoji: "&#x264A",
                    Title: "Gemini"
                }, {
                    Emoji: "&#x264B",
                    Title: "Cancer"
                }, {
                    Emoji: "&#x264C",
                    Title: "Leo"
                }, {
                    Emoji: "&#x264D",
                    Title: "Virgo"
                }, {
                    Emoji: "&#x264E",
                    Title: "Libra"
                }, {
                    Emoji: "&#x264F",
                    Title: "Scorpius"
                }, {
                    Emoji: "&#x2650",
                    Title: "Sagittarius"
                }, {
                    Emoji: "&#x2651",
                    Title: "Capricorn"
                }, {
                    Emoji: "&#x2652",
                    Title: "Aquarius"
                }, {
                    Emoji: "&#x2653",
                    Title: "Pisces"
                }, {
                    Emoji: "&#x26CE",
                    Title: "Ophiuchus"
                }, {
                    Emoji: "&#x1F500",
                    Title: "Shuffle Tracks Button"
                }, {
                    Emoji: "&#x1F501",
                    Title: "Repeat Button"
                }, {
                    Emoji: "&#x1F502",
                    Title: "Repeat Single Button"
                }, {
                    Emoji: "&#x25B6",
                    Title: "Play Button"
                }, {
                    Emoji: "&#x23E9",
                    Title: "Fast-Forward Button"
                }, {
                    Emoji: "&#x23ED",
                    Title: "Next Track Button"
                }, {
                    Emoji: "&#x23EF",
                    Title: "Play Or Pause Button"
                }, {
                    Emoji: "&#x25C0",
                    Title: "Reverse Button"
                }, {
                    Emoji: "&#x23EA",
                    Title: "Fast Reverse Button"
                }, {
                    Emoji: "&#x23EE",
                    Title: "Last Track Button"
                }, {
                    Emoji: "&#x1F53C",
                    Title: "Up Button"
                }, {
                    Emoji: "&#x23EB",
                    Title: "Fast Up Button"
                }, {
                    Emoji: "&#x1F53D",
                    Title: "Down Button"
                }, {
                    Emoji: "&#x23EC",
                    Title: "Fast Down Button"
                }, {
                    Emoji: "&#x23F8",
                    Title: "Pause Button"
                }, {
                    Emoji: "&#x23F9",
                    Title: "Stop Button"
                }, {
                    Emoji: "&#x23FA",
                    Title: "Record Button"
                }, {
                    Emoji: "&#x23CF",
                    Title: "Eject Button"
                }, {
                    Emoji: "&#x1F3A6",
                    Title: "Cinema"
                }, {
                    Emoji: "&#x1F505",
                    Title: "Dim Button"
                }, {
                    Emoji: "&#x1F506",
                    Title: "Bright Button"
                }, {
                    Emoji: "&#x1F4F6",
                    Title: "Antenna Bars"
                }, {
                    Emoji: "&#x1F4F3",
                    Title: "Vibration Mode"
                }, {
                    Emoji: "&#x1F4F4",
                    Title: "Mobile Phone Off"
                }, {
                    Emoji: "&#x267B",
                    Title: "Recycling Symbol"
                }, {
                    Emoji: "&#x1F4DB",
                    Title: "Name Badge"
                }, {
                    Emoji: "&#x269C",
                    Title: "Fleur-De-Lis"
                }, {
                    Emoji: "&#x1F530",
                    Title: "Japanese Symbol For Beginner"
                }, {
                    Emoji: "&#x1F531",
                    Title: "Trident Emblem"
                }, {
                    Emoji: "&#x2B55",
                    Title: "Heavy Large Circle"
                }, {
                    Emoji: "&#x2705",
                    Title: "White Heavy Check Mark"
                }, {
                    Emoji: "&#x2611",
                    Title: "Ballot Box With Check"
                }, {
                    Emoji: "&#x2714",
                    Title: "Heavy Check Mark"
                }, {
                    Emoji: "&#x2716",
                    Title: "Heavy Multiplication X"
                }, {
                    Emoji: "&#x274C",
                    Title: "Cross Mark"
                }, {
                    Emoji: "&#x274E",
                    Title: "Cross Mark Button"
                }, {
                    Emoji: "&#x2795",
                    Title: "Heavy Plus Sign"
                }, {
                    Emoji: "&#x2640",
                    Title: "Female Sign"
                }, {
                    Emoji: "&#x2642",
                    Title: "Male Sign"
                }, {
                    Emoji: "&#x2695",
                    Title: "Medical Symbol"
                }, {
                    Emoji: "&#x2796",
                    Title: "Heavy Minus Sign"
                }, {
                    Emoji: "&#x2797",
                    Title: "Heavy Division Sign"
                }, {
                    Emoji: "&#x27B0",
                    Title: "Curly Loop"
                }, {
                    Emoji: "&#x27BF",
                    Title: "Double Curly Loop"
                }, {
                    Emoji: "&#x303D",
                    Title: "Part Alternation Mark"
                }, {
                    Emoji: "&#x2733",
                    Title: "Eight-Spoked Asterisk"
                }, {
                    Emoji: "&#x2734",
                    Title: "Eight-Pointed Star"
                }, {
                    Emoji: "&#x2747",
                    Title: "Sparkle"
                }, {
                    Emoji: "&#x203C",
                    Title: "Double Exclamation Mark"
                }, {
                    Emoji: "&#x2049",
                    Title: "Exclamation Question Mark"
                }, {
                    Emoji: "&#x2753",
                    Title: "Question Mark"
                }, {
                    Emoji: "&#x2754",
                    Title: "White Question Mark"
                }, {
                    Emoji: "&#x2755",
                    Title: "White Exclamation Mark"
                }, {
                    Emoji: "&#x2757",
                    Title: "Exclamation Mark"
                }, {
                    Emoji: "&#x3030",
                    Title: "Wavy Dash"
                }, {
                    Emoji: "&#x00A9",
                    Title: "Copyright"
                }, {
                    Emoji: "&#x00AE",
                    Title: "Registered"
                }, {
                    Emoji: "&#x2122",
                    Title: "Trade Mark"
                }, {
                    Emoji: "&#x0023&#xFE0F&#x20E3",
                    Title: "Keycap: #"
                }, {
                    Emoji: "&#x002A&#xFE0F&#x20E3",
                    Title: "Keycap: *"
                }, {
                    Emoji: "&#x0030&#xFE0F&#x20E3",
                    Title: "Keycap: 0"
                }, {
                    Emoji: "&#x0031&#xFE0F&#x20E3",
                    Title: "Keycap: 1"
                }, {
                    Emoji: "&#x0032&#xFE0F&#x20E3",
                    Title: "Keycap: 2"
                }, {
                    Emoji: "&#x0033&#xFE0F&#x20E3",
                    Title: "Keycap: 3"
                }, {
                    Emoji: "&#x0034&#xFE0F&#x20E3",
                    Title: "Keycap: 4"
                }, {
                    Emoji: "&#x0035&#xFE0F&#x20E3",
                    Title: "Keycap: 5"
                }, {
                    Emoji: "&#x0036&#xFE0F&#x20E3",
                    Title: "Keycap: 6"
                }, {
                    Emoji: "&#x0037&#xFE0F&#x20E3",
                    Title: "Keycap: 7"
                }, {
                    Emoji: "&#x0038&#xFE0F&#x20E3",
                    Title: "Keycap: 8"
                }, {
                    Emoji: "&#x0039&#xFE0F&#x20E3",
                    Title: "Keycap: 9"
                }, {
                    Emoji: "&#x1F51F",
                    Title: "Keycap 10"
                }, {
                    Emoji: "&#x1F4AF",
                    Title: "Hundred Points"
                }, {
                    Emoji: "&#x1F520",
                    Title: "Input Latin Uppercase"
                }, {
                    Emoji: "&#x1F521",
                    Title: "Input Latin Lowercase"
                }, {
                    Emoji: "&#x1F522",
                    Title: "Input Numbers"
                }, {
                    Emoji: "&#x1F523",
                    Title: "Input Symbols"
                }, {
                    Emoji: "&#x1F524",
                    Title: "Input Latin Letters"
                }, {
                    Emoji: "&#x1F170",
                    Title: "A Button (blood Type)"
                }, {
                    Emoji: "&#x1F18E",
                    Title: "AB Button (blood Type)"
                }, {
                    Emoji: "&#x1F171",
                    Title: "B Button (blood Type)"
                }, {
                    Emoji: "&#x1F191",
                    Title: "CL Button"
                }, {
                    Emoji: "&#x1F192",
                    Title: "COOL Button"
                }, {
                    Emoji: "&#x1F193",
                    Title: "FREE Button"
                }, {
                    Emoji: "&#x2139",
                    Title: "Information"
                }, {
                    Emoji: "&#x1F194",
                    Title: "ID Button"
                }, {
                    Emoji: "&#x24C2",
                    Title: "Circled M"
                }, {
                    Emoji: "&#x1F195",
                    Title: "NEW Button"
                }, {
                    Emoji: "&#x1F196",
                    Title: "NG Button"
                }, {
                    Emoji: "&#x1F17E",
                    Title: "O Button (blood Type)"
                }, {
                    Emoji: "&#x1F197",
                    Title: "OK Button"
                }, {
                    Emoji: "&#x1F17F",
                    Title: "P Button"
                }, {
                    Emoji: "&#x1F198",
                    Title: "SOS Button"
                }, {
                    Emoji: "&#x1F199",
                    Title: "UP! Button"
                }, {
                    Emoji: "&#x1F19A",
                    Title: "VS Button"
                }, {
                    Emoji: "&#x1F201",
                    Title: "Japanese “here” Button"
                }, {
                    Emoji: "&#x1F202",
                    Title: "Japanese “service Charge” Button"
                }, {
                    Emoji: "&#x1F237",
                    Title: "Japanese “monthly Amount” Button"
                }, {
                    Emoji: "&#x1F236",
                    Title: "Japanese “not Free Of Charge” Button"
                }, {
                    Emoji: "&#x1F22F",
                    Title: "Japanese “reserved” Button"
                }, {
                    Emoji: "&#x1F250",
                    Title: "Japanese “bargain” Button"
                }, {
                    Emoji: "&#x1F239",
                    Title: "Japanese “discount” Button"
                }, {
                    Emoji: "&#x1F21A",
                    Title: "Japanese “free Of Charge” Button"
                }, {
                    Emoji: "&#x1F232",
                    Title: "Japanese “prohibited” Button"
                }, {
                    Emoji: "&#x1F251",
                    Title: "Japanese “acceptable” Button"
                }, {
                    Emoji: "&#x1F238",
                    Title: "Japanese “application” Button"
                }, {
                    Emoji: "&#x1F234",
                    Title: "Japanese “passing Grade” Button"
                }, {
                    Emoji: "&#x1F233",
                    Title: "Japanese “vacancy” Button"
                }, {
                    Emoji: "&#x3297",
                    Title: "Japanese “congratulations” Button"
                }, {
                    Emoji: "&#x3299",
                    Title: "Japanese “secret” Button"
                }, {
                    Emoji: "&#x1F23A",
                    Title: "Japanese “open For Business” Button"
                }, {
                    Emoji: "&#x1F235",
                    Title: "Japanese “no Vacancy” Button"
                }, {
                    Emoji: "&#x25AA",
                    Title: "Black Small Square"
                }, {
                    Emoji: "&#x25AB",
                    Title: "White Small Square"
                }, {
                    Emoji: "&#x25FB",
                    Title: "White Medium Square"
                }, {
                    Emoji: "&#x25FC",
                    Title: "Black Medium Square"
                }, {
                    Emoji: "&#x25FD",
                    Title: "White Medium-Small Square"
                }, {
                    Emoji: "&#x25FE",
                    Title: "Black Medium-Small Square"
                }, {
                    Emoji: "&#x2B1B",
                    Title: "Black Large Square"
                }, {
                    Emoji: "&#x2B1C",
                    Title: "White Large Square"
                }, {
                    Emoji: "&#x1F536",
                    Title: "Large Orange Diamond"
                }, {
                    Emoji: "&#x1F537",
                    Title: "Large Blue Diamond"
                }, {
                    Emoji: "&#x1F538",
                    Title: "Small Orange Diamond"
                }, {
                    Emoji: "&#x1F539",
                    Title: "Small Blue Diamond"
                }, {
                    Emoji: "&#x1F53A",
                    Title: "Red Triangle Pointed Up"
                }, {
                    Emoji: "&#x1F53B",
                    Title: "Red Triangle Pointed Down"
                }, {
                    Emoji: "&#x1F4A0",
                    Title: "Diamond With A Dot"
                }, {
                    Emoji: "&#x1F518",
                    Title: "Radio Button"
                }, {
                    Emoji: "&#x1F532",
                    Title: "Black Square Button"
                }, {
                    Emoji: "&#x1F533",
                    Title: "White Square Button"
                }, {
                    Emoji: "&#x26AA",
                    Title: "White Circle"
                }, {
                    Emoji: "&#x26AB",
                    Title: "Black Circle"
                }, {
                    Emoji: "&#x1F534",
                    Title: "Red Circle"
                }, {
                    Emoji: "&#x1F535",
                    Title: "Blue Circle"
                }, {
                    Emoji: "&#x1F3C1",
                    Title: "Chequered Flag"
                }, {
                    Emoji: "&#x1F6A9",
                    Title: "Triangular Flag"
                }, {
                    Emoji: "&#x1F38C",
                    Title: "Crossed Flags"
                }, {
                    Emoji: "&#x1F3F4",
                    Title: "Black Flag"
                }, {
                    Emoji: "&#x1F3F3",
                    Title: "White Flag"
                }, {
                    Emoji: "&#x1F3F3&#xFE0F&#x200D&#x1F308",
                    Title: "Rainbow Flag"
                }, {
                    Emoji: "&#x1F1E6&#x1F1E8",
                    Title: "Ascension Island"
                }, {
                    Emoji: "&#x1F1E6&#x1F1E9",
                    Title: "Andorra"
                }, {
                    Emoji: "&#x1F1E6&#x1F1EA",
                    Title: "United Arab Emirates"
                }, {
                    Emoji: "&#x1F1E6&#x1F1EB",
                    Title: "Afghanistan"
                }, {
                    Emoji: "&#x1F1E6&#x1F1EC",
                    Title: "Antigua & Barbuda"
                }, {
                    Emoji: "&#x1F1E6&#x1F1EE",
                    Title: "Anguilla"
                }, {
                    Emoji: "&#x1F1E6&#x1F1F1",
                    Title: "Albania"
                }, {
                    Emoji: "&#x1F1E6&#x1F1F2",
                    Title: "Armenia"
                }, {
                    Emoji: "&#x1F1E6&#x1F1F4",
                    Title: "Angola"
                }, {
                    Emoji: "&#x1F1E6&#x1F1F6",
                    Title: "Antarctica"
                }, {
                    Emoji: "&#x1F1E6&#x1F1F7",
                    Title: "Argentina"
                }, {
                    Emoji: "&#x1F1E6&#x1F1F8",
                    Title: "American Samoa"
                }, {
                    Emoji: "&#x1F1E6&#x1F1F9",
                    Title: "Austria"
                }, {
                    Emoji: "&#x1F1E6&#x1F1FA",
                    Title: "Australia"
                }, {
                    Emoji: "&#x1F1E6&#x1F1FC",
                    Title: "Aruba"
                }, {
                    Emoji: "&#x1F1E6&#x1F1FD",
                    Title: "Åland Islands"
                }, {
                    Emoji: "&#x1F1E6&#x1F1FF",
                    Title: "Azerbaijan"
                }, {
                    Emoji: "&#x1F1E7&#x1F1E6",
                    Title: "Bosnia & Herzegovina"
                }, {
                    Emoji: "&#x1F1E7&#x1F1E7",
                    Title: "Barbados"
                }, {
                    Emoji: "&#x1F1E7&#x1F1E9",
                    Title: "Bangladesh"
                }, {
                    Emoji: "&#x1F1E7&#x1F1EA",
                    Title: "Belgium"
                }, {
                    Emoji: "&#x1F1E7&#x1F1EB",
                    Title: "Burkina Faso"
                }, {
                    Emoji: "&#x1F1E7&#x1F1EC",
                    Title: "Bulgaria"
                }, {
                    Emoji: "&#x1F1E7&#x1F1ED",
                    Title: "Bahrain"
                }, {
                    Emoji: "&#x1F1E7&#x1F1EE",
                    Title: "Burundi"
                }, {
                    Emoji: "&#x1F1E7&#x1F1EF",
                    Title: "Benin"
                }, {
                    Emoji: "&#x1F1E7&#x1F1F1",
                    Title: "St. Barthélemy"
                }, {
                    Emoji: "&#x1F1E7&#x1F1F2",
                    Title: "Bermuda"
                }, {
                    Emoji: "&#x1F1E7&#x1F1F3",
                    Title: "Brunei"
                }, {
                    Emoji: "&#x1F1E7&#x1F1F4",
                    Title: "Bolivia"
                }, {
                    Emoji: "&#x1F1E7&#x1F1F6",
                    Title: "Caribbean Netherlands"
                }, {
                    Emoji: "&#x1F1E7&#x1F1F7",
                    Title: "Brazil"
                }, {
                    Emoji: "&#x1F1E7&#x1F1F8",
                    Title: "Bahamas"
                }, {
                    Emoji: "&#x1F1E7&#x1F1F9",
                    Title: "Bhutan"
                }, {
                    Emoji: "&#x1F1E7&#x1F1FB",
                    Title: "Bouvet Island"
                }, {
                    Emoji: "&#x1F1E7&#x1F1FC",
                    Title: "Botswana"
                }, {
                    Emoji: "&#x1F1E7&#x1F1FE",
                    Title: "Belarus"
                }, {
                    Emoji: "&#x1F1E7&#x1F1FF",
                    Title: "Belize"
                }, {
                    Emoji: "&#x1F1E8&#x1F1E6",
                    Title: "Canada"
                }, {
                    Emoji: "&#x1F1E8&#x1F1E8",
                    Title: "Cocos (Keeling) Islands"
                }, {
                    Emoji: "&#x1F1E8&#x1F1E9",
                    Title: "Congo - Kinshasa"
                }, {
                    Emoji: "&#x1F1E8&#x1F1EB",
                    Title: "Central African Republic"
                }, {
                    Emoji: "&#x1F1E8&#x1F1EC",
                    Title: "Congo - Brazzaville"
                }, {
                    Emoji: "&#x1F1E8&#x1F1ED",
                    Title: "Switzerland"
                }, {
                    Emoji: "&#x1F1E8&#x1F1EE",
                    Title: "Côte D’Ivoire"
                }, {
                    Emoji: "&#x1F1E8&#x1F1F0",
                    Title: "Cook Islands"
                }, {
                    Emoji: "&#x1F1E8&#x1F1F1",
                    Title: "Chile"
                }, {
                    Emoji: "&#x1F1E8&#x1F1F2",
                    Title: "Cameroon"
                }, {
                    Emoji: "&#x1F1E8&#x1F1F3",
                    Title: "China"
                }, {
                    Emoji: "&#x1F1E8&#x1F1F4",
                    Title: "Colombia"
                }, {
                    Emoji: "&#x1F1E8&#x1F1F5",
                    Title: "Clipperton Island"
                }, {
                    Emoji: "&#x1F1E8&#x1F1F7",
                    Title: "Costa Rica"
                }, {
                    Emoji: "&#x1F1E8&#x1F1FA",
                    Title: "Cuba"
                }, {
                    Emoji: "&#x1F1E8&#x1F1FB",
                    Title: "Cape Verde"
                }, {
                    Emoji: "&#x1F1E8&#x1F1FC",
                    Title: "Curaçao"
                }, {
                    Emoji: "&#x1F1E8&#x1F1FD",
                    Title: "Christmas Island"
                }, {
                    Emoji: "&#x1F1E8&#x1F1FE",
                    Title: "Cyprus"
                }, {
                    Emoji: "&#x1F1E8&#x1F1FF",
                    Title: "Czech Republic"
                }, {
                    Emoji: "&#x1F1E9&#x1F1EA",
                    Title: "Germany"
                }, {
                    Emoji: "&#x1F1E9&#x1F1EC",
                    Title: "Diego Garcia"
                }, {
                    Emoji: "&#x1F1E9&#x1F1EF",
                    Title: "Djibouti"
                }, {
                    Emoji: "&#x1F1E9&#x1F1F0",
                    Title: "Denmark"
                }, {
                    Emoji: "&#x1F1E9&#x1F1F2",
                    Title: "Dominica"
                }, {
                    Emoji: "&#x1F1E9&#x1F1F4",
                    Title: "Dominican Republic"
                }, {
                    Emoji: "&#x1F1E9&#x1F1FF",
                    Title: "Algeria"
                }, {
                    Emoji: "&#x1F1EA&#x1F1E6",
                    Title: "Ceuta & Melilla"
                }, {
                    Emoji: "&#x1F1EA&#x1F1E8",
                    Title: "Ecuador"
                }, {
                    Emoji: "&#x1F1EA&#x1F1EA",
                    Title: "Estonia"
                }, {
                    Emoji: "&#x1F1EA&#x1F1EC",
                    Title: "Egypt"
                }, {
                    Emoji: "&#x1F1EA&#x1F1ED",
                    Title: "Western Sahara"
                }, {
                    Emoji: "&#x1F1EA&#x1F1F7",
                    Title: "Eritrea"
                }, {
                    Emoji: "&#x1F1EA&#x1F1F8",
                    Title: "Spain"
                }, {
                    Emoji: "&#x1F1EA&#x1F1F9",
                    Title: "Ethiopia"
                }, {
                    Emoji: "&#x1F1EA&#x1F1FA",
                    Title: "European Union"
                }, {
                    Emoji: "&#x1F1EB&#x1F1EE",
                    Title: "Finland"
                }, {
                    Emoji: "&#x1F1EB&#x1F1EF",
                    Title: "Fiji"
                }, {
                    Emoji: "&#x1F1EB&#x1F1F0",
                    Title: "Falkland Islands"
                }, {
                    Emoji: "&#x1F1EB&#x1F1F2",
                    Title: "Micronesia"
                }, {
                    Emoji: "&#x1F1EB&#x1F1F4",
                    Title: "Faroe Islands"
                }, {
                    Emoji: "&#x1F1EB&#x1F1F7",
                    Title: "France"
                }, {
                    Emoji: "&#x1F1EC&#x1F1E6",
                    Title: "Gabon"
                }, {
                    Emoji: "&#x1F1EC&#x1F1E7",
                    Title: "United Kingdom"
                }, {
                    Emoji: "&#x1F1EC&#x1F1E9",
                    Title: "Grenada"
                }, {
                    Emoji: "&#x1F1EC&#x1F1EA",
                    Title: "Georgia"
                }, {
                    Emoji: "&#x1F1EC&#x1F1EB",
                    Title: "French Guiana"
                }, {
                    Emoji: "&#x1F1EC&#x1F1EC",
                    Title: "Guernsey"
                }, {
                    Emoji: "&#x1F1EC&#x1F1ED",
                    Title: "Ghana"
                }, {
                    Emoji: "&#x1F1EC&#x1F1EE",
                    Title: "Gibraltar"
                }, {
                    Emoji: "&#x1F1EC&#x1F1F1",
                    Title: "Greenland"
                }, {
                    Emoji: "&#x1F1EC&#x1F1F2",
                    Title: "Gambia"
                }, {
                    Emoji: "&#x1F1EC&#x1F1F3",
                    Title: "Guinea"
                }, {
                    Emoji: "&#x1F1EC&#x1F1F5",
                    Title: "Guadeloupe"
                }, {
                    Emoji: "&#x1F1EC&#x1F1F6",
                    Title: "Equatorial Guinea"
                }, {
                    Emoji: "&#x1F1EC&#x1F1F7",
                    Title: "Greece"
                }, {
                    Emoji: "&#x1F1EC&#x1F1F8",
                    Title: "South Georgia & South Sandwich Islands"
                }, {
                    Emoji: "&#x1F1EC&#x1F1F9",
                    Title: "Guatemala"
                }, {
                    Emoji: "&#x1F1EC&#x1F1FA",
                    Title: "Guam"
                }, {
                    Emoji: "&#x1F1EC&#x1F1FC",
                    Title: "Guinea-Bissau"
                }, {
                    Emoji: "&#x1F1EC&#x1F1FE",
                    Title: "Guyana"
                }, {
                    Emoji: "&#x1F1ED&#x1F1F0",
                    Title: "Hong Kong SAR China"
                }, {
                    Emoji: "&#x1F1ED&#x1F1F2",
                    Title: "Heard & McDonald Islands"
                }, {
                    Emoji: "&#x1F1ED&#x1F1F3",
                    Title: "Honduras"
                }, {
                    Emoji: "&#x1F1ED&#x1F1F7",
                    Title: "Croatia"
                }, {
                    Emoji: "&#x1F1ED&#x1F1F9",
                    Title: "Haiti"
                }, {
                    Emoji: "&#x1F1ED&#x1F1FA",
                    Title: "Hungary"
                }, {
                    Emoji: "&#x1F1EE&#x1F1E8",
                    Title: "Canary Islands"
                }, {
                    Emoji: "&#x1F1EE&#x1F1E9",
                    Title: "Indonesia"
                }, {
                    Emoji: "&#x1F1EE&#x1F1EA",
                    Title: "Ireland"
                }, {
                    Emoji: "&#x1F1EE&#x1F1F1",
                    Title: "Israel"
                }, {
                    Emoji: "&#x1F1EE&#x1F1F2",
                    Title: "Isle Of Man"
                }, {
                    Emoji: "&#x1F1EE&#x1F1F3",
                    Title: "India"
                }, {
                    Emoji: "&#x1F1EE&#x1F1F4",
                    Title: "British Indian Ocean Territory"
                }, {
                    Emoji: "&#x1F1EE&#x1F1F6",
                    Title: "Iraq"
                }, {
                    Emoji: "&#x1F1EE&#x1F1F7",
                    Title: "Iran"
                }, {
                    Emoji: "&#x1F1EE&#x1F1F8",
                    Title: "Iceland"
                }, {
                    Emoji: "&#x1F1EE&#x1F1F9",
                    Title: "Italy"
                }, {
                    Emoji: "&#x1F1EF&#x1F1EA",
                    Title: "Jersey"
                }, {
                    Emoji: "&#x1F1EF&#x1F1F2",
                    Title: "Jamaica"
                }, {
                    Emoji: "&#x1F1EF&#x1F1F4",
                    Title: "Jordan"
                }, {
                    Emoji: "&#x1F1EF&#x1F1F5",
                    Title: "Japan"
                }, {
                    Emoji: "&#x1F1F0&#x1F1EA",
                    Title: "Kenya"
                }, {
                    Emoji: "&#x1F1F0&#x1F1EC",
                    Title: "Kyrgyzstan"
                }, {
                    Emoji: "&#x1F1F0&#x1F1ED",
                    Title: "Cambodia"
                }, {
                    Emoji: "&#x1F1F0&#x1F1EE",
                    Title: "Kiribati"
                }, {
                    Emoji: "&#x1F1F0&#x1F1F2",
                    Title: "Comoros"
                }, {
                    Emoji: "&#x1F1F0&#x1F1F3",
                    Title: "St. Kitts & Nevis"
                }, {
                    Emoji: "&#x1F1F0&#x1F1F5",
                    Title: "North Korea"
                }, {
                    Emoji: "&#x1F1F0&#x1F1F7",
                    Title: "South Korea"
                }, {
                    Emoji: "&#x1F1F0&#x1F1FC",
                    Title: "Kuwait"
                }, {
                    Emoji: "&#x1F1F0&#x1F1FE",
                    Title: "Cayman Islands"
                }, {
                    Emoji: "&#x1F1F0&#x1F1FF",
                    Title: "Kazakhstan"
                }, {
                    Emoji: "&#x1F1F1&#x1F1E6",
                    Title: "Laos"
                }, {
                    Emoji: "&#x1F1F1&#x1F1E7",
                    Title: "Lebanon"
                }, {
                    Emoji: "&#x1F1F1&#x1F1E8",
                    Title: "St. Lucia"
                }, {
                    Emoji: "&#x1F1F1&#x1F1EE",
                    Title: "Liechtenstein"
                }, {
                    Emoji: "&#x1F1F1&#x1F1F0",
                    Title: "Sri Lanka"
                }, {
                    Emoji: "&#x1F1F1&#x1F1F7",
                    Title: "Liberia"
                }, {
                    Emoji: "&#x1F1F1&#x1F1F8",
                    Title: "Lesotho"
                }, {
                    Emoji: "&#x1F1F1&#x1F1F9",
                    Title: "Lithuania"
                }, {
                    Emoji: "&#x1F1F1&#x1F1FA",
                    Title: "Luxembourg"
                }, {
                    Emoji: "&#x1F1F1&#x1F1FB",
                    Title: "Latvia"
                }, {
                    Emoji: "&#x1F1F1&#x1F1FE",
                    Title: "Libya"
                }, {
                    Emoji: "&#x1F1F2&#x1F1E6",
                    Title: "Morocco"
                }, {
                    Emoji: "&#x1F1F2&#x1F1E8",
                    Title: "Monaco"
                }, {
                    Emoji: "&#x1F1F2&#x1F1E9",
                    Title: "Moldova"
                }, {
                    Emoji: "&#x1F1F2&#x1F1EA",
                    Title: "Montenegro"
                }, {
                    Emoji: "&#x1F1F2&#x1F1EB",
                    Title: "St. Martin"
                }, {
                    Emoji: "&#x1F1F2&#x1F1EC",
                    Title: "Madagascar"
                }, {
                    Emoji: "&#x1F1F2&#x1F1ED",
                    Title: "Marshall Islands"
                }, {
                    Emoji: "&#x1F1F2&#x1F1F0",
                    Title: "Macedonia"
                }, {
                    Emoji: "&#x1F1F2&#x1F1F1",
                    Title: "Mali"
                }, {
                    Emoji: "&#x1F1F2&#x1F1F2",
                    Title: "Myanmar (Burma)"
                }, {
                    Emoji: "&#x1F1F2&#x1F1F3",
                    Title: "Mongolia"
                }, {
                    Emoji: "&#x1F1F2&#x1F1F4",
                    Title: "Macau SAR China"
                }, {
                    Emoji: "&#x1F1F2&#x1F1F5",
                    Title: "Northern Mariana Islands"
                }, {
                    Emoji: "&#x1F1F2&#x1F1F6",
                    Title: "Martinique"
                }, {
                    Emoji: "&#x1F1F2&#x1F1F7",
                    Title: "Mauritania"
                }, {
                    Emoji: "&#x1F1F2&#x1F1F8",
                    Title: "Montserrat"
                }, {
                    Emoji: "&#x1F1F2&#x1F1F9",
                    Title: "Malta"
                }, {
                    Emoji: "&#x1F1F2&#x1F1FA",
                    Title: "Mauritius"
                }, {
                    Emoji: "&#x1F1F2&#x1F1FB",
                    Title: "Maldives"
                }, {
                    Emoji: "&#x1F1F2&#x1F1FC",
                    Title: "Malawi"
                }, {
                    Emoji: "&#x1F1F2&#x1F1FD",
                    Title: "Mexico"
                }, {
                    Emoji: "&#x1F1F2&#x1F1FE",
                    Title: "Malaysia"
                }, {
                    Emoji: "&#x1F1F2&#x1F1FF",
                    Title: "Mozambique"
                }, {
                    Emoji: "&#x1F1F3&#x1F1E6",
                    Title: "Namibia"
                }, {
                    Emoji: "&#x1F1F3&#x1F1E8",
                    Title: "New Caledonia"
                }, {
                    Emoji: "&#x1F1F3&#x1F1EA",
                    Title: "Niger"
                }, {
                    Emoji: "&#x1F1F3&#x1F1EB",
                    Title: "Norfolk Island"
                }, {
                    Emoji: "&#x1F1F3&#x1F1EC",
                    Title: "Nigeria"
                }, {
                    Emoji: "&#x1F1F3&#x1F1EE",
                    Title: "Nicaragua"
                }, {
                    Emoji: "&#x1F1F3&#x1F1F1",
                    Title: "Netherlands"
                }, {
                    Emoji: "&#x1F1F3&#x1F1F4",
                    Title: "Norway"
                }, {
                    Emoji: "&#x1F1F3&#x1F1F5",
                    Title: "Nepal"
                }, {
                    Emoji: "&#x1F1F3&#x1F1F7",
                    Title: "Nauru"
                }, {
                    Emoji: "&#x1F1F3&#x1F1FA",
                    Title: "Niue"
                }, {
                    Emoji: "&#x1F1F3&#x1F1FF",
                    Title: "New Zealand"
                }, {
                    Emoji: "&#x1F1F4&#x1F1F2",
                    Title: "Oman"
                }, {
                    Emoji: "&#x1F1F5&#x1F1E6",
                    Title: "Panama"
                }, {
                    Emoji: "&#x1F1F5&#x1F1EA",
                    Title: "Peru"
                }, {
                    Emoji: "&#x1F1F5&#x1F1EB",
                    Title: "French Polynesia"
                }, {
                    Emoji: "&#x1F1F5&#x1F1EC",
                    Title: "Papua New Guinea"
                }, {
                    Emoji: "&#x1F1F5&#x1F1ED",
                    Title: "Philippines"
                }, {
                    Emoji: "&#x1F1F5&#x1F1F0",
                    Title: "Pakistan"
                }, {
                    Emoji: "&#x1F1F5&#x1F1F1",
                    Title: "Poland"
                }, {
                    Emoji: "&#x1F1F5&#x1F1F2",
                    Title: "St. Pierre & Miquelon"
                }, {
                    Emoji: "&#x1F1F5&#x1F1F3",
                    Title: "Pitcairn Islands"
                }, {
                    Emoji: "&#x1F1F5&#x1F1F7",
                    Title: "Puerto Rico"
                }, {
                    Emoji: "&#x1F1F5&#x1F1F8",
                    Title: "Palestinian Territories"
                }, {
                    Emoji: "&#x1F1F5&#x1F1F9",
                    Title: "Portugal"
                }, {
                    Emoji: "&#x1F1F5&#x1F1FC",
                    Title: "Palau"
                }, {
                    Emoji: "&#x1F1F5&#x1F1FE",
                    Title: "Paraguay"
                }, {
                    Emoji: "&#x1F1F6&#x1F1E6",
                    Title: "Qatar"
                }, {
                    Emoji: "&#x1F1F7&#x1F1EA",
                    Title: "Réunion"
                }, {
                    Emoji: "&#x1F1F7&#x1F1F4",
                    Title: "Romania"
                }, {
                    Emoji: "&#x1F1F7&#x1F1F8",
                    Title: "Serbia"
                }, {
                    Emoji: "&#x1F1F7&#x1F1FA",
                    Title: "Russia"
                }, {
                    Emoji: "&#x1F1F7&#x1F1FC",
                    Title: "Rwanda"
                }, {
                    Emoji: "&#x1F1F8&#x1F1E6",
                    Title: "Saudi Arabia"
                }, {
                    Emoji: "&#x1F1F8&#x1F1E7",
                    Title: "Solomon Islands"
                }, {
                    Emoji: "&#x1F1F8&#x1F1E8",
                    Title: "Seychelles"
                }, {
                    Emoji: "&#x1F1F8&#x1F1E9",
                    Title: "Sudan"
                }, {
                    Emoji: "&#x1F1F8&#x1F1EA",
                    Title: "Sweden"
                }, {
                    Emoji: "&#x1F1F8&#x1F1EC",
                    Title: "Singapore"
                }, {
                    Emoji: "&#x1F1F8&#x1F1ED",
                    Title: "St. Helena"
                }, {
                    Emoji: "&#x1F1F8&#x1F1EE",
                    Title: "Slovenia"
                }, {
                    Emoji: "&#x1F1F8&#x1F1EF",
                    Title: "Svalbard & Jan Mayen"
                }, {
                    Emoji: "&#x1F1F8&#x1F1F0",
                    Title: "Slovakia"
                }, {
                    Emoji: "&#x1F1F8&#x1F1F1",
                    Title: "Sierra Leone"
                }, {
                    Emoji: "&#x1F1F8&#x1F1F2",
                    Title: "San Marino"
                }, {
                    Emoji: "&#x1F1F8&#x1F1F3",
                    Title: "Senegal"
                }, {
                    Emoji: "&#x1F1F8&#x1F1F4",
                    Title: "Somalia"
                }, {
                    Emoji: "&#x1F1F8&#x1F1F7",
                    Title: "Suriname"
                }, {
                    Emoji: "&#x1F1F8&#x1F1F8",
                    Title: "South Sudan"
                }, {
                    Emoji: "&#x1F1F8&#x1F1F9",
                    Title: "São Tomé & Príncipe"
                }, {
                    Emoji: "&#x1F1F8&#x1F1FB",
                    Title: "El Salvador"
                }, {
                    Emoji: "&#x1F1F8&#x1F1FD",
                    Title: "Sint Maarten"
                }, {
                    Emoji: "&#x1F1F8&#x1F1FE",
                    Title: "Syria"
                }, {
                    Emoji: "&#x1F1F8&#x1F1FF",
                    Title: "Swaziland"
                }, {
                    Emoji: "&#x1F1F9&#x1F1E6",
                    Title: "Tristan Da Cunha"
                }, {
                    Emoji: "&#x1F1F9&#x1F1E8",
                    Title: "Turks & Caicos Islands"
                }, {
                    Emoji: "&#x1F1F9&#x1F1E9",
                    Title: "Chad"
                }, {
                    Emoji: "&#x1F1F9&#x1F1EB",
                    Title: "French Southern Territories"
                }, {
                    Emoji: "&#x1F1F9&#x1F1EC",
                    Title: "Togo"
                }, {
                    Emoji: "&#x1F1F9&#x1F1ED",
                    Title: "Thailand"
                }, {
                    Emoji: "&#x1F1F9&#x1F1EF",
                    Title: "Tajikistan"
                }, {
                    Emoji: "&#x1F1F9&#x1F1F0",
                    Title: "Tokelau"
                }, {
                    Emoji: "&#x1F1F9&#x1F1F1",
                    Title: "Timor-Leste"
                }, {
                    Emoji: "&#x1F1F9&#x1F1F2",
                    Title: "Turkmenistan"
                }, {
                    Emoji: "&#x1F1F9&#x1F1F3",
                    Title: "Tunisia"
                }, {
                    Emoji: "&#x1F1F9&#x1F1F4",
                    Title: "Tonga"
                }, {
                    Emoji: "&#x1F1F9&#x1F1F7",
                    Title: "Turkey"
                }, {
                    Emoji: "&#x1F1F9&#x1F1F9",
                    Title: "Trinidad & Tobago"
                }, {
                    Emoji: "&#x1F1F9&#x1F1FB",
                    Title: "Tuvalu"
                }, {
                    Emoji: "&#x1F1F9&#x1F1FC",
                    Title: "Taiwan"
                }, {
                    Emoji: "&#x1F1F9&#x1F1FF",
                    Title: "Tanzania"
                }, {
                    Emoji: "&#x1F1FA&#x1F1E6",
                    Title: "Ukraine"
                }, {
                    Emoji: "&#x1F1FA&#x1F1EC",
                    Title: "Uganda"
                }, {
                    Emoji: "&#x1F1FA&#x1F1F2",
                    Title: "U.S. Outlying Islands"
                }, {
                    Emoji: "&#x1F1FA&#x1F1F3",
                    Title: "United Nations"
                }, {
                    Emoji: "&#x1F1FA&#x1F1F8",
                    Title: "United States"
                }, {
                    Emoji: "&#x1F1FA&#x1F1FE",
                    Title: "Uruguay"
                }, {
                    Emoji: "&#x1F1FA&#x1F1FF",
                    Title: "Uzbekistan"
                }, {
                    Emoji: "&#x1F1FB&#x1F1E6",
                    Title: "Vatican City"
                }, {
                    Emoji: "&#x1F1FB&#x1F1E8",
                    Title: "St. Vincent & Grenadines"
                }, {
                    Emoji: "&#x1F1FB&#x1F1EA",
                    Title: "Venezuela"
                }, {
                    Emoji: "&#x1F1FB&#x1F1EC",
                    Title: "British Virgin Islands"
                }, {
                    Emoji: "&#x1F1FB&#x1F1EE",
                    Title: "U.S. Virgin Islands"
                }, {
                    Emoji: "&#x1F1FB&#x1F1F3",
                    Title: "Vietnam"
                }, {
                    Emoji: "&#x1F1FB&#x1F1FA",
                    Title: "Vanuatu"
                }, {
                    Emoji: "&#x1F1FC&#x1F1EB",
                    Title: "Wallis & Futuna"
                }, {
                    Emoji: "&#x1F1FC&#x1F1F8",
                    Title: "Samoa"
                }, {
                    Emoji: "&#x1F1FD&#x1F1F0",
                    Title: "Kosovo"
                }, {
                    Emoji: "&#x1F1FE&#x1F1EA",
                    Title: "Yemen"
                }, {
                    Emoji: "&#x1F1FE&#x1F1F9",
                    Title: "Mayotte"
                }, {
                    Emoji: "&#x1F1FF&#x1F1E6",
                    Title: "South Africa"
                }, {
                    Emoji: "&#x1F1FF&#x1F1F2",
                    Title: "Zambia"
                }]
        };
        for (I = 0, N = CFH.Items.length; I < N; ++I) {
            addCFHItem(CFH.Items[I], CFH);
        }
        CFH.TextArea.addEventListener("paste", function (Event) {
            var Value;
            if (esgst.cfh_pasteFormatting) {
                Value = Event.clipboardData.getData("text/plain");
                if (Value.match(/^https?:/)) {
                    Event.preventDefault();
                    wrapCFHLinkImage(CFH, "", Value, Value.match(/\.(jpg|jpeg|gif|bmp|png)/) ? true : false);
                }
            }
        });
    }

    function wrapCFHLinkImage(CFH, Title, URL, Image) {
        var Start, End, Value;
        Start = CFH.TextArea.selectionStart;
        End = CFH.TextArea.selectionEnd;
        Value = (Image ? "!" : "") + "[" + Title + "](" + URL + ")";
        CFH.TextArea.value = CFH.TextArea.value.slice(0, Start) + Value + CFH.TextArea.value.slice(End);
        CFH.TextArea.setSelectionRange(End + Value.length, End + Value.length);
        CFH.TextArea.focus();
    }

    function insertCFHTableRows(N, Table) {
        while (N > 0) {
            insertCFHTableRow(Table);
            --N;
        }
    }

    function insertCFHTableRow(Table) {
        var N, Row, I, J, Delete;
        N = Table.rows.length;
        Row = Table.insertRow(N);
        for (I = 0, J = Table.rows[0].cells.length - 1; I < J; ++I) {
            Row.insertCell(0).innerHTML = "<input placeholder=\"Value\" type=\"text\"/>";
        }
        Delete = Row.insertCell(0);
        if (N > 2) {
            Delete.innerHTML =
                "<a>" +
                "    <i class=\"fa fa-times-circle\" title=\"Delete row\"></i>" +
                "</a>";
            Delete.firstElementChild.addEventListener("click", function () {
                if (Table.rows.length > 4) {
                    Row.remove();
                } else {
                    window.alert("A table must have a least one row and two columns.");
                }
            });
        }
    }

    function insertCFHTableColumns(N, Table) {
        while (N > 0) {
            insertCFHTableColumn(Table);
            --N;
        }
    }

    function insertCFHTableColumn(Table) {
        var Rows, N, I, J, Delete, Column;
        Rows = Table.rows;
        N = Rows[0].cells.length;
        for (I = 3, J = Rows.length; I < J; ++I) {
            Rows[I].insertCell(N).innerHTML = "<input placeholder=\"Value\" type=\"text\"/>";
        }
        Rows[2].insertCell(N).innerHTML =
            "<select>" +
            "    <option value=\":-\">Left</option>" +
            "    <option value=\":-:\">Center</option>" +
            "    <option value=\"-:\">Right</option>" +
            "</select>";
        Delete = Rows[0].insertCell(N);
        Delete.innerHTML =
            "<a>" +
            "    <i class=\"fa fa-times-circle\" title=\"Delete column\"></i>" +
            "</a>";
        Column = Rows[1].insertCell(N);
        Column.innerHTML = "<input placeholder=\"Header\" type=\"text\"/>";
        Delete.firstElementChild.addEventListener("click", function () {
            Rows = Table.rows;
            N = Rows[1].cells.length;
            if (N > 3) {
                do {
                    --N;
                } while (Rows[1].cells[N] != Column);
                for (I = 0, J = Rows.length; I < J; ++I) {
                    Rows[I].deleteCell(N);
                }
            } else {
                window.alert("A table must have at least one row and two columns.");
            }
        });
    }

    function setCFHEmojis(Emojis, CFH) {
        var I, N;
        for (I = 0, N = Emojis.children.length; I < N; ++I) {
            Emojis.children[I].addEventListener("click", function (Event) {
                wrapCFHFormat(CFH, Event.currentTarget.textContent);
            });
        }
    }

    function addCFHItem(Item, CFH) {
        var Context, Button, Popout;
        if ((Item.ID && esgst[Item.ID]) || !Item.ID) {
            CFH.Panel.insertAdjacentHTML(
                "beforeEnd",
                "<span>" +
                "    <a class=\"page_heading_btn\" title=\"" + Item.Name + "\">" +
                "        <i class=\"fa " + Item.Icon + "\"></i>" + (Item.SecondaryIcon ? (
                    "    <i class=\"fa " + Item.SecondaryIcon + "\"></i>") : "") + (Item.Text ? (
                        "    <span>" + Item.Text + "</span") : "") +
                "    </a>" +
                "</span>"
            );
            Context = CFH.Panel.lastElementChild;
            Button = Context.firstElementChild;
            if (Item.setPopout) {
                Popout = createPopout(Context);
                Popout.Popout.classList.add("CFHPopout");
                Popout.customRule = function (Target) {
                    return !Button.contains(Target);
                };
                Item.setPopout(Popout.Popout);
                Button.addEventListener("click", function () {
                    if (Popout.Popout.classList.contains("rhHidden")) {
                        Popout.popOut(Button, Item.Callback);
                    } else {
                        Popout.Popout.classList.add("rhHidden");
                    }
                });
            } else if (Item.setPopup) {
                var popup;
                Button.addEventListener("click", function () {
                    if (popup) {
                        popup.popUp();
                    } else {
                        popup = createPopup();
                        popup.Icon.classList.add(`fa-table`);
                        popup.Title.textContent = `Add a table:`;
                        Item.setPopup(popup);
                        popup.popUp();
                    }
                });
            } else {
                if (Item.Callback) {
                    Item.Callback(Context);
                }
                Context.addEventListener("click", function () {
                    if (Item.OnClick) {
                        Item.OnClick();
                    } else {
                        wrapCFHFormat(CFH, Item.Prefix, Item.Suffix, Item.OrderedList, Item.UnorderedList);
                    }
                });
            }
        }
    }

    function wrapCFHFormat(CFH, Prefix, Suffix, OrderedList, UnorderedList) {
        var Value, Start, End, N;
        Value = CFH.TextArea.value;
        Start = CFH.TextArea.selectionStart;
        End = CFH.TextArea.selectionEnd;
        if (OrderedList || UnorderedList) {
            if (OrderedList) {
                N = 1;
                Prefix = N + ". " + Value.slice(Start, End).replace(/\n/g, function () {
                    return ("\n" + (++N) + ". ");
                });
            } else {
                Prefix = "* " + Value.slice(Start, End).replace(/\n/g, "\n* ");
            }
        }
        CFH.TextArea.value = Value.slice(0, Start) + Prefix + ((OrderedList || UnorderedList) ? "" : (Value.slice(Start, End) + (Suffix ? Suffix : ""))) + Value.slice(End);
        CFH.TextArea.setSelectionRange(End + Prefix.length, End + Prefix.length);
        CFH.TextArea.focus();
    }

    function setCFHALIPF(CFH, Value) {
        if (typeof Value == "undefined") {
            Value = esgst.cfh_pasteFormatting ? false : true;
        }
        setValue(`cfh_pasteFormatting`, Value);
        esgst.cfh_pasteFormatting = Value;
        if (Value) {
            CFH.ALIPF.title = "Links / Images Paste Formatting: On";
            CFH.ALIPF.classList.remove("CFHALIPF");
        } else {
            CFH.ALIPF.title = "Links / Images Paste Formatting: Off";
            CFH.ALIPF.classList.add("CFHALIPF");
        }
    }

    /* [RBOT] Reply Box On Top */

    function loadRbot() {
        if (esgst.replyBox) {
            var html = `
                <div class="esgst-rbot"></div>
            `;
            var sibling;
            if (esgst.mainPageHeadingBackground) {
                sibling = esgst.mainPageHeadingBackground;
            } else {
                sibling = esgst.mainPageHeading;
            }
            sibling.insertAdjacentHTML(`afterEnd`, html);
            var box = sibling.nextElementSibling;
            box.appendChild(esgst.replyBox);
            var button = box.getElementsByClassName(esgst.cancelButtonClass)[0];
            if (button) {
                button.addEventListener(`click`, waitToRestoreReplyBox);
            }
        }

        function waitToRestoreReplyBox() {
            window.setTimeout(restoreReplyBox, 0);
        }

        function restoreReplyBox() {
            box.appendChild(esgst.replyBox);
        }
    }

    /* [RBP] Reply Box Popup */

    function loadRbp(button) {
        var Popup;
        Popup = createPopup();
        Popup.Popup.classList.add("rhPopupLarge");
        Popup.Icon.classList.add("fa-comment");
        Popup.Title.textContent = "Add a comment:";
        Popup.TextArea.classList.remove("rhHidden");
        if (esgst.cfh) {
            addCFHPanel(Popup.TextArea);
        }
        createButton(Popup.Button, "fa-check", "Save", "fa-circle-o-notch fa-spin", "Saving...", function (Callback) {
            Popup.Progress.innerHTML = "";
            saveComment(esgst.sg ? "" : document.querySelector("[name='trade_code']").value, "", Popup.TextArea.value, esgst.sg ? window.location.href.match(/(.+?)(#.+?)?$/)[1] : "/ajax.php", Popup.Progress,
                Callback);
        });
        button.addEventListener("click", function () {
            Popup.popUp(function () {
                Popup.TextArea.focus();
            });
        });
    }

    /* [MR] Multi-Reply */
    /* [RFI] Reply From Inbox */

    function loadMr() {
        if (!esgst.inboxPath) {
            esgst.endlessFeatures.push(getMrRfiButtons);
            getMrRfiButtons(document);
        }
    }

    function loadRfi() {
        if (esgst.inboxPath) {
            esgst.endlessFeatures.push(getMrRfiButtons);
            getMrRfiButtons(document);
        }
    }

    function getMrRfiButtons(context) {
        var matches = context.getElementsByClassName(esgst.sg ? `comment__actions` : `action_list`);
        for (var i = 0, n = matches.length; i < n; ++i) {
            addMRButton(matches[i]);
        }
    }

    function addMRButton(Context) {
        var MR, Parent, ReplyButton, Permalink;
        MR = {
            Context: Context,
            Comment: Context.closest(esgst.sg ? ".comment" : ".comment_outer")
        };
        if (MR.Comment) {
            Parent = MR.Comment.closest(esgst.sg ? ".comment" : ".comment_outer");
            MR.Container = MR.Comment.getElementsByClassName(esgst.sg ? "comment__summary" : "comment_inner")[0];
            MR.Timestamp = MR.Context.firstElementChild;
            ReplyButton = MR.Context.getElementsByClassName(esgst.sg ? "js__comment-reply" : "js_comment_reply")[0];
            Permalink = MR.Context.lastElementChild;
            if (ReplyButton || window.location.pathname.match(/^\/messages/)) {
                if (ReplyButton) {
                    ReplyButton.remove();
                    MR.ParentID = Parent.getAttribute(esgst.sg ? "data-comment-id" : "data-id");
                    if (window.location.pathname.match(/^\/messages/)) {
                        MR.URL = Permalink.getAttribute("href");
                    }
                } else {
                    MR.URL = Permalink.getAttribute("href");
                    MR.Comment.insertAdjacentHTML("beforeEnd", "<div class=\"comment__children comment_children\"></div>");
                }
                if (esgst.sg) {
                    MR.TradeCode = "";
                } else {
                    if (!window.location.pathname.match(/^\/messages/)) {
                        MR.TradeCode = window.location.pathname.match(/^\/trade\/(.+?)\//)[1];
                    }
                    MR.Username = MR.Comment.getElementsByClassName("author_name")[0].textContent;
                }
                MR.Timestamp.insertAdjacentHTML("afterEnd", "<a class=\"comment__actions__button MRReply\">Reply</a>");
                MR.Timestamp.nextElementSibling.addEventListener("click", function () {
                    if (!MR.Box) {
                        addMRBox(MR);
                    } else {
                        MR.Description.focus();
                    }
                });
            }
            MR.Children = MR.Comment.getElementsByClassName(esgst.sg ? "comment__children" : "comment_children")[0];
            setMREdit(MR);
        }
    }

    function addMRBox(MR) {
        var Username;
        Username = esgst.username;
        MR.Children.insertAdjacentHTML(
            "afterBegin",
            "<div class=\"comment reply_form MRBox\">" + (esgst.sg ? (
                "<div class=\"comment__child\">" +
                "    <a href=\"/user/" + Username + "\" class=\"global__image-outer-wrap global__image-outer-wrap--avatar-small\">" +
                "        <div class=\"global__image-inner-wrap\" style=\"background-image: url(" + esgst.avatar + ");\"></div>" +
                "    </a>" +
                "    <div class=\"comment__summary\">" +
                "        <div class=\"comment__author\">" +
                "            <div class=\"comment__username\">" +
                "                <a href=\"/user/" + Username + "\">" + Username + "</a>" +
                "            </div>" +
                "        </div>" +
                "        <div class=\"comment__display-state\">" +
                "            <div class=\"comment__description\">") : "") +
            "                    <input name=\"trade_code\" type=\"hidden\" value=\"" + MR.TradeCode + "\">" +
            "                    <input name=\"parent_id\" type=\"hidden\" value=\"" + MR.ParentID + "\">" +
            "                    <textarea class=\"MRDescription\" name=\"description\"" + (esgst.sg ? "" : " placeholder=\"Write a reply to " + MR.Username + "...\"") + "></textarea>" +
            "                    <div class=\"align-button-container btn_actions\">" +
            "                        <div></div>" +
            "                        <div class=\"comment__cancel-button btn_cancel MRCancel\">" +
            "                            <span>Cancel</span>" +
            "                        </div>" +
            "                    </div>" + (esgst.sg ? (
                "            </div>" +
                "        </div>" +
                "    </div>" +
                "</div>") : "") +
            "</div>"
        );
        MR.Box = MR.Children.firstElementChild;
        MR.Description = MR.Box.getElementsByClassName("MRDescription")[0];
        MR.Cancel = MR.Box.getElementsByClassName("MRCancel")[0];
        if (esgst.cfh) {
            addCFHPanel(MR.Description);
        }
        MR.Description.focus();
        addDEDButton(MR.Box, MR.URL, function (Response, DEDStatus) {
            var ReplyID, Reply, ResponseJSON;
            if (esgst.sg) {
                ReplyID = Response.finalUrl.match(/#(.+)/);
                if (ReplyID) {
                    MR.Box.remove();
                    Reply = DOM.parse(Response.responseText).getElementById(ReplyID[1]).closest(".comment");
                    addRMLLink(MR.Container, [Reply]);
                    loadEndlessFeatures(Reply);
                    MR.Children.appendChild(Reply);
                    window.location.hash = ReplyID[1];
                } else {
                    DEDStatus.innerHTML =
                        "<i class=\"fa fa-times\"></i> " +
                        "<span>Failed!</span>";
                }
            } else {
                ResponseJSON = JSON.parse(Response.responseText);
                if (ResponseJSON.success) {
                    MR.Box.remove();
                    Reply = DOM.parse(ResponseJSON.html).getElementsByClassName("comment_outer")[0];
                    addRMLLink(MR.Container, [Reply]);
                    loadEndlessFeatures(Reply);
                    MR.Children.appendChild(Reply);
                    window.location.hash = Reply.id;
                } else {
                    DEDStatus.innerHTML =
                        "<i class=\"fa fa-times\"></i> " +
                        "<span>Failed!</span>";
                }
            }
        });
        MR.Cancel.addEventListener("click", function () {
            MR.Box.remove();
            MR.Box = null;
        });
    }

    function setMREdit(MR) {
        var DisplayState, EditState, EditSave, ID, AllowReplies, Description;
        MR.Edit = MR.Context.getElementsByClassName(esgst.sg ? "js__comment-edit" : "js_comment_edit")[0];
        if (MR.Edit) {
            MR.Edit.insertAdjacentHTML("afterEnd", "<a class=\"comment__actions__button MREdit\">Edit</a>");
            MR.Edit = MR.Edit.nextElementSibling;
            MR.Edit.previousElementSibling.remove();
            DisplayState = MR.Comment.getElementsByClassName(esgst.sg ? "comment__display-state" : "comment_body_default")[0];
            EditState = MR.Comment.getElementsByClassName(esgst.sg ? "comment__edit-state" : "edit_form")[0];
            EditSave = EditState.getElementsByClassName(esgst.sg ? "js__comment-edit-save" : "js_submit")[0];
            EditSave.insertAdjacentHTML(
                "afterEnd",
                "<a class=\"comment__submit-button btn_action white EditSave\">" +
                "    <i class=\"fa fa-edit\"></i>" +
                "    <span>Edit</span>" +
                "</a>"
            );
            EditSave = EditSave.nextElementSibling;
            EditSave.previousElementSibling.remove();
            ID = EditState.querySelector("[name='comment_id']").value;
            AllowReplies = esgst.sg ? EditState.querySelector("[name='allow_replies']").value : "";
            Description = EditState.querySelector("[name='description']");
            MR.Edit.addEventListener("click", function () {
                var Temp;
                if (esgst.sg) {
                    DisplayState.classList.add("is-hidden");
                    MR.Context.classList.add("is-hidden");
                } else {
                    MR.Container.classList.add("is_hidden");
                }
                EditState.classList.remove(esgst.sg ? "is-hidden" : "is_hidden");
                Temp = Description.value;
                Description.focus();
                Description.value = "";
                Description.value = Temp;
            });
            EditSave.addEventListener("click", function () {
                makeRequest("xsrf_token=" + esgst.xsrfToken + "&do=comment_edit&comment_id=" + ID + "&allow_replies=" + AllowReplies + "&description=" + encodeURIComponent(Description.value),
                    "/ajax.php", null, function (Response) {
                        var ResponseJSON, ResponseHTML;
                        ResponseJSON = JSON.parse(Response.responseText);
                        if (ResponseJSON.type == "success" || ResponseJSON.success) {
                            ResponseHTML = DOM.parse(ResponseJSON[esgst.sg ? "comment" : "html"]);
                            DisplayState.innerHTML = ResponseHTML.getElementsByClassName(esgst.sg ? "comment__display-state" : "comment_body_default")[0].innerHTML;
                            EditState.classList.add(esgst.sg ? "is-hidden" : "is_hidden");
                            MR.Timestamp.innerHTML = ResponseHTML.getElementsByClassName(esgst.sg ? "comment__actions" : "action_list")[0].firstElementChild.innerHTML;
                            if (esgst.at) {
                                getTimestamps(MR.Timestamp);
                            }
                            if (esgst.sg) {
                                DisplayState.classList.remove("is-hidden");
                                MR.Context.classList.remove("is-hidden");
                            } else {
                                MR.Container.classList.remove("is_hidden");
                            }
                        }
                    });
            });
        }
    }

    /* [CT] Comment Tracker */

    function loadCt() {
        if ((esgst.giveawaysPath || esgst.commentsPath || esgst.inboxPath || esgst.discussionsPath) && !document.getElementsByClassName(`table--summary`)[0]) {
            esgst.commentFeatures.push(getCtComments);
            if (esgst.commentsPath || esgst.inboxPath) {
            } else {
                esgst.endlessFeatures.push(addCtDiscussionPanels);
                addCtDiscussionPanels(document);
            }
        }
    }

    function getCtComments(comments, goToUnread, markRead, markUnread) {
        if (goToUnread) {
            checkCtComments(comments, true);
        } else {
            createLock(`commentLock`, 300, function(deleteLock) {
                checkCtComments(comments, false, markRead, markUnread);
                deleteLock();
            });
        }
    }

    function checkCtComments(comments, goToUnread, markRead, markUnread) {
        var button, code, comment, i, n, saved, source, type, unread;
        saved = JSON.parse(GM_getValue(`comments`));
        n = comments.length;
        if (n > 0) {
            for (i = 0; i < n; ++i) {
                comment = comments[i];
                if (comment.id || comment.id.match(/^$/)) {
                if (!saved[comment.type][comment.code]) {
                    saved[comment.type][comment.code] = {
                        comments: {}
                    };
                } else {
                    delete saved[comment.type][comment.code].comments.Count;
                    delete saved[comment.type][comment.code].comments.undefined;
                }
                saved[comment.type][comment.code].visited = true;
                button = comment.comment.getElementsByClassName(`esgst-ct-comment-button`)[0];
                if (comment.author === esgst.username) {
                    markCtCommentRead(comment, saved);
                } else if (!saved[comment.type][comment.code].comments[comment.id] || comment.timestamp !== saved[comment.type][comment.code].comments[comment.id].timestamp) {
                    if (goToUnread) {
                        if (esgst.ct_r && ((esgst.discussionPath && !esgst.es_r) || !esgst.discussionPath)) {
                            unread = comment;
                        } else {
                            if (esgst.discussionsPath) {
                                esgst.ctUnreadFound = true;
                                if (comment.id) {
                                    window.open(`/go/comment/${comment.id}`);
                                } else {
                                    window.open(`/discussion/${comment.code}/`);
                                }
                            } else {
                                goToComment(comment.id, comment.comment);
                            }
                            break;
                        }
                    } else if (markRead) {
                        markCtCommentRead(comment, saved);
                        addCtUnreadCommentButton(button, comment);
                    } else {
                        markCtCommentUnread(comment, saved);
                        addCtReadCommentButton(button, comment);
                    }
                } else if (markUnread) {
                    markCtCommentUnread(comment, saved);
                    addCtReadCommentButton(button, comment);
                } else {
                    markCtCommentRead(comment, saved);
                    addCtUnreadCommentButton(button, comment);
                }
                }
            }
            if (goToUnread) {
                if (unread) {
                    if (esgst.discussionsPath) {
                        esgst.ctUnreadFound = true;
                        if (unread.id) {
                            window.open(`/go/comment/${unread.id}`);
                        } else {
                            window.open(`/discussion/${unread.code}/`);
                        }
                    } else {
                        goToComment(unread.id, unread.comment);
                    }
                }
            } else {
                GM_setValue(`comments`, JSON.stringify(saved));
            }
        } else {
            source = window.location.pathname.match(/(giveaway|discussion|trade|ticket)\/(.+?)(\/.*)?$/);
            if (source) {
                type = `${source[1]}s`;
                code = source[2];
                if (!saved[type][code]) {
                    saved[type][code] = {
                        comments: {},
                        visited: true
                    };
                }
                GM_setValue(`comments`, JSON.stringify(saved));
            }
        }
    }

    function markCtCommentRead(comment, comments, save, callback) {
        if (save) {
            createLock(`commentLock`, 300, function(deleteLock) {
                comments = JSON.parse(GM_getValue(`comments`));
                if (!comments[comment.type][comment.code].comments[comment.id]) {
                    comments[comment.type][comment.code].comments[comment.id] = {};
                }
                comments[comment.type][comment.code].comments[comment.id].timestamp = comment.timestamp;
                GM_setValue(`comments`, JSON.stringify(comments));
                deleteLock();
                comment.comment.classList.add(`esgst-ct-comment-read`);
                comment.comment.style.opacity = `0.5`;
                setHoverOpacity(comment.comment, `1`, `0.5`);
                callback();
            });
        } else {
            if (comments) {
                if (!comments[comment.type][comment.code].comments[comment.id]) {
                    comments[comment.type][comment.code].comments[comment.id] = {};
                }
                comments[comment.type][comment.code].comments[comment.id].timestamp = comment.timestamp;
            }
            comment.comment.classList.add(`esgst-ct-comment-read`);
            comment.comment.style.opacity = `0.5`;
            setHoverOpacity(comment.comment, `1`, `0.5`);
        }
    }

    function markCtCommentUnread(comment, comments, save, callback) {
        if (save) {
            createLock(`commentLock`, 300, function(deleteLock) {
                var comments;
                comments = JSON.parse(GM_getValue(`comments`));
                if (!comments[comment.type][comment.code].comments[comment.id]) {
                    comments[comment.type][comment.code].comments[comment.id] = {};
                }
                comments[comment.type][comment.code].comments[comment.id].timestamp = 0;
                GM_setValue(`comments`, JSON.stringify(comments));
                deleteLock();
                comment.comment.classList.remove(`esgst-ct-comment-read`);
                comment.comment.style.opacity = `1`;
                setHoverOpacity(comment.comment, `1`, `1`);
                callback();
            });
        } else {
            if (comments) {
                if (!comments[comment.type][comment.code].comments[comment.id]) {
                    comments[comment.type][comment.code].comments[comment.id] = {};
                }
                comments[comment.type][comment.code].comments[comment.id].timestamp = 0;
            }
            comment.comment.classList.remove(`esgst-ct-comment-read`);
            comment.comment.style.opacity = `1`;
            setHoverOpacity(comment.comment, `1`, `1`);
        }
    }

    function addCtReadCommentButton(button, comment) {
        if (!button) {
            button = insertHtml(comment.actions, `beforeEnd`, `<div class="esgst-ct-comment-button"></div>`);
        }
        button.innerHTML = `<i class="fa fa-eye" title="Mark comment as read">`;
        button.firstElementChild.addEventListener(`click`, function() {
            button.innerHTML = `<i class="fa fa-circle-o-notch fa-spin"></i>`;
            markCtCommentRead(comment, null, true, function() {
                button.innerHTML = ``;
                addCtUnreadCommentButton(button, comment);
            });
        });
    }

    function addCtUnreadCommentButton(button, comment) {
        if (!button) {
            button = insertHtml(comment.actions, `beforeEnd`, `<div class="esgst-ct-comment-button"></div>`);
        }
        button.innerHTML = `<i class="fa fa-eye-slash" title="Mark comment as unread">`;
        button.firstElementChild.addEventListener(`click`, function() {
            button.innerHTML = `<i class="fa fa-circle-o-notch fa-spin"></i>`;
            markCtCommentUnread(comment, null, true, function() {
                button.innerHTML = ``;
                addCtReadCommentButton(button, comment);
            });
        });
    }

    function addCtCommentPanel(goToUnread, markRead, markUnread) {
        goToUnread.addEventListener(`click`, function() {
            loadCommentFeatures(document, null, true);
        });
        markRead.addEventListener(`click`, function() {
            loadCommentFeatures(document, null, false, true);
        });
        markUnread.addEventListener(`click`, function() {
            loadCommentFeatures(document, null, false, false, true);
        });
    }

    function addCtDiscussionPanels(context, dh) {
        var code, comments, count, countLink, diff, i, id, match, matches, n, read, url, key;
        if (esgst.discussionsPath || dh) {
            key = `discussions`;
        } else if (esgst.ticketsPath) {
            key = `tickets`;
        } else if (esgst.tradesPath) {
            key = `trades`;
        } else {
            key = `discussions`;
        }
        comments = JSON.parse(GM_getValue(`comments`))[key];
        matches = context.querySelectorAll(`.table__row-outer-wrap, .row_outer_wrap`);
        for (i = 0, n = matches.length; i < n; ++i) {
            match = matches[i];
            countLink = match.querySelector(`.table__column--width-small.text-center, .column_small.text_center`);
            if (countLink) {
                count = parseInt(countLink.textContent.replace(/,/g, ``));
                url = match.querySelector(`.table__column__heading, .column_flex h3 a`).getAttribute(`href`);
                if (url) {
                    code = url.match(new RegExp(`/${key.slice(0, -1)}/(.+?)(/.*)?$`));
                    if (code) {
                        code = code[1];
                        if (comments[code]) {
                            read = 0;
                            for (id in comments[code].comments) {
                                if (!id.match(/^(Count|undefined|)$/) && comments[code].comments[id].timestamp) {
                                    ++read;
                                }
                            }
                            diff = count === read ? 0 : count - read;
                        } else {
                            diff = count;
                        }
                        addCtDiscussionPanel(code, comments, match, countLink, count, diff, url, key, dh);
                    }
                }
            }
        }
    }

    function addCtDiscussionPanel(code, comments, container, context, count, diff, url, type, dh) {
        var diffContainer, goToUnread, loadingIcon, markRead, markUnread, markVisited, markUnvisited, panel;
        panel = insertHtml(context, `beforeEnd`, `
            <span>
                <span class="esgst-ct-count esgst-hidden">(+${diff})</span>
                <div class="esgst-heading-button esgst-hidden" title="Go to first unread comment of this discussion">
                    <i class="fa fa-comments-o"></i>
                </div>
                <div class="esgst-heading-button esgst-hidden" title="Mark all comments in this discussion as read">
                    <i class="fa fa-eye"></i>
                </div>
                <div class="esgst-heading-button esgst-hidden" title="Mark all comments in this discussion as unread">
                    <i class="fa fa-eye-slash"></i>
                </div>
                <div class="esgst-heading-button esgst-hidden" title="Mark this discussion as visited">
                    <i class="fa fa-check"></i>
                </div>
                <div class="esgst-heading-button esgst-hidden" title="Mark this discussion as unvisited">
                    <i class="fa fa-times"></i>
                </div>
                <i class="fa fa-circle-o-notch fa-spin esgst-hidden"></i>
            </span>
        `);
        diffContainer = panel.firstElementChild;
        goToUnread = diffContainer.nextElementSibling;
        markRead = goToUnread.nextElementSibling;
        markUnread = markRead.nextElementSibling;
        markVisited = markUnread.nextElementSibling;
        markUnvisited = markVisited.nextElementSibling;
        loadingIcon = markUnvisited.nextElementSibling;
        if (esgst.ct && (esgst.discussionsPath || dh)) {
            if (diff > 0) {
                diffContainer.classList.remove(`esgst-hidden`);
                goToUnread.classList.remove(`esgst-hidden`);
                markRead.classList.remove(`esgst-hidden`);
                if (diff !== count) {
                    markUnread.classList.remove(`esgst-hidden`);
                }
            } else {
                markUnread.classList.remove(`esgst-hidden`);
            }
        }
        if (esgst.gdttt) {
            if (!comments[code] || !comments[code].visited) {
                markVisited.classList.remove(`esgst-hidden`);
            } else {
                markUnvisited.classList.remove(`esgst-hidden`);
            }
        }
        goToUnread.addEventListener(`click`, function() {
            goToUnread.classList.add(`esgst-hidden`);
            markRead.classList.add(`esgst-hidden`);
            markUnread.classList.add(`esgst-hidden`);
            loadingIcon.classList.remove(`esgst-hidden`);
            esgst.ctUnreadFound = false;
            markCtCommentsReadUnread(true, true, false, false, false, 1, `${url}/search?page=`, function() {
                loadingIcon.classList.add(`esgst-hidden`);
                diffContainer.classList.add(`esgst-hidden`);
                goToUnread.classList.remove(`esgst-hidden`);
                markRead.classList.remove(`esgst-hidden`);
                markUnread.classList.remove(`esgst-hidden`);
            });
        });
        markRead.addEventListener(`click`, function() {
            goToUnread.classList.add(`esgst-hidden`);
            markRead.classList.add(`esgst-hidden`);
            markUnread.classList.add(`esgst-hidden`);
            loadingIcon.classList.remove(`esgst-hidden`);
            markCtCommentsReadUnread(true, false, false, true, false, 1, `${url}/search?page=`, function() {
                loadingIcon.classList.add(`esgst-hidden`);
                diffContainer.classList.add(`esgst-hidden`);
                markUnread.classList.remove(`esgst-hidden`);
            });
        });
        markUnread.addEventListener(`click`, function() {
            goToUnread.classList.add(`esgst-hidden`);
            markRead.classList.add(`esgst-hidden`);
            markUnread.classList.add(`esgst-hidden`);
            loadingIcon.classList.remove(`esgst-hidden`);
            createLock(`commentLock`, 300, function(deleteLock) {
                var key;
                comments = JSON.parse(GM_getValue(`comments`));
                for (key in comments.discussions[code].comments) {
                    comments.discussions[code].comments[key].timestamp = 0;
                }
                GM_setValue(`comments`, JSON.stringify(comments));
                deleteLock();
                loadingIcon.classList.add(`esgst-hidden`);
                diffContainer.classList.remove(`esgst-hidden`);
                diffContainer.textContent = `(+${count})`;
                goToUnread.classList.remove(`esgst-hidden`);
                markRead.classList.remove(`esgst-hidden`);
            });
        });
        markVisited.addEventListener(`click`, function() {
            goToUnread.classList.add(`esgst-hidden`);
            markRead.classList.add(`esgst-hidden`);
            markUnread.classList.add(`esgst-hidden`);
            markVisited.classList.add(`esgst-hidden`);
            loadingIcon.classList.remove(`esgst-hidden`);
            createLock(`commentLock`, 300, function(deleteLock) {
                comments = JSON.parse(GM_getValue(`comments`));
                if (!comments[type][code]) {
                    comments[type][code] = {
                        comments: {}
                    };
                }
                comments[type][code].visited = true;
                GM_setValue(`comments`, JSON.stringify(comments));
                deleteLock();
                loadingIcon.classList.add(`esgst-hidden`);
                if (esgst.ct && (esgst.discussionsPath || dh)) {
                    goToUnread.classList.remove(`esgst-hidden`);
                    markRead.classList.remove(`esgst-hidden`);
                    markUnread.classList.remove(`esgst-hidden`);
                }
                markUnvisited.classList.remove(`esgst-hidden`);
                container.classList.add(`esgst-ct-visited`);
                container.style.opacity = `0.5`;
                setHoverOpacity(container, `1`, `0.5`);
            });
        });
        markUnvisited.addEventListener(`click`, function() {
            goToUnread.classList.add(`esgst-hidden`);
            markRead.classList.add(`esgst-hidden`);
            markUnread.classList.add(`esgst-hidden`);
            markUnvisited.classList.add(`esgst-hidden`);
            loadingIcon.classList.remove(`esgst-hidden`);
            createLock(`commentLock`, 300, function(deleteLock) {
                comments = JSON.parse(GM_getValue(`comments`));
                delete comments[type][code].visited;
                GM_setValue(`comments`, JSON.stringify(comments));
                deleteLock();
                loadingIcon.classList.add(`esgst-hidden`);
                if (esgst.ct && (esgst.discussionsPath || dh)) {
                    goToUnread.classList.remove(`esgst-hidden`);
                    markRead.classList.remove(`esgst-hidden`);
                    markUnread.classList.remove(`esgst-hidden`);
                }
                markVisited.classList.remove(`esgst-hidden`);
                container.classList.remove(`esgst-ct-visited`);
                container.style.opacity = `1`;
                setHoverOpacity(container, `1`, `1`);
            });
        });
    }

    function markCtCommentsReadUnread(firstRun, goToUnread, lastPageMissing, markRead, markUnread, nextPage, url, callback) {
        request(null, true, `${url}${nextPage}`, function(response) {
            var context, lastLink, pagination;
            context = DOM.parse(response.responseText);
            loadCommentFeatures(context, null, goToUnread, markRead, markUnread, context);
            if ((goToUnread && !esgst.ctUnreadFound) || !goToUnread) {
                pagination = context.getElementsByClassName(`pagination__navigation`)[0];
                ++nextPage;
                if (pagination && ((goToUnread && ((esgst.ct_r && nextPage > 1) || (!esgst.ct_r && !pagination.lastElementChild.classList.contains(`is-selected`)))) || (!goToUnread && !pagination.lastElementChild.classList.contains(`is-selected`)))) {
                    if (goToUnread && esgst.ct_r) {
                        if (firstRun) {
                            lastLink = pagination.lastElementChild;
                            if (lastLink.textContent.match(/Last/)) {
                                nextPage = parseInt(lastLink.getAttribute(`data-page-number`));
                            } else {
                                nextPage = 999999999;
                                lastPageMissing = true;
                            }
                        } else {
                            if (lastPageMissing) {
                                nextPage = parseInt(pagination.lastElementChild.getAttribute(`data-page-number`)) - 1;
                            } else {
                                nextPage -= 2;
                            }
                        }
                        if (nextPage > 1) {
                            window.setTimeout(markCtCommentsReadUnread, 0, false, goToUnread, lastPageMissing, markRead, markUnread, nextPage, url, callback);
                        } else {
                            callback();
                        }
                    } else {
                        window.setTimeout(markCtCommentsReadUnread, 0, false, goToUnread, lastPageMissing, markRead, markUnread, nextPage, url, callback);
                    }
                } else {
                    callback();
                }
            } else {
                callback();
            }
        });
    }

    /* [CH] Comment History */

    function saveChComment(id, timestamp) {
        createLock(`${esgst.name}CommentHistoryLock`, 300, function (deleteLock) {
            var comments, key;
            key = `${esgst.name}CommentHistory`;
            comments = JSON.parse(GM_getValue(key, `[]`));
            comments.unshift({
                id: id,
                timestamp: timestamp
            });
            GM_setValue(key, JSON.stringify(comments));
            deleteLock();
        });
    }

    function getChComments(comments, i, n, popup, callback) {
        var comment, id;
        if (i < n) {
            comment = comments[i];
            if (comment) {
                id = comment.id;
                request(null, false, `https://${window.location.hostname}/go/comment/${id}`, function (response) {
                    var html, parent, responseHtml;
                    responseHtml = DOM.parse(response.responseText);
                    comment = responseHtml.getElementById(id);
                    if (esgst.sg) {
                        comment = comment.closest(`.comment`);
                        comment.firstElementChild.classList.remove(`comment__parent`);
                        comment.firstElementChild.classList.add(`comment__child`);
                    }
                    comment.lastElementChild.remove();
                    parent = comment.parentElement.closest(`.comment, .comment_outer`);
                    if (parent) {
                        parent.lastElementChild.remove();
                        parent.insertAdjacentHTML(`beforeEnd`, `
                            <div class="comment__children comment_children">${comment.outerHTML}</div>
                        `);
                        html = parent.outerHTML;
                    } else {
                        if (esgst.st) {
                            comment.getElementsByClassName(`action_list`)[0].firstElementChild.insertAdjacentHTML(`afterEnd`, `
                                <a href="${response.finalUrl}">${responseHtml.title}</a>
                            `);
                        }
                        html = esgst.sg ? `
                            <div class="comments__entity">
                                <p class="comments__entity__name">
                                    <a href="${response.finalUrl}">${responseHtml.title}</a>
                                </p>
                            </div>` : ``;
                        html += `<div class="comment__children comment_children">${comment.outerHTML}</div>`;
                    }
                    popup.commentHistory.insertAdjacentHTML(`beforeEnd`, `<div class="comment comments comment_outer">${html}</div>`);
                    loadEndlessFeatures(popup.commentHistory.lastElementChild);
                    popup.reposition();
                    window.setTimeout(getChComments, 0, comments, ++i, n, popup, callback);
                });
            } else {
                callback(i + 1);
            }
        } else {
            callback(i);
        }
    }

    /* [UH] Username History */

    function loadUh() {
        if (esgst.userPath || esgst.ap) {
            esgst.profileFeatures.push(addUhContainer);
        }
    }

    function addUhContainer(profile) {
        var button, box, container, list;
        container = insertHtml(profile.heading, `beforeEnd`, `
            <div class="esgst-uh-container">
                <a class="esgst-uh-button" title="View username history.">
                    <i class="fa fa-caret-down"></i>
                </a>
                <div class="esgst-uh-box esgst-hidden">
                    <div class="esgst-uh-title">
                        <span>Username History</span>
                        <a href="https://goo.gl/C2wjUh" target="_blank" title="Expand the database.">
                            <i class="fa fa-expand"></i>
                        </a>
                    </div>
                    <ul class="esgst-uh-list"></ul>
                </div>
            </div>
        `);
        button = container.firstElementChild;
        box = button.nextElementSibling;
        list = box.lastElementChild;
        button.addEventListener(`click`, toggleUhBox.bind(null, box, profile, list));
        document.addEventListener(`click`, closeUhBox.bind(null, box, container));
    }

    function toggleUhBox(box, profile, list) {
        var progress, url;
        box.classList.toggle(`esgst-hidden`);
        if (!list.innerHTML) {
            progress = insertHtml(list, `beforeEnd`, `
                <div>
                    <i class="fa fa-circle-o-notch fa-spin"></i>
                    <span>Loading username history...</span>
                </div>
            `);
            url = `https://script.google.com/macros/s/AKfycbzvOuHG913mRIXOsqHIeAuQUkLYyxTHOZim5n8iP-k80iza6g0/exec?Action=1&SteamID64=${profile.steamId}&Username=${profile.username}`;
            request(null, false, url, loadUhList.bind(null, list, progress));
        }
    }

    function loadUhList(list, progress, response) {
        var responseJson, usernames;
        responseJson = JSON.parse(response.responseText);
        usernames = responseJson.Usernames.join(`</li><li>`);
        progress.remove();
        list.innerHTML = `<li>${usernames}</li>`;
    }

    function closeUhBox(box, container, event) {
        if (!box.classList.contains(`esgst-hidden`) && !container.contains(event.target)) {
            box.classList.add(`esgst-hidden`);
        }
    }

    /* [UN] User Notes */

    function loadUn() {
        if (esgst.userPath || esgst.ap) {
            esgst.profileFeatures.push(addUnButton);
        }
    }

    function addUnButton(profile, savedUser) {
        var blacklistButton, position, whitelistButton;
        if (esgst.sg) {
            position = `beforeEnd`;
            if (esgst.un_p) {
                whitelistButton = profile.steamButtonContainer.getElementsByClassName(`sidebar__shortcut__whitelist`)[0];
                if (whitelistButton) {
                    whitelistButton.addEventListener(`click`, openUnPopup.bind(null, profile));
                }
                blacklistButton = profile.steamButtonContainer.getElementsByClassName(`sidebar__shortcut__blacklist`)[0];
                if (blacklistButton) {
                    blacklistButton.addEventListener(`click`, openUnPopup.bind(null, profile));
                }
            }
        } else {
            position = `afterBegin`;
        }
        profile.unButton = insertHtml(profile.heading, position, `
            <a class="esgst-un-button" title="Edit user notes.">
                <i class="fa"></i>
            </a>
        `);
        profile.unIcon = profile.unButton.firstElementChild;
        if (savedUser && savedUser.notes) {
            profile.unIcon.classList.add(`fa-sticky-note`);
        } else {
            profile.unIcon.classList.add(`fa-sticky-note-o`);
        }
        profile.unButton.addEventListener(`click`, openUnPopup.bind(null, profile));
    }

    function openUnPopup(profile) {
        var set;
        profile.unPopup = createPopup_v6(`fa-sticky-note`, `Edit user notes for <span>${profile.name}</span>:`, true);
        profile.unTextArea = insertHtml(profile.unPopup.description, `beforeEnd`, `
            <textarea></textarea>
        `);
        set = createButtonSet(`green`, `grey`, `fa-check`, `fa-circle-o-notch fa-spin`, `Save`, `Saving...`, saveUnNotes.bind(null, profile));
        profile.unPopup.description.appendChild(set.set);
        profile.unPopup.open(getUnNotes.bind(null, profile));
    }

    function saveUnNotes(profile, resetButton) {
        var notes, user;
        notes = profile.unTextArea.value.trim();
        user = {
            steamId: profile.steamId,
            id: profile.id,
            username: profile.username,
            values: {
                notes: notes
            }
        };
        if (notes) {
            profile.unIcon.classList.remove(`fa-sticky-note-o`);
            profile.unIcon.classList.add(`fa-sticky-note`);
        } else {
            profile.unIcon.classList.remove(`fa-sticky-note`);
            profile.unIcon.classList.add(`fa-sticky-note-o`);
        }
        saveUser(null, null, user, closeUnPopup.bind(null, profile, resetButton));
    }

    function closeUnPopup(profile, resetButton) {
        resetButton();
        profile.unPopup.close();
    }

    function getUnNotes(profile) {
        var notes, savedUser, savedUsers;
        profile.unTextArea.focus();
        savedUsers = JSON.parse(GM_getValue(`users`));
        savedUser = savedUsers.users[profile.steamId];
        if (savedUser) {
            notes = savedUser.notes;
            if (notes) {
                profile.unTextArea.value = notes;
            }
        }
    }

    /* [UF] User Filters */

    function loadUf() {
        if (esgst.userPath || esgst.ap) {
            esgst.profileFeatures.push(addUfButton);
        }
    }

    function addUfButton(profile, savedUser) {
        var uf;
        if (profile.username !== esgst.username) {
            profile.ufButton = insertHtml(profile.heading, `beforeEnd`, `
                <a class="esgst-uf-button" title="Edit user filters.">
                    <i class="fa"></i>
                </a>
            `);
            profile.ufIcon = profile.ufButton.firstElementChild;
            if (savedUser) {
                profile.ufValues = savedUser.uf;
                if (profile.ufValues && (profile.ufValues.giveaways || profile.ufValues.discussions || profile.ufValues.posts)) {
                    profile.ufIcon.classList.add(`fa-eye-slash`);
                } else {
                    profile.ufIcon.classList.add(`fa-eye`);
                    profile.ufValues = {
                        giveaways: false,
                        discussions: false,
                        posts: false
                    };
                }
            } else {
                profile.ufIcon.classList.add(`fa-eye`);
                profile.ufValues = {
                    giveaways: false,
                    discussions: false,
                    posts: false
                };
            }
            profile.ufButton.addEventListener(`click`, openUfPopup.bind(null, profile));
        }
    }

    function openUfPopup(profile) {
        var resetSet, saveSet;
        profile.ufPopup = createPopup_v6(`fa-eye`, `Apply user filters for <span>${profile.name}</span>:`, true);
        profile.ufOptions = insertHtml(profile.ufPopup.description, `beforeEnd`, `<div></div>`);
        profile.ufGiveawaysOption = createToggleSwitch(profile.ufOptions, null, false, `Filter this user's giveaways.`, false, false, `Hides the user's giveaways from the main pages.`, profile.ufValues.giveaways);
        profile.ufDiscussionsOption = createToggleSwitch(profile.ufOptions, null, false, `Filter this user's discussions.`, false, false, `Hides the user's discussions from the main pages.`, profile.ufValues.discussions);
        profile.ufPostsOption = createToggleSwitch(profile.ufOptions, null, false, `Filter this user's posts.`, false, false, `Hides the user's posts everywhere.`, profile.ufValues.posts);
        saveSet = createButtonSet(`green`, `grey`, `fa-check`, `fa-circle-o-notch fa-spin`, `Save Settings`, `Saving...`, saveUfSettings.bind(null, profile, false));
        resetSet = createButtonSet(`green`, `grey`, `fa-rotate-left`, `fa-circle-o-notch fa-spin`, `Reset Settings`, `Resetting...`, saveUfSettings.bind(null, profile, true));
        saveSet.dependencies.push(resetSet.set);
        resetSet.dependencies.push(saveSet.set);
        profile.ufPopup.description.appendChild(saveSet.set);
        profile.ufPopup.description.appendChild(resetSet.set);
        profile.ufPopup.open();
    }

    function saveUfSettings(profile, reset, resetButton) {
        var uf, user;
        if (reset) {
            uf = null;
            profile.ufGiveawaysOption.input.checked = false;
            profile.ufDiscussionsOption.input.checked = false;
            profile.ufPostsOption.input.checked = false;
            profile.ufValues = {
                giveaways: false,
                discussions: false,
                posts: false
            };
        } else {
            profile.ufValues = {
                giveaways: profile.ufGiveawaysOption.input.checked,
                discussions: profile.ufDiscussionsOption.input.checked,
                posts: profile.ufPostsOption.input.checked
            };
        }
        user = {
            steamId: profile.steamId,
            id: profile.id,
            username: profile.username,
            values: {
                uf: profile.ufValues
            }
        };
        if (profile.ufValues && (profile.ufValues.giveaways || profile.ufValues.discussions || profile.ufValues.posts)) {
            profile.ufIcon.classList.remove(`fa-eye`);
            profile.ufIcon.classList.add(`fa-eye-slash`);
        } else {
            profile.ufIcon.classList.remove(`fa-eye-slash`);
            profile.ufIcon.classList.add(`fa-eye`);
        }
        saveUser(null, null, user, closeUfPopup.bind(null, profile, resetButton));
    }

    function closeUfPopup(profile, resetButton) {
        resetButton();
        profile.ufPopup.close();
    }

    function updateUfCount(context, extraCount) {
        var count;
        count = context.getElementsByClassName(`esgst-uf-count`)[0];
        context = context.firstElementChild;
        if (!extraCount) {
            extraCount = 0;
        }
        if (count) {
            count.innerHTML = `
                (<strong>${parseInt(count.firstElementChild.textContent) + 1 + extraCount}</strong> filtered by User Filters)
            `;
        } else {
            context.insertAdjacentHTML(`beforeEnd`, `
                <span class="esgst-uf-count">
                    (<strong>${1 + extraCount}</strong> filtered by User Filters)
                </span>
            `);
        }
    }

    /* [SGC] Shared Groups Checker */

    function loadSgc() {
        if (esgst.userPath || esgst.ap) {
            esgst.profileFeatures.push(addSgcButton);
        }
    }

    function addSgcButton(profile) {
        if (profile.username !== esgst.username) {
            profile.sgcButton = insertHtml(profile.heading, `beforeEnd`, `
                <a class="esgst-sgc-button" title="Check shared groups.">
                    <i class="fa fa-users"></i>
                </a>
            `);
            profile.sgcButton.addEventListener(`click`, openSgcPopup.bind(null, profile));
        }
    }

    function openSgcPopup(profile) {
        if (profile.sgcPopup) {
            profile.sgcPopup.open();
        } else {
            profile.sgcPopup = createPopup_v6(`fa-users`, `Shared Groups`);
            profile.sgcProgress = insertHtml(profile.sgcPopup.description, `beforeEnd`, `
                <div>
                    <i class="fa fa-circle-o-notch fa-spin"></i>
                    <span>Checking shared groups...</span>
                </div>
            `);
            profile.sgcResults = insertHtml(profile.sgcPopup.description, `beforeEnd`, `
                <div class="esgst-text-left table esgst-hidden">
                    <div class="table__heading">
					    <div class="table__column--width-fill">Group</div>
					</div>
                    <div class="table__rows"></div>
                </div>
            `);
            profile.sgcPopup.open();
            request(null, false, `http://www.steamcommunity.com/profiles/${profile.steamId}/groups`, loadSgcGroups.bind(null, profile));
        }
    }

    function loadSgcGroups(profile, response) {
        var avatar, communityName, element, elements, groups, i, info, link, n, responseHtml, savedGroup, savedGroups;
        groups = [];
        savedGroups = JSON.parse(GM_getValue(`groups`, `{}`));
        responseHtml = DOM.parse(response.responseText);
        elements = responseHtml.getElementsByClassName(`groupBlock`);
        for (i = 0, n = elements.length; i < n; ++i) {
            element = elements[i];
            info = element.getElementsByClassName(`playerAvatar`)[0];
            link = info.firstElementChild;
            communityName = link.getAttribute(`href`).match(/\/groups\/(.+)/)[1];
            avatar = link.firstElementChild.getAttribute(`src`);
            savedGroup = savedGroups[communityName];
            if (savedGroup && savedGroup.member) {
                groups.push({
                    name: savedGroup.name,
                    html: `
                        <div class="table__row-outer-wrap">
                            <div class="table__row-inner-wrap">
                                <div>
                                    <a class="table_image_avatar" href="/group/${savedGroup.code}/" style="background-image:url(${avatar})"></a>
                                </div>
                                <div class="table__column--width-fill">
                                    <a class="table__column__heading" href="/group/${savedGroup.code}/"></a>
                                </div>
                            </div>
                        </div>
                    `
                });
            }
        }
        n = groups.length;
        if (n > 0) {
            groups = sortArrayByKey(groups, `name`);
            profile.sgcResults.classList.remove(`esgst-hidden`);
            for (i = 0; i < n; ++i) {
                insertHtml(profile.sgcResults.lastElementChild, `beforeEnd`, groups[i].html).getElementsByClassName(`table__column__heading`)[0].textContent = groups[i].name;
            }
            profile.sgcProgress.remove();
            profile.sgcProgress = null;
            loadEndlessFeatures(profile.sgcResults);
        } else {
            profile.sgcProgress.innerHTML = `
                <div>No shared groups found.</div>
            `;
        }
        profile.sgcPopup.reposition();
    }

    /* [RWSCVL] Real Won/Sent CL Link */

    function loadRwscvl() {
        if (esgst.userPath || esgst.ap) {
            esgst.profileFeatures.push(addRwscvlLinks);
        }
    }

    function addRwscvlLinks(profile, savedUser) {
        var sentUrl, wonUrl;
        wonUrl = `http://www.sgtools.info/won/${profile.username}`;
        sentUrl = `http://www.sgtools.info/sent/${profile.username}`;
        if (esgst.rwscvl_r) {
            wonUrl += `/newestfirst`;
            sentUrl += `/newestfirst`;
        }
        profile.wonRowLeft.innerHTML = `
            <a class="esgst-rwscvl-link" href="${wonUrl}" target="_blank">Gifts Won</a>
        `;
        profile.sentRowLeft.innerHTML = `
            <a class="esgst-rwscvl-link" href="${sentUrl}" target="_blank">Gifts Sent</a>
        `;
        if (esgst.rwscvl_a) {
            loadRwscvlCV(profile, savedUser, sentUrl, wonUrl);
        }
    }

    function loadRwscvlCV(profile, savedUser, sentUrl, wonUrl) {
        var rwscvl, sentCV, user, wonCV;
        wonCV = insertHtml(profile.wonRowRight, `beforeEnd`, `
            <span>
                <i class="fa fa-circle-o-notch fa-spin"></i>
            </span>
        `);
        sentCV = insertHtml(profile.sentRowRight, `beforeEnd`, `
            <span>
                <i class="fa fa-circle-o-notch fa-spin"></i>
            </span>
        `);
        if (savedUser) {
            rwscvl = savedUser.rwscvl;
        }
        if (!rwscvl) {
            rwscvl = {
                lastCheck: 0,
                sent: 0,
                won: 0
            };
        }
        if (Date.now() - rwscvl.lastCheck > 604800000) {
            request(null, false, wonUrl, function (response) {
                rwscvl.won = DOM.parse(response.responseText).getElementById(`data`).textContent.replace(/\s\$/, ``);
                request(null, false, sentUrl, function (response) {
                    rwscvl.sent = DOM.parse(response.responseText).getElementById(`data`).textContent.replace(/\s\$/, ``);
                    rwscvl.lastCheck = Date.now();
                    user = {
                        steamId: profile.steamId,
                        id: profile.id,
                        username: profile.username,
                        values: {
                            rwscvl: rwscvl
                        }
                    };
                    wonCV.innerHTML = `(\$${rwscvl.won} Real CV)`;
                    sentCV.innerHTML = `(\$${rwscvl.sent} Real CV)`;
                    saveUser(null, null, user);
                });
            });
        } else {
            wonCV.innerHTML = `(\$${rwscvl.won} Real CV)`;
            sentCV.innerHTML = `(\$${rwscvl.sent} Real CV)`;
        }
    }

    /* [UGD] User Giveaways Data */

    function loadUgd() {
        if (esgst.userPath || esgst.ap) {
            esgst.profileFeatures.push(addUgdButtons);
        }
    }

    function addUgdButtons(profile) {
        var user = {
            steamId: profile.steamId,
            id: profile.id,
            username: profile.username
        };
        addUgdButton(profile.wonRowLeft, `won`, user);
        addUgdButton(profile.sentRowLeft, `sent`, user);
    }

    function addUgdButton(Context, Key, user) {
        var UGD, UGDButton, Popup;
        UGD = {
            Key: Key
        };
        Context.insertAdjacentHTML(
            "beforeEnd",
            " <span class=\"UGDButton\" title=\"Get " + UGD.Key + " giveaways data\">" +
            "    <i class=\"fa fa-bar-chart\"></i>" +
            "</span>"
        );
        UGDButton = Context.lastElementChild;
        Popup = createPopup();
        Popup.Popup.classList.add("rhPopupLarge");
        Popup.Icon.classList.add("fa-bar-chart");
        Popup.Title.textContent = "Get " + user.username + "'s " + UGD.Key + " giveaways data:";
        createOptions(Popup.Options, UGD, [{
            Check: function () {
                return true;
            },
            Description: "Clear cache.",
            Title: "If enabled, the cache will be cleared and all giveaways will be retrieved again (slower).",
            Name: "ClearCache",
            Key: "CC",
            ID: "UGD_CC"
        }]);
        createButton(Popup.Button, "fa-bar-chart", "Get Data", "fa-times-circle", "Cancel", function (Callback) {
            UGD.Canceled = false;
            UGDButton.classList.add("esgst-busy");
            var savedUser = getUser(null, user), ugd;
            if (savedUser) {
                ugd = savedUser.ugd;
            }
                    if (!ugd) {
                        ugd = {
                            sent: {
                                apps: {},
                                subs: {}
                            },
                            won: {
                                apps: {},
                                subs: {}
                            },
                            sentTimestamp: 0,
                            wonTimestamp: 0
                        };
                    }
                    if (UGD.CC.checked) {
                        ugd[UGD.Key] = null;
                    }
                        if (!ugd.sent) {
                            ugd.sent = {
                                apps: {},
                                subs: {}
                            };
                            ugd.sentTimestamp = 0;
                        }
                        if (!ugd.won) {
                            ugd.won = {
                                apps: {},
                                subs: {}
                            };
                            ugd.wonTimestamp = 0;
                        }
                    var Match = window.location.pathname.match(new RegExp("^\/user\/" + user.username + ((UGD.Key == "won") ? "/giveaways/won" : "")));
                    var CurrentPage = window.location.href.match(/page=(\d+)/);
                    CurrentPage = Match ? (CurrentPage ? parseInt(CurrentPage[1]) : 1) : 0;
                    getUGDGiveaways(UGD, ugd, 1, CurrentPage, Match, "/user/" + user.username + ((UGD.Key == "won") ? "/giveaways/won" : "") + "/search?page=", function (ugd) {
                        user.values = {
                            ugd: ugd
                        };
                        saveUser(null, null, user, function () {
                            var Giveaways, Types, TypesTotal, Frequencies, Total, LevelsTotal;
                            UGDButton.classList.remove("esgst-busy");
                            Giveaways = ugd[UGD.Key];
                                Types = {
                                    Everyone: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                    Invite: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                    Group: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                    Whitelist: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                    Group_Whitelist: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                    Region: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                    Region_Invite: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                    Region_Group: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                    Region_Whitelist: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                    Region_Group_Whitelist: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
                                };
                                TypesTotal = {
                                    Everyone: 0,
                                    Invite: 0,
                                    Group: 0,
                                    Whitelist: 0,
                                    Group_Whitelist: 0,
                                    Region: 0,
                                    Region_Invite: 0,
                                    Region_Group: 0,
                                    Region_Whitelist: 0,
                                    Region_Group_Whitelist: 0
                                };
                                LevelsTotal = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
                                Total = 0;
                                Frequencies = {};
                            countUgdGiveaways(Frequencies, Giveaways.apps, LevelsTotal, Total, UGD.Key === `won` ? `creators` : `apps`, Types, TypesTotal, UGD, function(LevelsTotal, Total) {
                                countUgdGiveaways(Frequencies, Giveaways.subs, LevelsTotal, Total, UGD.Key === `won` ? `creators` : `subs`, Types, TypesTotal, UGD, function(LevelsTotal, Total) {
                                    var HTML, Type, I, N, Value, Ordered;
                                    HTML =
                                    "<table class=\"UGDData\">" +
                                    "    <tr>" +
                                    "        <th>Type</th>" +
                                    "        <th>Level 0</th>" +
                                    "        <th>Level 1</th>" +
                                    "        <th>Level 2</th>" +
                                    "        <th>Level 3</th>" +
                                    "        <th>Level 4</th>" +
                                    "        <th>Level 5</th>" +
                                    "        <th>Level 6</th>" +
                                    "        <th>Level 7</th>" +
                                    "        <th>Level 8</th>" +
                                    "        <th>Level 9</th>" +
                                    "        <th>Level 10</th>" +
                                    "        <th>Total</th>" +
                                    "    </tr>";
                                for (Type in Types) {
                                    HTML +=
                                        "<tr>" +
                                        "    <td>" + Type.replace(/_/g, " + ") + "</td>";
                                    for (I = 0; I <= 10; ++I) {
                                        Value = Types[Type][I];
                                        HTML +=
                                            "<td" + (Value ? "" : " class=\"is-faded\"") + ">" + Value + "</td>";
                                    }
                                    Value = Math.round(TypesTotal[Type] / Total * 10000) / 100;
                                    HTML +=
                                        "    <td" + (Value ? "" : " class=\"is-faded\"") + ">" + TypesTotal[Type] + " (" + Value + "%)</td>" +
                                        "</tr>";
                                }
                                HTML +=
                                    "    <tr>" +
                                    "        <td>Total</td>";
                                for (I = 0; I <= 10; ++I) {
                                    Value = Math.round(LevelsTotal[I] / Total * 10000) / 100;
                                    HTML +=
                                        "    <td" + (Value ? "" : " class=\"is-faded\"") + ">" + LevelsTotal[I] + " (" + Value + "%)</td>";
                                }
                                HTML +=
                                    "        <td" + (Total ? "" : " class=\"is-faded\"") + ">" + Total + "</td>" +
                                    "    </tr>" +
                                    "</table>";
                                Ordered = [];
                                for (Key in Frequencies.apps) {
                                    for (I = 0, N = Ordered.length; (I < N) && (Frequencies.apps[Key].frequency <= Ordered[I].frequency); ++I);
                                    Ordered.splice(I, 0, Frequencies.apps[Key]);
                                }
                                for (Key in Frequencies.subs) {
                                    for (I = 0, N = Ordered.length; (I < N) && (Frequencies.subs[Key].frequency <= Ordered[I].frequency); ++I);
                                    Ordered.splice(I, 0, Frequencies.subs[Key]);
                                }
                                for (Key in Frequencies.creators) {
                                    for (I = 0, N = Ordered.length; (I < N) && (Frequencies.creators[Key].frequency <= Ordered[I].frequency); ++I);
                                    Ordered.splice(I, 0, Frequencies.creators[Key]);
                                }
                                HTML +=
                                    "<div class=\"rhBold\">" + ((UGD.Key == "sent") ? "Most given away:" : "Most won from:") + "</div>" +
                                    "<ul>";
                                for (Key in Ordered) {
                                    HTML +=
                                        "<li>" + Ordered[Key].name + " - <span class=\"rhBold\">" + Ordered[Key].frequency + "</span></li>";
                                }
                                HTML +=
                                    "</ul>";
                                Popup.Results.innerHTML = HTML;
                                UGD.Progress.innerHTML = ``;
                                UGD.Popup.reposition();
                                Callback();
                            });
                        });
                    });
                });
    }, function () {
            clearInterval(UGD.Request);
            clearInterval(UGD.Save);
            UGD.Canceled = true;
            setTimeout(function () {
                UGD.Progress.innerHTML = UGD.OverallProgress = "";
            }, 500);
            UGDButton.classList.remove("esgst-busy");
        });
        UGD.Progress = Popup.Progress;
        UGD.OverallProgress = Popup.OverallProgress;
        UGDButton.addEventListener("click", function () {
            UGD.Popup = Popup.popUp();
        });
    }

    function countUgdGiveaways(Frequencies, Giveaways, LevelsTotal, Total, type, Types, TypesTotal, UGD, Callback) {
        var Key, I, N, Giveaway, Private, Group, Whitelist, Region, Level, Copies;
                                for (Key in Giveaways) {
                                    for (I = 0, N = Giveaways[Key].length; I < N; ++I) {
                                        Giveaway = Giveaways[Key][I];
                                        if (Giveaway.entries > 0) {
                                            Private = Giveaway.inviteOnly;
                                            Group = Giveaway.group;
                                            Whitelist = Giveaway.whitelist;
                                            Region = Giveaway.regionRestricted;
                                            Level = Giveaway.level;
                                            Copies = (UGD.Key == "sent") ? Giveaway.copies : 1;
                                            if (Private) {
                                                if (Region) {
                                                    Types.Region_Invite[Level] += Copies;
                                                    TypesTotal.Region_Invite += Copies;
                                                } else {
                                                    Types.Invite[Level] += Copies;
                                                    TypesTotal.Invite += Copies;
                                                }
                                            } else if (Group) {
                                                if (Region) {
                                                    Types.Region_Group[Level] += Copies;
                                                    TypesTotal.Region_Group += Copies;
                                                } else if (Whitelist) {
                                                    if (Region) {
                                                        Types.Region_Group_Whitelist[Level] += Copies;
                                                        TypesTotal.Region_Group_Whitelist += Copies;
                                                    } else {
                                                        Types.Group_Whitelist[Level] += Copies;
                                                        TypesTotal.Group_Whitelist += Copies;
                                                    }
                                                } else {
                                                    Types.Group[Level] += Copies;
                                                    TypesTotal.Group += Copies;
                                                }
                                            } else if (Whitelist) {
                                                if (Region) {
                                                    Types.Region_Whitelist[Level] += Copies;
                                                    TypesTotal.Region_Whitelist += Copies;
                                                } else {
                                                    Types.Whitelist[Level] += Copies;
                                                    TypesTotal.Whitelist += Copies;
                                                }
                                            } else if (Region) {
                                                Types.Region[Level] += Copies;
                                                TypesTotal.Region += Copies;
                                            } else {
                                                Types.Everyone[Level] += Copies;
                                                TypesTotal.Everyone += Copies;
                                            }
                                            LevelsTotal[Level] += Copies;
                                            Total += Copies;
                                            if (UGD.Key == "sent") {
                                                if (!Frequencies[type]) {
                                                    Frequencies[type] = {};
                                                }
                                                if (!Frequencies[type][Key]) {
                                                    Frequencies[type][Key] = {
                                                        name: Giveaway.gameName,
                                                        frequency: 0
                                                    };
                                                }
                                                Frequencies[type][Key].frequency += Copies;
                                            } else {
                                                if (!Frequencies[type]) {
                                                    Frequencies[type] = {};
                                                }
                                                if (!Frequencies[type][Giveaway.creator]) {
                                                    Frequencies[type][Giveaway.creator] = {
                                                        name: Giveaway.creator,
                                                        frequency: 0
                                                    };
                                                }
                                                ++Frequencies[type][Giveaway.creator].frequency;
                                            }
                                        }
                                    }
                                }
        Callback(LevelsTotal, Total);
    }

    function getUGDGiveaways(UGD, ugd, NextPage, CurrentPage, CurrentContext, URL, Callback, Context) {
        var Giveaways, I, NumGiveaways, Giveaway, Found, Pagination;
        if (Context) {
            Giveaways = Context.getElementsByClassName("giveaway__row-outer-wrap");
            for (I = 0, NumGiveaways = Giveaways.length; I < NumGiveaways; ++I) {
                Giveaway = getGiveawayInfo(Giveaways[I], document, null, null, true).data;
                if (Giveaway.endTime < (new Date().getTime())) {
                    if (!UGD.Timestamp) {
                        UGD.Timestamp = Giveaway.endTime;
                    }
                    if (Giveaway.endTime > ugd[UGD.Key + "Timestamp"]) {
                        if (Giveaway.gameSteamId) {
                            if (!ugd[UGD.Key][Giveaway.gameType][Giveaway.gameSteamId]) {
                                ugd[UGD.Key][Giveaway.gameType][Giveaway.gameSteamId] = [];
                            }
                            ugd[UGD.Key][Giveaway.gameType][Giveaway.gameSteamId].push(Giveaway);
                        }
                    } else {
                        Found = true;
                        break;
                    }
                }
            }
            Pagination = Context.getElementsByClassName("pagination__navigation")[0];
            if (!Found && Pagination && !Pagination.lastElementChild.classList.contains("is-selected")) {
                window.setTimeout(getUGDGiveaways, 0, UGD, ugd, NextPage, CurrentPage, CurrentContext, URL, Callback);
            } else {
                ugd[UGD.Key + "Timestamp"] = UGD.Timestamp;
                Callback(ugd);
            }
        } else if (!UGD.Canceled) {
            UGD.Progress.innerHTML =
                "<i class=\"fa fa-circle-o-notch fa-spin\"></i> " +
                "<span>Retrieving giveaways (page " + NextPage + ")...</span>";
            queueRequest(UGD, null, URL + NextPage, function (Response) {
                window.setTimeout(getUGDGiveaways, 0, UGD, ugd, ++NextPage, CurrentPage, CurrentContext, URL, Callback, DOM.parse(Response.responseText));
            });
        }
    }

    /* [NAMWC] Not Activated/Multiple Wins Checker */

    function loadNamwc() {
            if (esgst.sg) {
                if (esgst.userPath || esgst.ap) {
                    esgst.profileFeatures.push(addNamwcProfileButton);
                }
            }
            if (esgst.namwc_h) {
                esgst.userFeatures.push(highlightNamwcUsers);
            }
    }

    function addNamwcProfileButton(profile) {
        setNAMWCPopup(insertHtml(profile.wonRowLeft, `beforeEnd`, `
            <span class="esgst-namwc-button">
                <i class="fa fa-question-circle" title="Check for not activated/multiple wins."></i>
            </span>
        `), {
            SteamID64: profile.steamId,
            ID: profile.id,
            Username: profile.username
        });
    }

    function setNAMWCPopup(NAMWCButton, User, Mnu) {
        var Popup, NAMWC;
        Popup = createPopup();
        Popup.Popup.classList.add("rhPopupLarge");
        Popup.Icon.classList.add(!Mnu ? "fa-question" : "fa-cog");
        NAMWC = {
            User: (User ? User : null)
        };
        Popup.Title.textContent = (!Mnu ? "Check for " + (NAMWC.User ? (NAMWC.User.Username + "'s ") : "") + "not activated / multiple wins" :
            "Manage Not Activated / Multiple Wins Checker caches") + ":";
        if (!Mnu) {
            createOptions(Popup.Options, NAMWC, [{
                Check: function () {
                    return true;
                },
                Description: "Only check for not activated wins.",
                Title: "If enabled, multiple wins will not be checked (faster).",
                Name: "NotActivatedCheck",
                Key: "NAC",
                ID: "NAMWC_NAC",
                Dependency: "MultipleCheck"
            }, {
                Check: function () {
                    return true;
                },
                Description: "Only check for multiple wins.",
                Title: "If enabled, not activated wins will not be checked (faster).",
                Name: "MultipleCheck",
                Key: "MC",
                ID: "NAMWC_MC",
                Dependency: "NotActivatedCheck"
            }]);
            Popup.Options.insertAdjacentHTML("afterEnd", createDescription("If an user is highlighted, that means they have been either checked for the first time or updated."));
            createButton(Popup.Button, "fa-question-circle", "Check", "fa-times-circle", "Cancel", function (Callback) {
                NAMWC.ShowResults = false;
                NAMWCButton.classList.add("esgst-busy");
                setNAMWCCheck(NAMWC, function () {
                    NAMWCButton.classList.remove("esgst-busy");
                    Callback();
                });
            }, function () {
                clearInterval(NAMWC.Request);
                clearInterval(NAMWC.Save);
                NAMWC.Canceled = true;
                setTimeout(function () {
                    NAMWC.Progress.innerHTML = "";
                }, 500);
                NAMWCButton.classList.remove("esgst-busy");
            });
        }
        NAMWC.Progress = Popup.Progress;
        NAMWC.OverallProgress = Popup.OverallProgress;
        createResults(Popup.Results, NAMWC, [{
            Icon: "<i class=\"fa fa-check-circle giveaway__column--positive\"></i> ",
            Description: "Users with 0 not activated wins",
            Key: "activated"
        }, {
            Icon: "<i class=\"fa fa-check-circle giveaway__column--positive\"></i> ",
            Description: "Users with 0 multiple wins",
            Key: "notMultiple"
        }, {
            Icon: "<i class=\"fa fa-times-circle giveaway__column--negative\"></i> ",
            Description: "Users with not activated wins",
            Key: "notActivated"
        }, {
            Icon: "<i class=\"fa fa-times-circle giveaway__column--negative\"></i> ",
            Description: "Users with multiple wins",
            Key: "multiple"
        }, {
            Icon: "<i class=\"fa fa-question-circle\"></i> ",
            Description: "Users who cannot be checked for not activated wins either because they have a private profile or SteamCommunity is down",
            Key: "unknown"
        }]);
        NAMWCButton.addEventListener("click", function () {
            NAMWC.Popup = Popup.popUp(function () {
                if (Mnu) {
                    NAMWC.ShowResults = true;
                    setNAMWCCheck(NAMWC);
                }
            });
        });
    }

    function setNAMWCCheck(NAMWC, Callback) {
        var SavedUsers, I, N, Username;
        NAMWC.Progress.innerHTML = NAMWC.OverallProgress.innerHTML = "";
        NAMWC.activated.classList.add("rhHidden");
        NAMWC.notMultiple.classList.add("rhHidden");
        NAMWC.notActivated.classList.add("rhHidden");
        NAMWC.multiple.classList.add("rhHidden");
        NAMWC.unknown.classList.add("rhHidden");
        NAMWC.activatedCount.textContent = NAMWC.notMultipleCount.textContent = NAMWC.notActivatedCount.textContent = NAMWC.multipleCount.textContent = NAMWC.unknownCount.textContent = "0";
        NAMWC.activatedUsers.innerHTML = NAMWC.notMultipleUsers.textContent = NAMWC.notActivatedUsers.innerHTML = NAMWC.multipleUsers.innerHTML = NAMWC.unknownUsers.innerHTML = "";
        NAMWC.Popup.reposition();
        NAMWC.Users = [];
        NAMWC.Canceled = false;
        if (NAMWC.ShowResults) {
            SavedUsers = JSON.parse(GM_getValue(`users`));
            for (I in SavedUsers.users) {
                if (SavedUsers.users[I].namwc && SavedUsers.users[I].namwc.results) {
                    NAMWC.Users.push(SavedUsers.users[I].username);
                }
            }
            NAMWC.Users = sortArray(NAMWC.Users);
            for (I = 0, N = NAMWC.Users.length; I < N; ++I) {
                var user = {
                    steamId: SavedUsers.steamIds[NAMWC.Users[I]],
                    username: NAMWC.Users[I]
                };
                setNAMWCResult(NAMWC, user, SavedUsers.users[SavedUsers.steamIds[NAMWC.Users[I]]].namwc, false);
            }
        } else if (NAMWC.User) {
            NAMWC.Users.push(NAMWC.User.Username);
            checkNAMWCUsers(NAMWC, 0, 1, Callback);
        } else {
            for (Username in esgst.currentUsers) {
                if (Username != esgst.username) {
                    if (NAMWC.Users.length < 26) {
                        NAMWC.Users.push(Username);
                    } else {
                        break;
                    }
                }
            }
            NAMWC.Users = sortArray(NAMWC.Users);
            checkNAMWCUsers(NAMWC, 0, NAMWC.Users.length, Callback);
        }
    }

    function checkNAMWCUsers(NAMWC, I, N, Callback) {
        var User, Results, Key, newR;
        if (!NAMWC.Canceled) {
            NAMWC.Progress.innerHTML = "";
            NAMWC.OverallProgress.textContent = I + " of " + N + " users checked...";
            if (I < N) {
                User = NAMWC.User ? NAMWC.User : {
                    Username: NAMWC.Users[I]
                };
                var user = {
                    steamId: User.SteamID64,
                    id: User.ID,
                    username: User.Username
                };
                var savedUser = getUser(null, user), namwc = null;
                if (savedUser) {
                    namwc = savedUser.namwc;
                }
                    if (namwc && namwc.results) {
                        Results = namwc.results;
                    }
                    checkNAMWCUser(NAMWC, namwc, user.username, function(namwc) {
                        if (Results) {
                            for (Key in Results) {
                                if (Results[Key] !== namwc.results[Key]) {
                                    newR = true;
                                    break;
                                }
                            }
                        } else {
                            newR = true;
                        }
                        window.setTimeout(setNAMWCResult, 0, NAMWC, user, namwc, newR, I, N, Callback);
                    });
            } else if (Callback) {
                Callback();
            }
        }
    }

    function setNAMWCResult(NAMWC, user, namwc, New, I, N, Callback) {
        var Key;
        if (!NAMWC.Canceled) {
            for (Key in namwc.results) {
                if (namwc.results[Key]) {
                    NAMWC[Key].classList.remove("rhHidden");
                    NAMWC[Key + "Count"].textContent = parseInt(NAMWC[Key + "Count"].textContent) + 1;
                    NAMWC[Key + "Users"].insertAdjacentHTML(
                        "beforeEnd",
                        "<a " + (New ? "class=\"rhBold rhItalic\" " : "") + "href=\"http://www.sgtools.info/" + (Key.match(/multiple|notMultiple/) ? "multiple" : "nonactivated") + "/" + user.username +
                        "\" target=\"_blank\">" + user.username + (Key.match(/^(notActivated|multiple)$/) ? (" (" + namwc.results[Key] + ")") : "") + "</a>"
                    );
                }
            }
            if (!NAMWC.ShowResults) {
                NAMWC.Popup.reposition();
                user.values = {
                    namwc: namwc
                };
                saveUser(null, null, user, function () {
                    NAMWC.Progress.innerHTML = ``;
                    window.setTimeout(checkNAMWCUsers, 0, NAMWC, ++I, N, Callback);
                });
            }
        }
    }

    function checkNAMWCUser(NAMWC, namwc, username, Callback) {
        if (!NAMWC.Canceled) {
            if (!namwc) {
                namwc = {
                    lastCheck: 0,
                    results: {}
                };
            }
            if ((Date.now() - namwc.lastCheck) > 604800000) {
                if (NAMWC.NAC.checked) {
                    checkNAMWCNotActivated(NAMWC, namwc, username, Callback);
                } else if (NAMWC.MC.checked) {
                    checkNAMWCMultiple(NAMWC, namwc, username, Callback);
                } else {
                    checkNAMWCNotActivated(NAMWC, namwc, username, function (namwc) {
                        checkNAMWCMultiple(NAMWC, namwc, username, Callback);
                    });
                }
            } else {
                Callback(namwc);
            }
        }
    }

    function checkNAMWCNotActivated(NAMWC, namwc, username, Callback) {
        var N, ResponseText;
        if (!NAMWC.Canceled) {
            NAMWC.Progress.innerHTML =
                "<i class=\"fa fa-circle-o-notch fa-spin\"></i> " +
                "<span>Retrieving " + username + "'s not activated wins...</span>";
            queueRequest(NAMWC, null, "http://www.sgtools.info/nonactivated/" + username, function (Response) {
                ResponseText = Response.responseText;
                if (ResponseText.match(/has a private profile/)) {
                    namwc.results.activated = false;
                    namwc.results.notActivated = 0;
                    namwc.results.unknown = true;
                } else {
                    N = DOM.parse(ResponseText).getElementsByClassName("notActivatedGame").length;
                    namwc.results.activated = N === 0 ? true : false;
                    namwc.results.notActivated = N;
                    namwc.results.unknown = false;
                }
                namwc.lastCheck = Date.now();
                Callback(namwc);
            });
        }
    }

    function checkNAMWCMultiple(NAMWC, namwc, username, Callback) {
        var N;
        if (!NAMWC.Canceled) {
            NAMWC.Progress.innerHTML =
                "<i class=\"fa fa-circle-o-notch fa-spin\"></i> " +
                "<span>Retrieving " + username + "'s multiple wins...</span>";
            queueRequest(NAMWC, null, "http://www.sgtools.info/multiple/" + username, function (Response) {
                N = DOM.parse(Response.responseText).getElementsByClassName("multiplewins").length;
                namwc.results.notMultiple = N === 0 ? true : false;
                namwc.results.multiple = N;
                namwc.lastCheck = Date.now();
                Callback(namwc);
            });
        }
    }

    function highlightNamwcUsers(currentUsers) {
        var container, context, highlight, html, i, icon, id, key, matches, n, notActivated, results, savedUser, title;
        for (key in esgst.users.users) {
            savedUser = esgst.users.users[key];
            if (esgst.sg) {
                id = savedUser.username;
            } else {
                id = key;
            }
            if (currentUsers[id] && savedUser.namwc && savedUser.namwc.results) {
                results = savedUser.namwc.results;
                if (results.activated && (results.notMultiple || (results.multiple && esgst.namwc_h_m))) {
                    highlight = `positive`;
                    icon = `fa-thumbs-up`;
                } else if (results.unknown) {
                    highlight = `unknown`;
                    icon = `fa-warning`;
                } else {
                    highlight = `negative`;
                    icon = `fa-thumbs-down`;
                }
                if (((highlight === `positive` || highlight === `unknown`) && !esgst.namwc_h_f) || highlight === `negative`) {
                    if (results.unknown) {
                        notActivated = `?`;
                    } else {
                        notActivated = results.notActivated;
                    }
                    title = `${savedUser.username} has ${notActivated} not activated wins and ${results.multiple} multiple wins (last checked ${getTimestamp(savedUser.namwc.lastCheck / 1e3)})`;
                    if (esgst.namwc_h_i || esgst.wbh_w || esgst.wbh_b) {
                        html = `
                            <span class="esgst-namwc-icon ${highlight}" title="${title}">
                                <i class="fa ${icon}"></i>
                            </span>
                        `;
                        matches = currentUsers[id];
                        for (i = 0, n = matches.length; i < n; ++i) {
                            context = matches[i];
                            container = context.parentElement;
                            if (container.classList.contains(`comment__username`)) {
                                context = container;
                            }
                            context.insertAdjacentHTML(`beforeBegin`, html);
                        }
                    } else {
                        matches = currentUsers[id];
                        for (i = 0, n = matches.length; i < n; ++i) {
                            context = matches[i];
                            context.classList.add(`esgst-namwc-highlight`, highlight);
                            context.title = title;
                        }
                    }
                }
            }
        }
    }

    /* [NRF] Not Received Finder */

    function loadNrf(Context, User) {
        if (esgst.userPath || esgst.ap) {
            esgst.profileFeatures.push(addNrfButton);
        }
    }

    function addNrfButton(profile, savedUser) {
        var NRF;
        NRF = {
            N: parseInt(profile.sentRowRight.firstElementChild.getAttribute("title").match(/, (.+) Not Received/)[1])
        };
        if (NRF.N > 0) {
            NRF.I = 0;
            NRF.Multiple = [];
            profile.sentRowLeft.insertAdjacentHTML(
                "beforeEnd",
                "<span class=\"esgst-nrf-button\">" +
                "    <i class=\"fa fa-times-circle\" title=\"Find not received giveaways\"></i>" +
                "</span>"
            );
            setNRFPopup(NRF, profile.sentRowLeft.lastElementChild, profile);
        }
    }

    function setNRFPopup(NRF, NRFButton, profile) {
        var Popup;
        Popup = createPopup();
        Popup.Popup.classList.add("rhPopupLarge");
        Popup.Icon.classList.add("fa-times");
        Popup.Title.textContent = "Find " + profile.username + "'s not received giveaways:";
        createOptions(Popup.Options, NRF, [{
            Check: function () {
                return true;
            },
            Description: "Also search inside giveaways with multiple copies.",
            Title: "If disabled, only giveaways with visible not received copies will be found (faster).",
            Name: "FullSearch",
            Key: "FS",
            ID: "NRF_FS"
        }]);
        Popup.Options.insertAdjacentHTML("afterEnd", createDescription("If you're blacklisted / not whitelisted / not a member of the same Steam groups, not all giveaways will be found."));
        createButton(Popup.Button, "fa-search", "Find", "fa-times-circle", "Cancel", function (Callback) {
            NRFButton.classList.add("esgst-busy");
            setNRFSearch(NRF, profile, function () {
                NRF.Progress.innerHTML = "";
                NRFButton.classList.remove("esgst-busy");
                Callback();
            });
        }, function () {
            clearInterval(NRF.Request);
            clearInterval(NRF.Save);
            NRF.Canceled = true;
            setTimeout(function () {
                NRF.Progress.innerHTML = "";
            }, 500);
            NRFButton.classList.remove("esgst-busy");
        });
        NRF.Progress = Popup.Progress;
        NRF.OverallProgress = Popup.OverallProgress;
        NRF.Results = Popup.Results;
        NRFButton.addEventListener("click", function () {
            NRF.Popup = Popup.popUp();
        });
    }

    function setNRFSearch(NRF, profile, Callback) {
        NRF.Progress.innerHTML = NRF.OverallProgress.innerHTML = NRF.Results.innerHTML = "";
        NRF.Popup.reposition();
        NRF.Canceled = false;
        var user = {
            steamId: profile.steamId,
            id: profile.id,
            username: profile.username
        };
        var savedUser = getUser(null, user), nrf;
        if (savedUser) {
            nrf = savedUser.nrf;
        }
                if (!nrf) {
                    nrf = {
                        lastCheck: 0,
                        found: 0,
                        total: 0,
                        results: ``
                    };
                }
                if ((Date.now() - nrf.lastCheck) > 604800000) {
                    searchNRFUser(NRF, user.username, 1, 0, "/user/" + user.username + "/search?page=", function () {
                        nrf.lastCheck = Date.now();
                        nrf.found = NRF.I;
                        nrf.total = NRF.N;
                        nrf.results = NRF.Results.innerHTML;
                        user.values = {
                            nrf: nrf
                        };
                        saveUser(null, null, user, function () {
                            loadEndlessFeatures(NRF.Results);
                            NRF.Progress.innerHTML = ``;
                            Callback();
                        });
                    });
                } else {
                    NRF.Results.innerHTML = nrf.results;
                    NRF.OverallProgress.innerHTML = nrf.found + " of " + nrf.total + " not received giveaways found...";
                    NRF.Popup.reposition();
                    loadEndlessFeatures(NRF.Results);
                    Callback();
                }
    }

    function searchNRFUser(NRF, username, NextPage, CurrentPage, URL, Callback, Context) {
        var Matches, I, N, Match, Pagination;
        if (Context) {
            Matches = Context.querySelectorAll("div.giveaway__column--negative");
            for (I = 0, N = Matches.length; I < N; ++I) {
                NRF.I += Matches[I].querySelectorAll("a[href*='/user/']").length;
                NRF.Results.appendChild(Matches[I].closest(".giveaway__row-outer-wrap").cloneNode(true));
                NRF.Popup.reposition();
            }
            NRF.OverallProgress.innerHTML = NRF.I + " of " + NRF.N + " not received giveaways found...";
            if (NRF.I < NRF.N) {
                if (NRF.FS.checked) {
                    Matches = Context.getElementsByClassName("giveaway__heading__thin");
                    for (I = 0, N = Matches.length; I < N; ++I) {
                        Match = Matches[I].textContent.match(/\((.+) Copies\)/);
                        if (Match && (parseInt(Match[1]) > 3)) {
                            NRF.Multiple.push(Matches[I].closest(".giveaway__row-outer-wrap").cloneNode(true));
                        }
                    }
                }
                Pagination = Context.getElementsByClassName("pagination__navigation")[0];
                if (Pagination && !Pagination.lastElementChild.classList.contains("is-selected")) {
                    window.setTimeout(searchNRFUser, 0, NRF, username, NextPage, CurrentPage, URL, Callback);
                } else if (NRF.FS.checked && NRF.Multiple.length) {
                    window.setTimeout(searchNRFMultiple, 0, NRF, 0, NRF.Multiple.length, Callback);
                } else {
                    Callback();
                }
            } else {
                Callback();
            }
        } else if (!NRF.Canceled) {
            NRF.Progress.innerHTML =
                "<i class=\"fa fa-circle-o-notch fa-spin\"></i> " +
                "<span>Searching " + username + "'s giveaways (page " + NextPage + ")...</span>";
            queueRequest(NRF, null, URL + NextPage, function (Response) {
                window.setTimeout(searchNRFUser, 0, NRF, username, ++NextPage, CurrentPage, URL, Callback, DOM.parse(Response.responseText));
            });
        }
    }

    function searchNRFMultiple(NRF, I, N, Callback) {
        if (!NRF.Canceled) {
            NRF.Progress.innerHTML =
                "<i class=\"fa fa-circle-o-notch fa-spin\"></i> " +
                "<span>Searching inside giveaways with multiple copies (" + I + " of " + N + ")...</span>";
            if (I < N) {
                searchNRFGiveaway(NRF, NRF.Multiple[I].getElementsByClassName("giveaway__heading__name")[0].getAttribute("href") + "/winners/search?page=", 1, function (Found) {
                    if (Found) {
                        NRF.Results.appendChild(NRF.Multiple[I].cloneNode(true));
                    }
                    if (NRF.I < NRF.N) {
                        window.setTimeout(searchNRFMultiple, 0, NRF, ++I, N, Callback);
                    } else {
                        Callback();
                    }
                });
            } else {
                Callback();
            }
        }
    }

    function searchNRFGiveaway(NRF, URL, NextPage, Callback) {
        if (!NRF.Canceled) {
            queueRequest(NRF, null, URL + NextPage, function (Response) {
                var ResponseHTML, Matches, I, N, Found, Pagination;
                ResponseHTML = DOM.parse(Response.responseText);
                Matches = ResponseHTML.getElementsByClassName("table__column--width-small");
                for (I = 0, N = Matches.length; I < N; ++I) {
                    if (Matches[I].textContent.match(/Not Received/)) {
                        Found = true;
                        ++NRF.I;
                        NRF.OverallProgress.innerHTML = NRF.I + " of " + NRF.N + " not received giveaways found...";
                        if (NRF.I >= NRF.N) {
                            break;
                        }
                    }
                }
                Pagination = ResponseHTML.getElementsByClassName("pagination__navigation")[0];
                if ((NRF.I < NRF.N) && Pagination && !Pagination.lastElementChild.classList.contains("is-selected")) {
                    window.setTimeout(searchNRFGiveaway, 0, NRF, URL, ++NextPage, Callback);
                } else {
                    Callback(Found);
                }
            });
        }
    }

    /* [SWR] Sent/Won Ratio */

    function loadSwr() {
        if (esgst.userPath || esgst.ap) {
            esgst.profileFeatures.push(addSwrRatio);
        }
    }

    function addSwrRatio(profile) {
        var ratio, sent, won;
        won = parseInt(profile.wonRowRight.firstElementChild.textContent.replace(/,/, ``));
        sent = parseInt(profile.sentRowRight.firstElementChild.firstElementChild.textContent.replace(/,/, ``));
        if (won > 0) {
            ratio = Math.round(sent / won * 100) / 100;
        } else {
            ratio = 0;
        }
        profile.sentRow.insertAdjacentHTML(`afterEnd`, `
            <div class="esgst-swr-ratio featured__table__row">
                <div class="featured__table__row__left">Ratio</div>
                <div class="featured__table__row__right" title="${profile.username} has sent ${ratio} gifts for every gift won.">${ratio}</div>
            </div>
        `);
    }

    /* [LUC] Level Up Calculator */

    function loadLuc() {
        if (esgst.userPath || esgst.ap) {
            esgst.profileFeatures.push(calculateLuvValue);
        }
    }

    function calculateLuvValue(profile) {
        var base, level, lower, upper, value, values;
        level = parseFloat(profile.levelRowRight.firstElementChild.getAttribute(`title`));
        base = parseInt(level);
        if (base < 10) {
            values = [0, 0.01, 25.01, 50.01, 100.01, 250.01, 500.01, 1000.01, 2000.01, 3000.01, 5000.01];
            lower = values[base];
            upper = values[base + 1];
            value = Math.round((upper - (lower + ((upper - lower) * (level - base)))) * 100) / 100;
            profile.levelRowRight.insertAdjacentHTML(`beforeEnd`, `<span class="esgst-luc-value">(~\$${value} real CV to level ${base + 1})</span>`);
        }
    }

    /* [SGPB] SteamGifts Profile Button */

    function loadSgpb() {
        if (esgst.userPath) {
            esgst.profileFeatures.push(addSgpbButton);
        }
    }

    function addSgpbButton(profile) {
        var button;
        button = insertHtml(profile.steamButtonContainer, `beforeEnd`, `
            <div class="esgst-sgpb-container">
                <a class="esgst-sgpb-button" href="https://www.steamgifts.com/go/user/${profile.steamId}" rel="nofollow" target="_blank">
                    <i class="fa">
                        <img src="${GM_getResourceURL(`sgIcon`)}">
                    </i>
                    <span>Visit SteamGifts Profile</span>
                </a>
            </div>
        `);
        button.insertBefore(profile.steamButton, button.firstElementChild);
    }

    /* [STPB] SteamTrades Profile Button */

    function loadStpb() {
        if (esgst.userPath || esgst.ap) {
            esgst.profileFeatures.push(addStpbButton);
        }
    }

    function addStpbButton(profile) {
        var button, tooltip;
        button = insertHtml(profile.steamButtonContainer.firstElementChild, `beforeEnd`, `
            <a class="esgst-stpb-button" href="https://www.steamtrades.com/user/${profile.steamId}" rel="nofollow" target="_blank">
                <i class="fa fa-fw">
                    <img src="${GM_getResourceURL(`stIcon`)}">
                </i>
            </a>
        `);
        tooltip = profile.steamButtonContainer.getElementsByClassName(`js-tooltip`)[0];
        if (tooltip) {
            button.addEventListener(`mouseenter`, showStpbTooltip.bind(null, button, tooltip));
            button.addEventListener(`mouseleave`, hideStpbTooltip.bind(null, button));
        }
    }

    function showStpbTooltip(button, tooltip) {
        tooltip.textContent = `Visit SteamTrades Profile`;
        setSiblingsOpacity(button, `0.2`);
    }

    function hideStpbTooltip(button) {
        setSiblingsOpacity(button, `1`);
    }

    /* Whitelist/Blacklist Checker */

    function loadWbc() {
        var keys, n;
        if (esgst.wbc_h) {
            esgst.userFeatures.push(addWbcIcons);
        }
    }

    function addWBCButton(Context, WBCButton) {
        var Popup, WBC;
        Popup = createPopup();
        WBC = {
            Update: (Context ? false : true),
            B: esgst.wbc_b,
            Username: esgst.username
        };
        Popup.Popup.classList.add("rhPopupLarge");
        Popup.Icon.classList.add(WBC.Update ? "fa-cog" : "fa-question");
        Popup.Title.textContent = (WBC.Update ? "Manage Whitelist / Blacklist Checker caches" : ("Check for whitelists" + (WBC.B ? " / blacklists" : ""))) + ":";
        if (window.location.pathname.match(new RegExp("^\/user\/(?!" + WBC.Username + ")"))) {
            WBC.User = {
                Username: document.getElementsByClassName("featured__heading__medium")[0].textContent,
                ID: document.querySelector("[name='child_user_id']").value,
                SteamID64: document.querySelector("a[href*='/profiles/']").href.match(/\d+/)[0],
            };
        }
        createOptions(Popup.Options, WBC, [{
            Check: function () {
                return WBC.User;
            },
            Description: "Only check " + (WBC.User ? WBC.User.Username : "current user") + ".",
            Title: "If disabled, all users in the current page will be checked.",
            Name: "SingleCheck",
            Key: "SC",
            ID: "WBC_SC",
            Dependency: "FullListCheck"
        }, {
            Check: function () {
                return WBC.B;
            },
            Description: "Also check whitelist.",
            Title: "If disabled, a blacklist-only check will be performed (faster).",
            Name: "FullCheck",
            Key: "FC",
            ID: "WBC_FC"
        }, {
            Check: function () {
                return ((((WBC.User && !WBC.SC.checked) || !WBC.User) && !WBC.Update && !window.location.pathname.match(/^\/(discussions|users|archive)/)) ? true : false);
            },
            Description: "Check all pages.",
            Title: "If disabled, only the current page will be checked.",
            Name: "FullListCheck",
            Key: "FLC",
            ID: "WBC_FLC"
        }, {
            Check: function () {
                return true;
            },
            Description: "Return whitelists.",
            Title: "If enabled, everyone who has whitelisted you will be whitelisted back.",
            Name: "ReturnWhitelists",
            Key: "RW",
            ID: "WBC_RW"
        }, {
            Check: function () {
                return WBC.B;
            },
            Description: "Return blacklists.",
            Title: "If enabled, everyone who has blacklisted you will be blacklisted back.",
            Name: "ReturnBlacklists",
            Key: "RB",
            ID: "WBC_RB"
        }, {
            Check: function () {
                return WBC.Update;
            },
            Description: "Only update whitelists / blacklists.",
            Title: "If enabled, only users who have whitelisted / blacklisted you will be updated (faster).",
            Name: "SimpleUpdate",
            Key: "SU",
            ID: "WBC_SU"
        }, {
            Check: function () {
                return true;
            },
            Description: "Clear caches.",
            Title: "If enabled, the caches of all checked users will be cleared (slower).",
            Name: "ClearCaches",
            Key: "CC",
            ID: "WBC_CC"
        }]);
        Popup.Options.insertAdjacentHTML("afterEnd", createDescription("If an user is highlighted, that means they have been either checked for the first time or updated."));
        createButton(Popup.Button, WBC.Update ? "fa-refresh" : "fa-question-circle", WBC.Update ? "Update" : "Check", "fa-times-circle", "Cancel", function (Callback) {
            WBC.ShowResults = false;
            WBCButton.classList.add("esgst-busy");
            setWBCCheck(WBC, function () {
                WBCButton.classList.remove("esgst-busy");
                Callback();
            });
        }, function () {
            clearInterval(WBC.Request);
            clearInterval(WBC.Save);
            WBC.Canceled = true;
            setTimeout(function () {
                WBC.Progress.innerHTML = "";
            }, 500);
            WBCButton.classList.remove("esgst-busy");
        });
        WBC.Progress = Popup.Progress;
        WBC.OverallProgress = Popup.OverallProgress;
        createResults(Popup.Results, WBC, [{
            Icon: (
                "<span class=\"sidebar__shortcut-inner-wrap rhWBIcon\">" +
                "    <i class=\"fa fa-heart sidebar__shortcut__whitelist is-disabled is-selected\" style=\"background: none !important;\"></i> " +
                "</span>"
            ),
            Description: "You are whitelisted by",
            Key: "whitelisted"
        }, {
            Icon: (
                "<span class=\"sidebar__shortcut-inner-wrap rhWBIcon\">" +
                "    <i class=\"fa fa-ban sidebar__shortcut__blacklist is-disabled is-selected\" style=\"background: none !important;\"></i> " +
                "</span>"
            ),
            Description: "You are blacklisted by",
            Key: "blacklisted"
        }, {
            Icon: "<i class=\"fa fa-check-circle\"></i> ",
            Description: "You are neither whitelisted nor blacklisted by",
            Key: "none"
        }, {
            Icon: "<i class=\"fa fa-question-circle\"></i> ",
            Description: "You are not blacklisted and there is not enough information to know if you are whitelisted by",
            Key: "notBlacklisted"
        }, {
            Icon: "<i class=\"fa fa-question-circle\"></i> ",
            Description: "There is not enough information to know if you are whitelisted or blacklisted by",
            Key: "unknown"
        }]);
        WBCButton.addEventListener("click", function () {
            WBC.Popup = Popup.popUp(function () {
                if (WBC.Update) {
                    WBC.ShowResults = true;
                    setWBCCheck(WBC);
                }
            });
        });
    }

    function setWBCCheck(WBC, Callback) {
        var SavedUsers, I, N, Username;
        WBC.Progress.innerHTML = WBC.OverallProgress.innerHTML = "";
        WBC.whitelisted.classList.add("rhHidden");
        WBC.blacklisted.classList.add("rhHidden");
        WBC.none.classList.add("rhHidden");
        WBC.notBlacklisted.classList.add("rhHidden");
        WBC.unknown.classList.add("rhHidden");
        WBC.whitelistedCount.textContent = WBC.blacklistedCount.textContent = WBC.noneCount.textContent = WBC.notBlacklistedCount.textContent = WBC.unknownCount.textContent = "0";
        WBC.whitelistedUsers.innerHTML = WBC.blacklistedUsers.innerHTML = WBC.noneUsers.innerHTML = WBC.notBlacklistedUsers.innerHTML = WBC.unknownUsers.innerHTML = "";
        WBC.Popup.reposition();
        WBC.Users = [];
        WBC.Canceled = false;
        if (WBC.Update) {
            SavedUsers = JSON.parse(GM_getValue(`users`));
            for (I in SavedUsers.users) {
                if (SavedUsers.users[I].wbc && SavedUsers.users[I].wbc.result && (WBC.ShowResults || (!WBC.ShowResults && ((WBC.SU.checked && SavedUsers.users[I].wbc.result.match(/^(whitelisted|blacklisted)$/)) || !WBC.SU.checked)))) {
                    WBC.Users.push(SavedUsers.users[I].username);
                }
            }
            WBC.Users = sortArray(WBC.Users);
            if (WBC.ShowResults) {
                for (I = 0, N = WBC.Users.length; I < N; ++I) {
                    var user = {
                        steamId: SavedUsers.steamIds[WBC.Users[I]],
                        id: SavedUsers.users[SavedUsers.steamIds[WBC.Users[I]]].id,
                        username: WBC.Users[I]
                    };
                    setWBCResult(WBC, user, SavedUsers.users[SavedUsers.steamIds[WBC.Users[I]]].wbc, SavedUsers.users[SavedUsers.steamIds[WBC.Users[I]]].notes, SavedUsers.users[SavedUsers.steamIds[WBC.Users[I]]].whitelisted, SavedUsers.users[SavedUsers.steamIds[WBC.Users[I]]].blacklisted, false);
                }
            } else {
                checkWBCUsers(WBC, 0, WBC.Users.length, Callback);
            }
        } else if (WBC.User && WBC.SC.checked) {
            WBC.Users.push(WBC.User.Username);
            checkWBCUsers(WBC, 0, 1, Callback);
        } else {
            for (Username in esgst.currentUsers) {
                if (Username != WBC.Username) {
                    WBC.Users.push(Username);
                }
            }
            if (WBC.FLC.checked && ((((WBC.User && !WBC.SC.checked) || !WBC.User) && !WBC.Update && !window.location.pathname.match(/^\/(discussions|users|archive)/)))) {
                getWBCUsers(WBC, 1, esgst.currentPage, esgst.searchUrl, function () {
                    WBC.Users = sortArray(WBC.Users);
                    checkWBCUsers(WBC, 0, WBC.Users.length, Callback);
                });
            } else {
                WBC.Users = sortArray(WBC.Users);
                checkWBCUsers(WBC, 0, WBC.Users.length, Callback);
            }
        }
    }

    function checkWBCUsers(WBC, I, N, Callback) {
        var User, Result;
        if (!WBC.Canceled) {
            WBC.Progress.innerHTML = "";
            WBC.OverallProgress.textContent = I + " of " + N + " users checked...";
            if (I < N) {
                User = (WBC.User && WBC.SC.checked) ? WBC.User : {
                    Username: WBC.Users[I]
                };
                var user = {
                    steamId: User.SteamID64,
                    id: User.ID,
                    username: User.Username
                };
                var savedUser = getUser(null, user), notes, whitelisted, blacklisted, wbc;
                if (savedUser) {
                    notes = savedUser.notes;
                    whitelisted = savedUser.whitelisted;
                    blacklisted = savedUser.blacklisted;
                    wbc = savedUser.wbc;
                }
                        if (wbc && wbc.result) {
                            Result = wbc.result;
                        }
                        checkWBCUser(WBC, wbc, user.username, function (wbc) {
                            setTimeout(setWBCResult, 0, WBC, user, wbc, notes, whitelisted, blacklisted, (Result != wbc.result) ? true : false, I, N, Callback);
                        });
            } else if (Callback) {
                Callback();
            }
        }
    }

    function setWBCResult(WBC, user, wbc, notes, whitelisted, blacklisted, New, I, N, Callback) {
        var Key;
        if (!WBC.Canceled) {
            Key = ((wbc.result === `blacklisted`) && !WBC.B) ? "unknown" : wbc.result;
            WBC[Key].classList.remove("rhHidden");
            WBC[Key + "Count"].textContent = parseInt(WBC[Key + "Count"].textContent) + 1;
            WBC[Key + "Users"].insertAdjacentHTML("beforeEnd", "<a " + (New ? "class=\"rhBold rhItalic\" " : "") + "href=\"/user/" + user.username + "\">" + user.username + "</a>");
            if (!WBC.ShowResults) {
                WBC.Popup.reposition();
                if ((WBC.RW.checked && (wbc.result === `whitelisted`) && !whitelisted) || (WBC.B && WBC.RB.checked && (wbc.result === `blacklisted`) && !blacklisted)) {
                    if (user.id) {
                        returnWBCWhitelistBlacklist(WBC, wbc, user.username, user.id, notes, function (success, notes) {
                            if (success) {
                                user.values = {
                                    wbc: wbc,
                                    whitelisted: false,
                                    blacklisted: false
                                };
                                if (notes) {
                                    user.values.notes = notes;
                                }
                                user.values[wbc.result] = true;
                                user.values[`${wbc.result}Date`] = Date.now();
                            }
                            saveUser(null, null, user, function () {
                                window.setTimeout(checkWBCUsers, 0, WBC, ++I, N, Callback);
                            });
                        });
                    } else {
                        getUserId(user, function() {
                            returnWBCWhitelistBlacklist(WBC, wbc, user.username, user.id, notes, function (success, notes) {
                                if (success) {
                                    user.values = {
                                        wbc: wbc,
                                        whitelisted: false,
                                        blacklisted: false
                                    };
                                    if (notes) {
                                        user.values.notes = notes;
                                    }
                                    user.values[wbc.result] = true;
                                    user.values[`${wbc.result}Date`] = Date.now();
                                }
                                saveUser(null, null, user, function () {
                                    window.setTimeout(checkWBCUsers, 0, WBC, ++I, N, Callback);
                                });
                            });
                        });
                    }
                } else {
                    user.values = {
                        wbc: wbc
                    };
                    saveUser(null, null, user, function() {
                        window.setTimeout(checkWBCUsers, 0, WBC, ++I, N, Callback);
                    });
                }
            }
        }
    }

    function returnWBCWhitelistBlacklist(WBC, wbc, username, id, notes, Callback) {
        var Key, Type;
        if (!WBC.Canceled) {
            Key = wbc.result;
            Type = Key.match(/(.+)ed/)[1];
            WBC.Progress.innerHTML =
                "<i class=\"fa fa-circle-o-notch fa-spin\"></i> " +
                "<span>Returning " + Type + " for " + username + "...</span>";
            if (window.location.pathname.match(new RegExp("^\/user\/" + username))) {
                document.getElementsByClassName("sidebar__shortcut__" + Type)[0].click();
                if (esgst.wbc_n) {
                    var msg = `Returned ${Type}.`;
                    if (notes) {
                        notes = `${msg}\n\n${notes}`;
                    } else {
                        notes = msg;
                    }
                }
                Callback(true, notes);
            } else {
                queueRequest(WBC, "xsrf_token=" + esgst.xsrfToken + "&do=" + Type + "&child_user_id=" + id + "&action=insert", "/ajax.php", function (Response) {
                    var success = false;
                    if (JSON.parse(Response.responseText).type == "success") {
                        success = true;
                        if (esgst.wbc_n) {
                            var msg = `${Key} in return.`;
                            if (notes) {
                                notes = `${msg}\n\n${notes}`;
                            } else {
                                notes = msg;
                            }
                        }
                    }
                    Callback(success, notes);
                });
            }
        }
    }

    function checkWBCUser(WBC, wbc, username, Callback) {
        var Match;
        if (!WBC.Canceled) {
            if (WBC.CC.checked) {
                wbc = null;
            }
            if (!wbc) {
                wbc = {
                    lastCheck: 0,
                    timestamp: 0
                };
            }
            if (((Date.now() - wbc.lastCheck) > 86400000) || WBC.Update) {
                if ((WBC.FC.checked && wbc.whitelistGiveaway) || (!WBC.FC.checked && wbc.giveaway)) {
                    WBC.Timestamp = wbc.timestamp;
                    checkWBCGiveaway(WBC, wbc, Callback);
                } else {
                    WBC.Timestamp = 0;
                    WBC.GroupGiveaways = [];
                    Match = window.location.href.match(new RegExp("\/user\/" + username + "(\/search\?page=(\d+))?"));
                    getWBCGiveaways(WBC, wbc, username, 1, Match ? (Match[2] ? parseInt(Match[2]) : 1) : 0, "/user/" + username + "/search?page=", Callback);
                }
            } else {
                Callback(wbc);
            }
        }
    }

    function checkWBCGiveaway(WBC, wbc, Callback) {
        if (!WBC.Canceled) {
            queueRequest(WBC, null, wbc.whitelistGiveaway || wbc.giveaway, function (Response) {
                var responseHtml = DOM.parse(Response.responseText);
                var errorMessage = responseHtml.getElementsByClassName(`table--summary`)[0];
                var stop;
                if (errorMessage) {
                    errorMessage = errorMessage.textContent;
                    if (errorMessage.match(/blacklisted the giveaway creator/)) {
                        wbc.result = "notBlacklisted";
                        stop = true;
                    } else if (errorMessage.match(/blacklisted by the giveaway creator/)) {
                        wbc.result = "blacklisted";
                    } else if (errorMessage.match(/not a member of the giveaway creator's whitelist/)) {
                        wbc.result = "none";
                    } else {
                        wbc.result = "notBlacklisted";
                    }
                } else if (wbc.whitelistGiveaway) {
                    wbc.result = "whitelisted";
                } else {
                    wbc.result = "notBlacklisted";
                }
                wbc.lastCheck = Date.now();
                wbc.timestamp = WBC.Timestamp;
                Callback(wbc, stop);
            });
        }
    }

    function getWBCGiveaways(WBC, wbc, username, NextPage, CurrentPage, URL, Callback, Context) {
        var Giveaway, Pagination;
        if (Context) {
            if (!wbc.giveaway) {
                Giveaway = Context.querySelector("[class='giveaway__heading__name'][href*='/giveaway/']");
                wbc.giveaway = Giveaway ? Giveaway.getAttribute("href") : null;
            }
            Pagination = Context.getElementsByClassName("pagination__navigation")[0];
            Giveaway = Context.getElementsByClassName("giveaway__summary")[0];
            if (Giveaway && (WBC.Timestamp === 0)) {
                WBC.Timestamp = parseInt(Giveaway.querySelector("[data-timestamp]").getAttribute("data-timestamp"));
                if (WBC.Timestamp >= (new Date().getTime())) {
                    WBC.Timestamp = 0;
                }
            }
            if (wbc.giveaway) {
                checkWBCGiveaway(WBC, wbc, function (wbc, stop) {
                    var WhitelistGiveaways, I, N, GroupGiveaway;
                    if ((wbc.result === `notBlacklisted`) && !stop && WBC.FC.checked) {
                        WhitelistGiveaways = Context.getElementsByClassName("giveaway__column--whitelist");
                        for (I = 0, N = WhitelistGiveaways.length; (I < N) && !wbc.whitelistGiveaway; ++I) {
                            GroupGiveaway = WhitelistGiveaways[I].parentElement.getElementsByClassName("giveaway__column--group")[0];
                            if (GroupGiveaway) {
                                WBC.GroupGiveaways.push(GroupGiveaway.getAttribute("href"));
                            } else {
                                wbc.whitelistGiveaway = WhitelistGiveaways[I].closest(".giveaway__summary").getElementsByClassName("giveaway__heading__name")[0].getAttribute("href");
                            }
                        }
                        if (wbc.whitelistGiveaway) {
                            checkWBCGiveaway(WBC, wbc, Callback);
                        } else if (((WBC.Timestamp >= wbc.timestamp) || (WBC.Timestamp === 0)) && Pagination && !Pagination.lastElementChild.classList.contains("is-selected")) {
                            window.setTimeout(getWBCGiveaways, 0, WBC, wbc, username, NextPage, CurrentPage, URL, Callback);
                        } else if ((wbc.groupGiveaways && wbc.groupGiveaways.length) || WBC.GroupGiveaways.length) {
                            getWBCGroupGiveaways(WBC, 0, WBC.GroupGiveaways.length, wbc, username, function (wbc, Result) {
                                var Groups, GroupGiveaways, Found, J, NumGroups;
                                if (Result) {
                                    Callback(wbc);
                                } else {
                                    Groups = JSON.parse(GM_getValue(`groups`, `{}`));
                                    for (GroupGiveaway in wbc.groupGiveaways) {
                                        Found = false;
                                        GroupGiveaways = wbc.groupGiveaways[GroupGiveaway];
                                        for (I = 0, N = GroupGiveaways.length; (I < N) && !Found; ++I) {
                                            if (Groups[GroupGiveaways[I]] && Groups[GroupGiveaways[I]].member) {
                                                Found = true;
                                            }
                                        }
                                        if (!Found) {
                                            break;
                                        }
                                    }
                                    if (Found) {
                                        Callback(wbc);
                                    } else {
                                        wbc.result = "whitelisted";
                                        Callback(wbc);
                                    }
                                }
                            });
                        } else {
                            Callback(wbc);
                        }
                    } else {
                        Callback(wbc);
                    }
                });
            } else if (((WBC.Timestamp >= wbc.timestamp) || (WBC.Timestamp === 0)) && Pagination && !Pagination.lastElementChild.classList.contains("is-selected")) {
                window.setTimeout(getWBCGiveaways, 0, WBC, wbc, username, NextPage, CurrentPage, URL, Callback);
            } else {
                wbc.result = "unknown";
                wbc.lastCheck = Date.now();
                wbc.timestamp = WBC.Timestamp;
                Callback(wbc);
            }
        } else if (!WBC.Canceled) {
            WBC.Progress.innerHTML =
                "<i class=\"fa fa-circle-o-notch fa-spin\"></i> " +
                "<span>Retrieving " + username + "'s giveaways (page " + NextPage + ")...</span>";
            if (CurrentPage != NextPage) {
                queueRequest(WBC, null, URL + NextPage, function (Response) {
                    if (Response.finalUrl.match(/\/user\//)) {
                        window.setTimeout(getWBCGiveaways, 0, WBC, wbc, username, ++NextPage, CurrentPage, URL, Callback, DOM.parse(Response.responseText));
                    } else {
                        wbc.result = "unknown";
                        wbc.lastCheck = Date.now();
                        wbc.timestamp = WBC.Timestamp;
                        Callback(wbc);
                    }
                });
            } else {
                window.setTimeout(getWBCGiveaways, 0, WBC, wbc, username, ++NextPage, CurrentPage, URL, Callback, document);
            }
        }
    }

    function getWBCGroupGiveaways(WBC, I, N, wbc, username, Callback) {
        if (!WBC.Canceled) {
            if (I < N) {
                WBC.Progress.innerHTML =
                    "<i class=\"fa fa-circle-o-notch\"></i> " +
                    "<span>Retrieving " + username + "'s group giveaways (" + I + " of " + N + ")...</span>";
                getWBCGroups(WBC, WBC.GroupGiveaways[I] + "/search?page=", 1, wbc, function (wbc, Result) {
                    if (Result) {
                        Callback(wbc, Result);
                    } else {
                        window.setTimeout(getWBCGroupGiveaways, 0, WBC, ++I, N, wbc, username, Callback);
                    }
                });
            } else {
                Callback(wbc);
            }
        }
    }

    function getWBCGroups(WBC, URL, NextPage, wbc, Callback) {
        if (!WBC.Canceled) {
            queueRequest(WBC, null, URL + NextPage, function (Response) {
                var ResponseText, ResponseHTML, Groups, N, GroupGiveaway, I, Group, Pagination;
                ResponseText = Response.responseText;
                ResponseHTML = DOM.parse(ResponseText);
                Groups = ResponseHTML.getElementsByClassName("table__column__heading");
                N = Groups.length;
                if (N > 0) {
                    if (!wbc.groupGiveaways) {
                        wbc.groupGiveaways = {};
                    }
                    GroupGiveaway = URL.match(/\/giveaway\/(.+)\//)[1];
                    if (!wbc.groupGiveaways[GroupGiveaway]) {
                        wbc.groupGiveaways[GroupGiveaway] = [];
                    }
                    for (I = 0; I < N; ++I) {
                        Group = Groups[I].getAttribute("href").match(/\/group\/.+?\/(.+)/)[1];
                        if (wbc.groupGiveaways[GroupGiveaway].indexOf(Group) < 0) {
                            wbc.groupGiveaways[GroupGiveaway].push(Group);
                        }
                    }
                    Pagination = ResponseHTML.getElementsByClassName("pagination__navigation")[0];
                    if (Pagination && !Pagination.lastElementChild.classList.contains("is-selected")) {
                        window.setTimeout(getWBCGroups, 0, WBC, URL, ++NextPage, wbc, Callback);
                    } else {
                        Callback(wbc);
                    }
                } else {
                    var errorMessage = ResponseHTML.getElementsByClassName(`table--summary`)[0];
                    if (errorMessage && errorMessage.textContent.match(/not a member of the giveaway creator's whitelist/)) {
                        wbc.result = "none";
                        Callback(wbc, true);
                    } else {
                        Callback(wbc, true);
                    }
                }
            });
        }
    }

    function getWBCUsers(WBC, NextPage, CurrentPage, URL, Callback, Context) {
        var Matches, I, N, Match, Username, Pagination;
        if (Context) {
            Matches = Context.querySelectorAll("a[href*='/user/']");
            for (I = 0, N = Matches.length; I < N; ++I) {
                Match = Matches[I].getAttribute("href").match(/\/user\/(.+)/);
                if (Match) {
                    Username = Match[1];
                    if ((WBC.Users.indexOf(Username) < 0) && (Username != WBC.Username) && (Username == Matches[I].textContent) && !Matches[I].closest(".markdown")) {
                        WBC.Users.push(Username);
                    }
                }
            }
            Pagination = Context.getElementsByClassName("pagination__navigation")[0];
            if (Pagination && !Pagination.lastElementChild.classList.contains("is-selected")) {
                window.setTimeout(getWBCUsers, 0, WBC, NextPage, CurrentPage, URL, Callback);
            } else {
                Callback();
            }
        } else if (!WBC.Canceled) {
            WBC.Progress.innerHTML =
                "<i class=\"fa fa-circle-o-notch fa-spin\"></i> " +
                "<span>Retrieving users (page " + NextPage + ")...</span>";
            if (CurrentPage != NextPage) {
                queueRequest(WBC, null, URL + NextPage, function (Response) {
                    window.setTimeout(getWBCUsers, 0, WBC, ++NextPage, CurrentPage, URL, Callback, DOM.parse(Response.responseText));
                });
            } else {
                window.setTimeout(getWBCUsers, 0, WBC, ++NextPage, CurrentPage, URL, Callback, document);
            }
        }
    }

    function addWbcIcons(currentUsers) {
        var container, context, html, i, id, key, lastChecked, matches, n, result, savedUser;
        for (key in esgst.users.users) {
            savedUser = esgst.users.users[key];
            id = esgst.sg ? savedUser.username : key;
            if (currentUsers[id] && savedUser.wbc) {
                result = savedUser.wbc.result;
                if ((result === `whitelisted`) || ((result === `blacklisted`) && esgst.wbc_b)) {
                    lastChecked = getTimestamp(savedUser.wbc.lastCheck / 1e3);
                    html = `
                        <span class="sidebar__shortcut-inner-wrap WBCIcon rhWBIcon" title="${savedUser.username} has ${result} you (last checked ${lastChecked})">
                            <i class="fa sidebar__shortcut__${(result === `whitelisted`) ? `whitelist fa-check` : `blacklist fa-times`} is-disabled is-selected" style="background: none !important;"></i>
                        </span>
                    `;
                    matches = currentUsers[id];
                    for (i = 0, n = matches.length; i < n; ++i) {
                        context = matches[i];
                        container = context.parentElement;
                        if (container.classList.contains(`comment__username`)) {
                            context = container;
                        }
                        context.insertAdjacentHTML(`beforeBegin`, html);
                    }
                }
            }
        }
    }

    /* [WBH] Whitelist/Blacklist Highlighter */

    function loadWbh() {
        if (!esgst.accountPath) {
            esgst.userFeatures.push(addWbhIcons);
        }
    }

    function addWbhIcons(currentUsers) {
        var container, context, html, i, icon, id, key, matches, n, savedUser, status, title;
        for (key in esgst.users.users) {
            savedUser = esgst.users.users[key];
            id = esgst.sg ? savedUser.username : key;
            if (currentUsers[id] && (savedUser.whitelisted || savedUser.blacklisted)) {
                if (savedUser.whitelisted) {
                    status = `whitelisted`;
                    icon = `fa-heart sidebar__shortcut__whitelist`;
                } else {
                    status = `blacklisted`;
                    icon = `fa-ban sidebar__shortcut__blacklist`;
                }
                title = `You ${status} ${savedUser.username} on ${getTimestamp(savedUser[`${status}Date`] / 1e3)}`;
                matches = currentUsers[id];
                if ((esgst.wbh_w && savedUser.whitelisted) || (esgst.wbh_b && savedUser.blacklisted)) {
                    for (i = 0, n = matches.length; i < n; ++i) {
                        context = matches[i];
                        context.classList.add(`esgst-wbh-highlight`, status);
                        context.title = title;
                    }
                } else {
                    html = `
                        <span class="sidebar__shortcut-inner-wrap esgst-wbh-icon" title="${title}">
                            <i class="fa ${icon} is-disabled is-selected" style="background: none !important;"></i>
                        </span>
                    `;
                    for (i = 0, n = matches.length; i < n; ++i) {
                        context = matches[i];
                        container = context.parentElement;
                        if (container.classList.contains(`comment__username`)) {
                            context = container;
                        }
                        insertHtml(context, `beforeBegin`, html);
                    }
                }
            }
        }
    }

    /* [WBS] Whitelist/Blacklist Sorter */

    function addWbsButton(dateKey, key, saveKey, sortAscButton, sortDescButton) {
        sortAscButton.addEventListener(`click`, function () {
             sortWbsList(true, dateKey, `fa-sort-amount-asc`, key, saveKey, `Oldest to newest ${saveKey} users:`);
        });
        sortDescButton.addEventListener(`click`, function () {
             sortWbsList(false, dateKey, `fa-sort-amount-desc`, key, saveKey, `Newest to oldest ${saveKey} users:`);
        });
    }

    function sortWbsList(asc, dateKey, icon, key, saveKey, title) {
        var i, n, popup, row, rows, savedUsers, steamId, table, user, users;
        users = [];
        savedUsers = JSON.parse(GM_getValue(`users`)).users;
        for (steamId in savedUsers) {
            if (savedUsers[steamId][saveKey]) {
                users.push({
                    steamId: steamId,
                    user: savedUsers[steamId]
                });
            }
        }
        users.sort(function (a, b) {
            if (a.user[dateKey] < b.user[dateKey]) {
                if (asc) {
                    return -1;
                } else {
                    return 1;
                }
            } else if (a.user[dateKey] > b.user[dateKey]) {
                if (asc) {
                    return 1;
                } else {
                    return -1;
                }
            } else {
                return 0;
            }
        });
        popup = createPopup_v6(icon, title, true);
        table = insertHtml(popup.description, `beforeEnd`, `
            <div class="esgst-text-left table">
                <div class="table__heading">
		        <div class="table__column--width-fill">User</div>
		        <div class="table__column--width-small text-center">Added</div>
					<div class="table__column--width-small text-center">Remove</div>
				</div>
                <div class="table__rows"></div>
            </div>
        `);
        rows = table.lastElementChild;
        for (i = 0, n = users.length; i < n; ++i) {
            user = users[i].user;
            steamId = users[i].steamId;
            row = insertHtml(rows, `beforeEnd`, `
                <div class="table__row-outer-wrap">
                    <div class="table__row-inner-wrap">
                        <div class="table__column--width-fill">
                            <a class="table__column__heading" href="/user/${user.username}">${user.username}</a>
                        </div>
                        <div class="table__column--width-small text-center">${getTimestamp(user[dateKey] / 1e3)}</div>
                        <div class="table__column--width-small text-center">
                            <div class="table__remove-default esgst-clickable">
                                <i class="icon-red fa fa-times-circle"></i>
                                <span class="table__column__secondary-link">Remove</span>
                            </div>
		            		<div class="table__remove-loading esgst-hidden">
                                <i class="fa fa-refresh fa-spin"></i> Removing...
                            </div>
						    <div class="table__remove-complete esgst-hidden">
                                <i class="fa fa-times-circle"></i> Removed
                            </div>
                        </div>
                    </div>
                </div>
            `);
            setWbsRemove(dateKey, key, row, saveKey, steamId, user);
        }
        loadEndlessFeatures(table);
        popup.open();
    }

    function setWbsRemove(dateKey, key, row, saveKey, steamId, user) {
        var removeButton, removedButton, removingButton, savedUsers;
        removeButton = row.firstElementChild.lastElementChild.firstElementChild;
        removingButton = removeButton.nextElementSibling;
        removedButton = removingButton.nextElementSibling;
        removeButton.addEventListener(`click`, function () {
            removeButton.classList.add(`esgst-hidden`);
            removingButton.classList.remove(`esgst-hidden`);
            request(`xsrf_token=${esgst.xsrfToken}&do=${key}&action=delete&child_user_id=${user.id}`, false, `/ajax.php`, function () {
                createLock(`userLock`, 300, function (deleteLock) {
                    savedUsers = JSON.parse(GM_getValue(`users`));
                    delete savedUsers.users[steamId][saveKey];
                    delete savedUsers.users[steamId][dateKey];
                    GM_setValue(`users`, JSON.stringify(savedUsers));
                    removingButton.classList.add(`esgst-hidden`);
                    removedButton.classList.remove(`esgst-hidden`);
                });
            });
        });
    }

    /* [IBH] Inbox Winners Highlighter */

    function loadIwh() {
        if (esgst.winnersPath || esgst.inboxPath) {
            esgst.endlessFeatures.push(getIwhUsers);
            getIwhUsers(document);
        }
    }

    function getIwhUsers(context) {
        var className;
        var callback;
        if (esgst.winnersPath) {
            className = `table__gift-not-sent`;
            callback = setIWHObserver;
        } else {
            className = `comments__entity`;
            callback = highlightIWHWinner;
        }
        var matches = context.getElementsByClassName(className);
        for (var i = 0, n = matches.length; i < n; ++i) {
            callback(matches[i]);
        }
    }

    function setIWHObserver(Context) {
        var Key, Username;
        Key = window.location.pathname.match(/\/giveaway\/(.+?)\//)[1];
        Username = Context.closest(".table__row-inner-wrap").getElementsByClassName("table__column__heading")[0].querySelector("a[href*='/user/']").textContent;
        Context.addEventListener("click", function () {
            var Winners;
            Winners = GM_getValue("Winners", {});
            if (!Winners[Key]) {
                Winners[Key] = [];
            }
            if (Winners[Key].indexOf(Username) < 0) {
                Winners[Key].push(Username);
            }
            GM_setValue("Winners", Winners);
        });
    }

    function highlightIWHWinner(Context) {
        var Match, Key, Winners, Matches, I, N, Username;
        Match = Context.firstElementChild.firstElementChild.getAttribute("href").match(/\/giveaway\/(.+?)\//);
        if (Match) {
            Key = Match[1];
            Winners = GM_getValue("Winners", {});
            if (Winners[Key]) {
                Matches = Context.nextElementSibling.children;
                for (I = 0, N = Matches.length; I < N; ++I) {
                    Context = Matches[I].getElementsByClassName("comment__username")[0];
                    Username = Context.textContent;
                    if (Winners[Key].indexOf(Username) >= 0) {
                        Context.insertAdjacentHTML("afterEnd", "<i class=\"fa fa-trophy IWHIcon\" title=\"This is the winner or one of the winners of this giveaway\"></i>");
                    }
                }
            }
        }
    }

    /* [GH] Groups Highlighter */

    function loadGh() {
        if (!esgst.groupsPath) {
            esgst.endlessFeatures.push(highlightGhGroups);
            highlightGhGroups(document);
        }
    }

    function highlightGhGroups(context) {
        var code, element, elements, i, key, n, savedGroups;
        savedGroups = JSON.parse(GM_getValue(`groups`, `{}`));
        elements = context.querySelectorAll(`.table__column__heading[href*="/group/"]`);
        for (i = 0, n = elements.length; i < n; ++i) {
            element = elements[i];
            code = element.getAttribute(`href`).match(/\/group\/(.+)\//)[1];
            for (key in savedGroups) {
                if (savedGroups[key].code === code) {
                    if (savedGroups[key].member) {
                        element.closest(`.table__row-outer-wrap`).classList.add(`esgst-gh-highlight`);
                    }
                    break;
                }
            }
        }
    }

    /* [GS] Group Stats */

    function loadGs() {
        if (esgst.groupsPath) {
            esgst.endlessFeatures.push(getGsGroups);
            addGSHeading();
            getGsGroups(document);
        }
    }

    function getGsGroups(context) {
        var matches = context.getElementsByClassName(`table__row-inner-wrap`);
        for (var i = 0, n = matches.length; i < n; ++i) {
            loadGSStatus(matches[i]);
        }
    }

    function addGSHeading() {
        var Context;
        Context = document.getElementsByClassName("table__heading")[0];
        Context.insertAdjacentHTML(
            "beforeEnd",
            "<div class=\"table__column--width-small text-center\">Sent</div>" +
            "<div class=\"table__column--width-small text-center\">Received</div>" +
            "<div class=\"table__column--width-small text-center\">Gift Difference</div>" +
            "<div class=\"table__column--width-small text-center\">Value Difference</div>"
        );
    }

    function loadGSStatus(Context) {
        var GS, URL;
        Context.insertAdjacentHTML(
            "beforeEnd",
            "<div class=\"table__column--width-small text-center\">" +
            "    <i class=\"fa fa-circle-o-notch fa-spin\"></i>" +
            "    <span>Loading group stats...</span>" +
            "</div>"
        );
        GS = {
            Progress: Context.lastElementChild
        };
        URL = Context.getElementsByClassName("table__column__heading")[0].getAttribute("href") + "/users/search?q=" + esgst.username;
        queueRequest(GS, null, URL, function (Response) {
            var Matches, I, N;
            GS.Progress.remove();
            Matches = DOM.parse(Response.responseText).getElementsByClassName("table__row-inner-wrap")[0].getElementsByClassName("table__column--width-small");
            for (I = 0, N = Matches.length; I < N; ++I) {
                Context.appendChild(Matches[0]);
            }
        });
    }

    /* [RGR] Removed Game Redirecter */

    function loadRgr() {
        esgst.endlessFeatures.push(getRgrLinks);
        getRgrLinks(document);
    }

    function getRgrLinks(context) {
        var elements, i, n;
        elements = context.querySelectorAll(`[href*="store.steampowered.com/app/"], [href*="store.steampowered.com/sub/"]`);
        for (i = 0, n = elements.length; i < n; ++i) {
            elements[i].addEventListener(`click`, setRgrLink);
        }
    }

    function setRgrLink(event) {
        var game, match, url;
        url = event.currentTarget.getAttribute(`href`);
        match = url.match(/\/(app|sub)\/(\d+)/);
        game = {
            id: match[2],
            type: match[1]
        };
        GM_setValue(`rgr_game`, game);
    }

    function checkRgrRemoved() {
        var game, string;
        game = GM_getValue(`rgr_game`);
        if (game) {
            GM_deleteValue(`rgr_game`);
            string = `/${game.type}/${game.id}`;
            if (!window.location.href.match(string)) {
                if (esgst.settings.rgr_index === 0) {
                    window.location.href = `http://steamcommunity.com${string}`;
                } else {
                    window.location.href = `https://steamdb.info${string}`;
                }
            }
        }
    }

    /* [EGH] Entered Games Highlighter */

    function loadEgh() {
            if (esgst.giveawayPath) {
                setEghObserver(document);
            }
            if (!esgst.menuPath) {
            esgst.gameFeatures.push(function (games) {
                var savedGames;
                savedGames = JSON.parse(GM_getValue(`games`));
                highlightEghGames(games.apps, savedGames.apps, `apps`);
                highlightEghGames(games.subs, savedGames.subs, `subs`);
            });
            }
    }

    function setEghObserver(context) {
        var button, info;
        button = context.querySelector(`.sidebar__entry-insert`);
        if (button) {
            info = getGameInfo(context);
            if (info) {
                button.addEventListener(`click`, function () {
                    saveEghGame(info.id, info.type);
                });
            }
        }
    }

    function saveEghGame(id, type) {
        var games;
        if (id && type) {
            games = JSON.parse(GM_getValue(`games`));
            if (!games[type][id] || !games[type][id].entered) {
                createLock(`gameLock`, 300, function (deleteLock) {
                    games = JSON.parse(GM_getValue(`games`));
                    if (!games[type][id]) {
                        games[type][id] = {};
                    }
                    games[type][id].entered = true;
                    GM_setValue(`games`, JSON.stringify(games));
                    deleteLock();
                });
            }
        }
    }

    function highlightEghGames(games, savedGames, type) {
        var i, id, n;
        for (id in savedGames) {
            if (savedGames[id].entered && games[id]) {
                for (i = 0, n = games[id].length; i < n; ++i) {
                    if (!games[id][i].container.getElementsByClassName(`esgst-egh-button`)[0] && ((games[id][i].table && esgst.egh_t) || !games[id][i].table)) {
                        addEghIcon(games[id][i].headingName, id, type);
                    }
                }
            }
        }
    }

    function addEghIcon(headingName, id, type) {
        var icon;
        icon = insertHtml(headingName, `beforeBegin`, `
            <a class="esgst-egh-button">
                <i class="fa fa-star esgst-egh-icon" title="You have entered giveaways for this game before. Click to unhighlight it"></i>
            </a>
        `);
        icon.addEventListener(`click`, unhighlightGame);

        function unhighlightGame() {
            icon.removeEventListener(`click`, unhighlightGame);
            icon.innerHTML = `<i class="fa fa-circle-o-notch fa-spin"></i>`;
            createLock(`gameLock`, 300, function (deleteLock) {
                var games;
                games = JSON.parse(GM_getValue(`games`));
                delete games[type][id].entered;
                GM_setValue(`games`, JSON.stringify(games));
                icon.remove();
                deleteLock();
            });
        }
    }

    /* [GT] Game Tags */

    function loadGt() {
        var savedGames;
            esgst.gameFeatures.push(function (games, table) {
                savedGames = JSON.parse(GM_getValue(`games`));
                getGtGames(games.apps, savedGames.apps, `apps`);
                getGtGames(games.subs, savedGames.subs, `subs`);
            });
    }

    function getGtGames(games, savedGames, type) {
        var i, id, n;
        for (id in games) {
            for (i = 0, n = games[id].length; i < n; ++i) {
                if ((games[id][i].table && esgst.gt_t) || !games[id][i].table) {
                    addGtPanel(games[id][i], id, type);
                }
            }
        }
        for (id in savedGames) {
            if (savedGames[id].tags && games[id]) {
                addGtTags(id, savedGames[id].tags, type, games[id]);
            }
        }
    }

    function addGtPanel(context, id, type) {
        var games, input, popup, set;
        if (!context.container.getElementsByClassName(`esgst-gt-panel`)[0]) {
            insertHtml(context.heading.lastElementChild || context.heading, `afterEnd`, `
            <a class="esgst-gt-panel" title="Add game tags">
                <i class="fa fa-tag"></i>
                <span class="esgst-gt-tags"></span>
            </a>
        `).addEventListener(`click`, function () {
                    popup = createPopup_v6(`fa-tag`, `Edit game tags for <span>${context.name}</span>:`, true);
                    input = insertHtml(popup.description, `beforeEnd`, `
                <input type="text"/>
            `);
                    popup.description.insertAdjacentHTML(`beforeEnd`, createDescription(`Use commas to separate tags, for example: Tag1, Tag2, ...`));
                    set = createButtonSet(`green`, `grey`, `fa-check`, `fa-circle-o-notch fa-spin`, `Save`, `Saving...`, saveGtTags.bind(null, id, input, popup, type));
                    popup.description.appendChild(set.set);
                    input.addEventListener(`keydown`, function (event) {
                        if (event.key === `Enter`) {
                            set.toggle();
                            saveGtTags(id, input, popup, type, set.toggle);
                        }
                    });
                    popup.open(function () {
                        input.focus();
                        games = JSON.parse(GM_getValue(`games`));
                        if (games[type][id] && games[type][id].tags) {
                            input.value = (games[type][id].tags.join && games[type][id].tags.join(`, `)) || games[type][id].tags;
                        }
                    });
                });
        }
    }

    function saveGtTags(id, input, popup, type) {
        var games, tags;
        tags = input.value.replace(/(,\s*)+/g, function (match, p1, offset, string) {
            return (((offset === 0) || (offset == (string.length - match.length))) ? `` : `, `);
        }).split(`, `);
        createLock(`gameLock`, 300, function (closeLock) {
            games = JSON.parse(GM_getValue(`games`));
            if (!games[type][id]) {
                games[type][id] = {};
            }
            games[type][id].tags = tags;
            GM_setValue(`games`, JSON.stringify(games));
            addGtTags(id, tags, type);
            popup.opened.close();
            closeLock();
        });
    }

    function addGtTags(id, tags, type, games) {
        var html, i, n, prefix, suffix;
        prefix = `<span class=\"global__image-outer-wrap author_avatar is_icon\">`;
        suffix = `</span>`;
        html = tags.length ? tags.join(`, `).replace(/^|,\s|$/g, function (match, offset, string) {
            return ((offset === 0) ? prefix : ((offset == (string.length - match.length)) ? suffix : (`${suffix}${prefix}`)));
        }) : "";
        if (!games) {
            games = getGames(document)[type][id];
        }
        if (games) {
            for (i = 0, n = games.length; i < n; ++i) {
                if ((games[i].table && esgst.gt_t) || !games[i].table) {
                    games[i].container.getElementsByClassName(`esgst-gt-tags`)[0].innerHTML = html;
                }
            }
        }
    }

    /* [GC] Game Categories */

    function loadGc() {
            if (esgst.newGiveawayPath) {
                if (esgst.gc_b && GM_getValue(`LastBundleSync`, 0)) {
                    var table = document.getElementsByClassName(`js__autocomplete-data`)[0];
                    if (table) {
                        var backup = table.innerHTML;
                        var games = JSON.parse(GM_getValue(`games`));
                        window.setInterval(function () {
                            if (table.innerHTML && (backup != table.innerHTML)) {
                                var matches = table.getElementsByClassName(`table__column--width-fill`);
                                for (var i = 0, n = matches.length; i < n; ++i) {
                                    var info = getGameInfo(matches[i]);
                                    var id = info.id;
                                    var type = info.type;
                                    if (games[type][id] && ((esgst.gc_b_r && !games[type][id].bundled) || (!esgst.gc_b_r && games[type][id].bundled))) {
                                        var text;
                                        if (games[type][id].bundled) {
                                            text = `Bundled`;
                                        } else {
                                            text = `Not Bundled`;
                                        }
                                        if (!matches[i].parentElement.getElementsByClassName(`esgst-gc bundled`)[0]) {
                                            var html = `
<div class="nav__notification esgst-gc bundled">${text}</div>
`;
                                            matches[i].insertAdjacentHTML(`beforeEnd`, html);
                                        }
                                    }
                                }
                                backup = table.innerHTML;
                            }
                        }, 500);
                    }
                }
            } else if (!esgst.menuPath) {
                esgst.gameFeatures.push(function (games) {
                    getGcGames(games.apps, `apps`);
                    getGcGames(games.subs, `subs`);
                });
            }
    }

    function getGcGames(games, type) {
        var i, id, ids, n, savedGames;
        ids = Object.keys(games);
        for (id in games) {
            for (i = 0, n = games[id].length; i < n; ++i) {
                if (!games[id][i].container.getElementsByClassName(`esgst-gc-panel`)[0] && ((games[id][i].table && esgst.gc_t) || !games[id][i].table)) {
                    games[id][i].heading.insertAdjacentHTML(`afterEnd`, `<div class="esgst-gc-panel"></div>`);
                }
            }
        }
        savedGames = JSON.parse(GM_getValue(`games`));
        var gc = {
            count: 0
        };
        for (i = 0, n = ids.length; i < n; ++i) {
            addGcCategories(games, gc, i, ids, savedGames, type);
        }
        window.setTimeout(checkGcComplete.bind(null, gc, savedGames, n), 1000);
    }

    function checkGcComplete(gc, savedGames, total) {
        var category, categories, giveaway, i, id, j, n, numCategories;
        if (gc.count === total) {
            categories = [`hidden`, `bundled`, `owned`, `wishlisted`, `ignored`, `removed`, `tradingCards`, `achievements`, `multiplayer`, `steamCloud`, `linux`, `mac`, `dlc`, `package`, `genres`, `rating`];
            for (i = 0, n = esgst.currentGiveaways.length; i < n; ++i) {
                giveaway = esgst.currentGiveaways[i];
                if (!giveaway.gcReady) {
                    for (j = 0, numCategories = categories.length; j < numCategories; ++j) {
                        id = categories[j];
                        category = giveaway.outerWrap.getElementsByClassName(`esgst-gc ${id}`)[0];
                        if (category) {
                            if (id === `genres`) {
                                giveaway[id] = category.textContent.toLowerCase().split(/,\s/);
                            } else if (id === `rating`) {
                                giveaway[id] = parseInt(category.firstElementChild.title.match(/(\d+)%/)[1]);
                            } else {
                                giveaway[id] = true;
                            }
                            giveaway.gcReady = true;
                        } else if (id === `rating`) {
                            giveaway[id] = 0;
                        }
                    }
                }
            }
            for (i = 0, n = esgst.popupGiveaways.length; i < n; ++i) {
                giveaway = esgst.popupGiveaways[i];
                if (!giveaway.gcReady) {
                    for (j = 0, numCategories = categories.length; j < numCategories; ++j) {
                        id = categories[j];
                        category = giveaway.outerWrap.getElementsByClassName(`esgst-gc ${id}`)[0];
                        if (category) {
                            if (id === `genres`) {
                                giveaway[id] = category.textContent.toLowerCase().split(/,\s/);
                            } else if (id === `rating`) {
                                giveaway[id] = parseInt(category.firstElementChild.title.match(/(\d+)%/)[1]);
                            } else {
                                giveaway[id] = true;
                            }
                            giveaway.gcReady = true;
                        } else if (id === `rating`) {
                            giveaway[id] = 0;
                        }
                    }
                }
            }
            if (esgst.gf && esgst.gf.filteredCount) {
                filterGfGiveaways(esgst.gf);
                if (esgst.gfPopup) {
                    filterGfGiveaways(esgst.gfPopup);
                }
            }
            createLock(`gameLock`, 300, function(deleteLock) {
                updateGames(savedGames);
                deleteLock();
            });
        } else {
            window.setTimeout(checkGcComplete.bind(null, gc, savedGames, total), 1000);
        }
    }

    function addGcCategories(games, gc, i, ids, savedGames, type) {
        var category, categories, giveaway, id, j, numCategories, url;
            id = ids[i];
            if (!savedGames[type][id] || !savedGames[type][id].price || (typeof savedGames[type][id].lastCheck === `undefined`) || ((Date.now() - savedGames[type][id].lastCheck) > 604800000)) {
                url = (type === `apps`) ? `appdetails?appids` : `packagedetails?packageids`;
                request(null, false, `http://store.steampowered.com/api/${url}=${id}&cc=us&l=en`, function (response) {
                    request(null, false, `http://store.steampowered.com/api/${url}=${id}&cc=us&l=en&filters=price,price_overview`, function (response1) {
                        if (esgst.gc_g_udt || esgst.gc_r) {
                            request(null, false, `http://store.steampowered.com/${type.slice(0, -1)}/${id}`, function (response2) {
                                getGcCategories(games, id, response, response1, response2, savedGames, type, function () {
                                    ++gc.count;
                                });
                            });
                        } else {
                            getGcCategories(games, id, response, response1, null, savedGames, type, function () {
                                ++gc.count;
                            });
                        }
                    });
                });
            } else {
                addGcCategory(games[id], savedGames[type][id], id, games[id][0].name, type);
                ++gc.count;
            }
    }

    function getGcCategories(games, id, response, response1, response2, savedGames, type, callback) {
        var appId, i, match, n, responseHtml, responseJson, responseJson1, price, summary, summaries, tag, tags;
        responseJson = JSON.parse(response.responseText)[id];
        responseJson1 = JSON.parse(response1.responseText)[id];
        if (!savedGames[type][id]) {
            savedGames[type][id] = {};
        }
        if (responseJson1.success) {
            price = responseJson1.data.price || responseJson1.data.price_overview;
            if (price && price.currency === `USD`) {
                savedGames[type][id].price = Math.ceil(price.initial / 100);
            }
        }
        if (responseJson.success) {
            if (responseJson.data.type === `dlc`) {
                savedGames[type][id].dlc = true;
            }
            if (responseJson.data.apps) {
                if (!savedGames[type][id].apps) {
                    savedGames[type][id].apps = [];
                }
                for (i = 0, n = responseJson.data.apps.length; i < n; ++i) {
                    appId = responseJson.data.apps[i].id;
                    savedGames[type][id].apps.push(appId);
                    if (savedGames.apps[appId] && savedGames.apps[appId].wishlisted) {
                        savedGames[type][id].wishlisted = true;
                    }
                }
            }
            if (responseJson.data.packages) {
                savedGames[type][id].subs = responseJson.data.packages;
                if (savedGames[type][id].wishlisted) {
                    for (i = 0, n = savedGames[type][id].subs.length; i < n; ++i) {
                        if (savedGames[type][savedGames[type][id].subs[i]]) {
                            savedGames[type][savedGames[type][id].subs[i]].wishlisted = true;
                        }
                    }
                }
            }
            savedGames[type][id].linux = responseJson.data.platforms.linux;
            savedGames[type][id].mac = responseJson.data.platforms.mac;
            if (responseJson.data.categories) {
                for (i = 0, n = responseJson.data.categories.length; i < n; ++i) {
                    if (responseJson.data.categories[i].description == `Steam Achievements`) {
                        savedGames[type][id].achievements = true;
                    } else if (responseJson.data.categories[i].description == `Steam Trading Cards`) {
                        savedGames[type][id].tradingCards = true;
                    } else if (responseJson.data.categories[i].description == `Multi-player`) {
                        savedGames[type][id].multiplayer = true;
                    } else if (responseJson.data.categories[i].description == `Steam Cloud`) {
                        savedGames[type][id].steamCloud = true;
                    }
                }
            }
            if (responseJson.data.genres) {
                savedGames[type][id].genres = [];
                for (i = 0, n = responseJson.data.genres.length; i < n; ++i) {
                    savedGames[type][id].genres.push(responseJson.data.genres[i].description);
                }
            }
        } else if (!response2) {
            savedGames[type][id].removed = true;
        }
        if (response2) {
            if (response2.finalUrl.match(id)) {
                responseHtml = DOM.parse(response2.responseText);
                tags = responseHtml.querySelectorAll(`a.app_tag`);
                n = tags.length;
                if (n > 0) {
                    if (!savedGames[type][id].genres) {
                        savedGames[type][id].genres = [];
                    }
                    for (i = 0; i < n; ++i) {
                        tag = tags[i].textContent.trim();
                        if (savedGames[type][id].genres.indexOf(tag) < 0) {
                            savedGames[type][id].genres.push(tag);
                        }
                    }
                }
                summaries = responseHtml.getElementsByClassName(`user_reviews_summary_row`);
                n = summaries.length;
                if (n > 0) {
                    summary = summaries[n - 1];
                    match = summary.getAttribute(`data-store-tooltip`).replace(/,/g, ``).match(/(\d+?)%.*?(\d+)/);
                    if (match) {
                        summary = summary.getElementsByClassName(`game_review_summary`)[0];
                        summary.classList.remove(`game_review_summary`);
                        savedGames[type][id].rating = {
                            count: `${match[1]}% (${match[2]} Reviews)`,
                            type: summary.className || `negative`
                        };
                        savedGames[type][id].genres.sort(function (a, b) {
                            return a.toLowerCase().localeCompare(b.toLowerCase());
                        });
                    }
                }
            } else {
                savedGames[type][id].removed = true;
            }
        }
        if (savedGames[type][id].genres && savedGames[type][id].genres.indexOf(`Early Access`) >= 0) {
            savedGames[type][id].earlyAccess = true;            
        }
        savedGames[type][id].lastCheck = Date.now();
        addGcCategory(games[id], savedGames[type][id], id, games[id][0].name, type);
        callback();
    }

    function addGcCategory(games, savedGames, id, name, type) {
        var categories, category, html, i, icon, j, n, numGames, panel, text, nname, ttype, value;
        ttype = type.slice(0, -1);
        nname = encodeURIComponent(name.replace(/\.\.\.$/, ``));
        categories = [
            {
                id: `gc_h`,
                key: `hidden`,
                link: `https://www.steamgifts.com/account/settings/giveaways/filters/search?q=${nname}`,
                name: `Hidden`,
                simplified: `H`,
                icon: `fa-eye-slash`
            },
            {
                id: `gc_gi`,
                key: `giveawayInfo`,
                link: `https://www.steamgifts.com/user/${esgst.username}`
            },
            {
                id: `gc_r`,
                key: `rating`,
                link: `http://store.steampowered.com/${ttype}/${id}`,
                name: `Name`
            },
            {
                id: `gc_b`,
                key: `bundled`,
                link: `https://www.steamgifts.com/bundle-games/search?q=${nname}`,
                name: `Bundled`,
                simplified: `B`,
                icon: `fa-recycle`
            },
            {
                id: `gc_b_r`,
                key: `bundled`,
                link: `https://www.steamgifts.com/bundle-games/search?q=${nname}`,
                name: `Not Bundled`,
                simplified: `NB`,
                icon: `fa-fire`
            },
            {
                id: `gc_o`,
                key: `owned`,
                link: `https://www.steamgifts.com/account/steam/games/search?q=${nname}`,
                name: `Owned`,
                simplified: `O`,
                icon: `fa-folder`
            },
            {
                id: `gc_w`,
                key: `wishlisted`,
                link: `https://www.steamgifts.com/account/steam/wishlist/search?q=${nname}`,
                name: `Wishlisted`,
                simplified: `W`,
                icon: `fa-heart`
            },
            {
                id: `gc_i`,
                key: `ignored`,
                link: `http://store.steampowered.com/${ttype}/${id}`,
                name: `Ignored`,
                simplified: `I`,
                icon: `fa-ban`
            },
            {
                id: `gc_rm`,
                key: `removed`,
                link: `http://steamdb.info/${ttype}/${id}`,
                name: `Removed`,
                simplified: `R`,
                icon: `fa-trash`
            },
            {
                id: `gc_ea`,
                key: `earlyAccess`,
                link: `http://store.steampowered.com/${ttype}/${id}`,
                name: `Early Access`,
                simplified: `EA`,
                icon: `fa-unlock`
            },
            {
                id: `gc_tc`,
                key: `tradingCards`,
                link: `http://www.steamcardexchange.net/index.php?gamepage-${ttype}id-${id}`,
                name: `Trading Cards`,
                simplified: `TC`,
                icon: `fa-clone`
            },
            {
                id: `gc_a`,
                key: `achievements`,
                link: `http://steamcommunity.com/stats/${id}/achievements`,
                name: `Achievements`,
                simplified: `A`,
                icon: `fa-trophy`
            },
            {
                id: `gc_mp`,
                key: `multiplayer`,
                link: `http://store.steampowered.com/${ttype}/${id}`,
                name: `Multiplayer`,
                simplified: `MP`,
                icon: `fa-users`
            },
            {
                id: `gc_sc`,
                key: `steamCloud`,
                link: `http://store.steampowered.com/${ttype}/${id}`,
                name: `Steam Cloud`,
                simplified: `SC`,
                icon: `fa-cloud`
            },
            {
                id: `gc_l`,
                key: `linux`,
                link: `http://store.steampowered.com/${ttype}/${id}`,
                name: `Linux`,
                simplified: `L`,
                icon: `fa-linux`
            },
            {
                id: `gc_m`,
                key: `mac`,
                link: `http://store.steampowered.com/${ttype}/${id}`,
                name: `Mac`,
                simplified: `M`,
                icon: `fa-apple`
            },
            {
                id: `gc_dlc`,
                key: `dlc`,
                link: `http://store.steampowered.com/${ttype}/${id}`,
                name: `DLC`,
                simplified: `DLC`,
                icon: `fa-download`
            },
            {
                id: `gc_p`,
                key: `package`,
                link: `http://store.steampowered.com/${ttype}/${id}`,
                name: `Package`,
                simplified: `P`,
                icon: `fa-suitcase`
            },
            {
                id: `gc_g`,
                key: `genres`,
                link: `http://store.steampowered.com/${ttype}/${id}`,
                name: `Genres`
            }
        ];
        html = ``;
        for (i = 0, n = categories.length - 1; i <= n; ++i) {
            category = categories[i];
            if (esgst[category.id] && ((category.id == `gc_b` && esgst.newGiveawayPath) || !esgst.newGiveawayPath) && ((category.id == `gc_b` && !esgst.gc_b_r) || (category.id != `gc_b`))) {
                if (category.id === `gc_p`) {
                    if (type === `subs`) {
                        value = true;
                    } else {
                        value = false;
                    }
                } else if (category.id === `gc_gi`) {
                    value = true;
                } else {
                    value = savedGames[category.key];
                }
                if ((value && category.id != `gc_b_r`) || (!value && category.id == `gc_b_r` && esgst.gc_b)) {
                    var title = ``;
                    text = ``;
                    if (category.key === `giveawayInfo`) {
                        var user = esgst.users.users[esgst.steamId];
                        if (user) {
                            var ugd = user.ugd;
                            if (ugd) {
                                var giveaways = ugd.sent[type][id], value, cv;
                                if (giveaways) {
                                    var count = 0;
                                    var sent = 0;
                                    var k, numGiveaways;
                                    for (var k = 0, numGiveaways = giveaways.length; k < numGiveaways; ++k) {
                                        var giveaway = giveaways[k];
                                        if (((giveaways.entries < 5) && !giveaway.inviteOnly && !giveaway.group && !giveaway.whitelist) || (giveaway.entries >= 5)) {
                                            if (giveaway.entries >= giveaway.copies) {
                                                sent += giveaway.copies;
                                            } else {
                                                sent += giveaway.entries;
                                            }
                                        }
                                        if (giveaway.winners > 0) {
                                            count += giveaway.winners;
                                        }
                                    }
                                    value = savedGames.price;
                                    if (savedGames.bundled) {
                                        value *= 0.15;
                                    }
                                    if (sent > 5) {
                                        for (k = 0, numGiveaways = sent - 5; k < numGiveaways; ++k) {
                                            value *= 0.90;
                                        }
                                    }
                                    cv;
                                    if ((sent + 1) > 5) {
                                        cv = value * 0.90;
                                    } else {
                                        cv = value;
                                    }
                                    cv = Math.round(cv * 100) / 100;
                                    text = `
                                        <i class="fa fa-info"></i> ${count}
                                        <i class="fa fa-dollar"></i> ${cv}
                                    `;
                                    title = `You have made ${count} giveaways for this game.`;
                                    title += ` You should get \$${cv} real CV if you make a giveaway for this game.`;
                                } else {
                                    value = savedGames.price;
                                    if (savedGames.bundled) {
                                        value *= 0.15;
                                    }
                                    cv = Math.round(value * 100) / 100;
                                    text = `
                                        <i class="fa fa-info"></i> 0
                                        <i class="fa fa-dollar"></i> ${cv}
                                    `;
                                    title = `You have made 0 giveaways for this game.`;
                                    title += ` You should get \$${cv} real CV if you make a giveaway for this game.`;
                                }
                            }
                        }
                    } else if (category.key === `genres`) {
                        text = value.join(`, `);
                        title = text;
                    } else if (category.key == `rating`) {
                        if (savedGames.rating.type === `positive`) {
                            icon = `fa-thumbs-up`;
                        } else if (savedGames.rating.type === `mixed`) {
                            icon = `fa-minus-circle`;
                        } else {
                            icon = `fa-thumbs-down`;
                        }
                        text = `
                            <span title="${savedGames.rating.count}">
                                <i class="fa ${icon}" title="${savedGames.rating.count}"></i>
                        `;
                        if (esgst.gc_r_s) {
                            text += `
                                    <span>${savedGames.rating.count}</span>
                                </span>
                            `;
                        } else {
                            text += `
                                </span>
                            `;
                        }
                        category.key += ` ${savedGames.rating.type}`;
                    } else if (esgst.gc_s) {
                        if (esgst.gc_s_i && category.icon) {
                            text = `<i class="fa ${category.icon}" title="${category.name}"></i>`;
                        } else {
                            text = `<span title="${category.name}">${category.simplified}</span>`;
                        }
                    } else {
                        text = category.name;
                    }
                    if (text) {
                        html += `
                            <a class="nav__notification esgst-gc ${category.key}" href="${category.link}" title="${title}">${text}</a>
                        `;
                    }
                }
            }
        }
        for (j = 0, numGames = games.length; j < numGames; ++j) {
            panel = games[j].container.getElementsByClassName(`esgst-gc-panel`)[0];
            if (panel && !panel.innerHTML) {
                if (esgst.gc_s && !esgst.giveawayPath) {
                    panel.previousElementSibling.style.display = `inline-block`;
                    panel.classList.add(`simplified`);
                }
                panel.innerHTML = html;
            }
        }
    }

    /* [MT] Multi-Tag */

    function loadMultiTag() {
        if (Object.keys(esgst.currentUsers).length) {
            addMTContainer(esgst.mainPageHeading);
        }
    }

    function addMTContainer(Context, MT, SM) {
        var MTContainer, MTButton, MTBox, MTUsers, MTGames, MTAll, MTNone, MTInverse, MTUsersCheckbox, MTGamesCheckbox, Popup;
        if (!MT) {
            MT = {};
        }
        MT.UserCheckboxes = {};
        MT.GameCheckboxes = {};
        MT.UsersSelected = [];
        MT.GamesSelected = [];
        Context.insertAdjacentHTML(
            "afterBegin",
            "<div class=\"MTContainer" + (SM ? " rhHidden" : "") + "\">" +
            "    <a class=\"MTButton page_heading_btn\" title=\"Tag multiple users / games at the same times\">" +
            "        <i class=\"fa fa-tags\"></i>" +
            "    </a>" +
            "</div>"
        );
        MTContainer = Context.firstElementChild;
        MTButton = MTContainer.firstElementChild;
        MTBox = createPopout(MTContainer);
        MTBox.Popout.classList.add("MTBox");
        MTBox.customRule = function (Target) {
            return (!MTContainer.contains(Target) && !Target.closest(".MTUserCheckbox") && !Target.closest(".MTGameCheckbox"));
        };
        Context = SM ? SM.Popup.Options : MTBox.Popout;
        Context.innerHTML =
            "<div" + ((GM_getValue("PUT") && !SM) ? "" : " class=\"rhHidden\"") + "><span class=\"MTUsers\"></span> Enable selection for user tags.</div>" +
            "<div" + ((GM_getValue("GT") && !SM) ? "" : " class=\"rhHidden\"") + "><span class=\"MTGames\"></span> Enable selection for game tags.</div>" +
            "<div><i class=\"fa fa-check-square-o MTAll\"></i> Select all.</div>" +
            "<div><i class=\"fa fa-square-o\ MTNone\"></i> Select none.</div>" +
            "<div><i class=\"fa fa-minus-square-o MTInverse\"></i> Select inverse.</div>" +
            "<div><span class=\"MTCount\">0</span> selected.</div>" +
            "<div class=\"MTTag\"></div>";
        MTUsers = Context.getElementsByClassName("MTUsers")[0];
        MTGames = Context.getElementsByClassName("MTGames")[0];
        MTAll = Context.getElementsByClassName("MTAll")[0];
        MTNone = Context.getElementsByClassName("MTNone")[0];
        MTInverse = Context.getElementsByClassName("MTInverse")[0];
        MT.Count = Context.getElementsByClassName("MTCount")[0];
        MT.Tag = Context.getElementsByClassName("MTTag")[0];
        MTUsersCheckbox = createCheckbox(MTUsers);
        MTGamesCheckbox = createCheckbox(MTGames);
        setMTCheckboxes(MTUsers, MTUsersCheckbox.Checkbox, esgst.currentUsers, "User", "beforeBegin", "previousElementSibling", MT);
        setMTCheckboxes(MTGames, MTGamesCheckbox.Checkbox, esgst.currentGames, "Game", "afterBegin", "firstElementChild", MT);
        setMTSelect(MTAll, MT, "check");
        setMTSelect(MTNone, MT, "uncheck");
        setMTSelect(MTInverse, MT, "toggle");
        MT.Tag.classList.add("rhHidden");
        Popup = createPopup();
        Popup.Icon.classList.add("fa-tags");
        Popup.TextInput.classList.remove("rhHidden");
        Popup.TextInput.insertAdjacentHTML(
            "afterEnd",
            createDescription(
                "Use commas to separate tags, for example: Tag1, Tag2, ...<br/><br/>" +
                "A [*] tag means that the selected users / games have individual tags (not shared between all of them). Removing the [*] tag will delete those individual tags."
            )
        );
        createButton(MT.Tag, "fa-tags", "Multi-Tag", "", "", function (Callback) {
            var Tags, Shared, I, N, UserID, User, SavedUser, SavedTags, J, NumTags, SavedTag, SavedGames, SavedGame, Game, Key, Individual;
            Callback();
            if (!MTButton.classList.contains("esgst-busy")) {
                Popup.Title.textContent = "Multi-tag " + MT.UsersSelected.length + " users and " + MT.GamesSelected.length + " games:";
                Tags = {};
                MT.UserTags = {};
                Shared = [];
                for (I = 0, N = MT.UsersSelected.length; I < N; ++I) {
                    UserID = MT.UsersSelected[I];
                    User = {};
                    User[esgst.sg ? "Username" : "SteamID64"] = UserID;
                    SavedUser = getUser(User);
                    if (SavedUser && SavedUser.Tags) {
                        SavedTags = SavedUser.Tags.split(/,\s/);
                        Tags[UserID] = MT.UserTags[UserID] = SavedTags;
                        for (J = 0, NumTags = SavedTags.length; J < NumTags; ++J) {
                            SavedTag = SavedTags[J];
                            if (Shared.indexOf(SavedTag) < 0) {
                                Shared.push(SavedTag);
                            }
                        }
                    } else {
                        Tags[UserID] = MT.UserTags[UserID] = "";
                    }
                }
                SavedGames = GM_getValue("Games");
                MT.GameTags = {};
                for (I = 0, N = MT.GamesSelected.length; I < N; ++I) {
                    Game = MT.GamesSelected[I];
                    SavedGame = SavedGames[Game];
                    if (SavedGame && SavedGame.Tags) {
                        SavedTags = SavedGame.Tags.split(/,\s/);
                        Tags[Game] = MT.GameTags[Game] = SavedTags;
                        for (J = 0, NumTags = SavedTags.length; J < NumTags; ++J) {
                            SavedTag = SavedTags[J];
                            if (Shared.indexOf(SavedTag) < 0) {
                                Shared.push(SavedTag);
                            }
                        }
                    } else {
                        Tags[Game] = MT.GameTags[Game] = "";
                    }
                }
                for (Key in Tags) {
                    Shared = Shared.filter(function (N) {
                        if (Tags[Key].indexOf(N) >= 0) {
                            return true;
                        } else {
                            Individual = true;
                            return false;
                        }
                    });
                }
                for (Key in Tags) {
                    for (I = 0, N = Shared.length; I < N; ++I) {
                        J = Tags[Key].indexOf(Shared[I]);
                        if (J >= 0) {
                            Tags[Key].splice(J, 1);
                        }
                    }
                }
                Popup.TextInput.value = Shared.length ? (Shared.join(", ") + (Individual ? ", [*]" : "")) : (Individual ? "[*]" : "");
            }
            Popup.popUp(function () {
                Popup.TextInput.focus();
            });
        });
        createButton(Popup.Button, "fa-check", "Save", "fa-times-circle", "Cancel", function (Callback) {
            var Shared, I, Individual, Keys;
            MT.Canceled = false;
            MTButton.classList.add("esgst-busy");
            Shared = Popup.TextInput.value.replace(/(,\s*)+/g, function (Match, P1, Offset, String) {
                return (((Offset === 0) || (Offset == (String.length - Match.length))) ? "" : ", ");
            }).split(", ");
            I = Shared.indexOf("[*]");
            if (I >= 0) {
                Shared.splice(I, 1);
                Individual = true;
            } else {
                Individual = false;
            }
            Shared = Shared.join(", ");
            Keys = Object.keys(MT.UserTags);
            saveMTUserTags(MT, 0, Keys.length, Keys, Individual, Shared, MT.UserTags, function () {
                Keys = Object.keys(MT.GameTags);
                saveMTGameTags(MT, 0, Keys.length, Keys, Individual, Shared, MT.GameTags, function () {
                    MTButton.classList.remove("esgst-busy");
                    MT.Progress.innerHTML = MT.OverallProgress.innerHTML = "";
                    Callback();
                    Popup.Close.click();
                });
            });
        }, function () {
            clearInterval(MT.Request);
            clearInterval(MT.Save);
            MT.Canceled = true;
            setTimeout(function () {
                MT.Progress.innerHTML = MT.OverallProgress.innerHTML = "";
            }, 500);
            MTButton.classList.remove("esgst-busy");
        });
        MT.Progress = Popup.Progress;
        MT.OverallProgress = Popup.OverallProgress;
        MTButton.addEventListener("click", function () {
            if (MTBox.Popout.classList.contains("rhHidden")) {
                MTBox.popOut(MTContainer);
            } else {
                MTBox.Popout.classList.add("rhHidden");
            }
        });
    }

    function setMTCheckboxes(Element, Checkbox, Selection, Type, InsertionPosition, Position, MT) {
        Element.addEventListener("click", function () {
            if (Checkbox.checked) {
                addMTCheckboxes(Selection, Type, InsertionPosition, Position, MT);
            } else {
                removeMTCheckboxes(Type, MT);
            }
        });
    }

    function addMTCheckboxes(Selection, Type, InsertionPosition, Position, MT) {
        var Key, Matches, I, N, Context, MTCheckbox;
        for (Key in Selection) {
            Matches = Selection[Key];
            for (I = 0, N = Matches.length; I < N; ++I) {
                Context = Matches[I];
                Context.insertAdjacentHTML(InsertionPosition, "<span class=\"MT" + Type + "Checkbox\"></span>");
                MTCheckbox = createCheckbox(Context[Position]);
                if (!MT[Type + "Checkboxes"][Key]) {
                    MT[Type + "Checkboxes"][Key] = [];
                }
                MT[Type + "Checkboxes"][Key].push(MTCheckbox);
                setMTCheckbox(Type, Context[Position], MT, Key, MTCheckbox.Checkbox, MT.Tag);
            }
        }
    }

    function setMTCheckbox(Type, Context, MT, Key, Checkbox) {
        Context.addEventListener("click", function () {
            checkMTCheckbox(MT, Type, Key, Checkbox);
        });
    }

    function checkMTCheckbox(MT, Type, Key, Checkbox) {
        var Count, I, Checkboxes, N;
        Count = parseInt(MT.Count.textContent);
        I = MT[Type + "sSelected"].indexOf(Key);
        if (Checkbox.checked) {
            MT.Count.textContent = ++Count;
            if (I < 0) {
                MT[Type + "sSelected"].push(Key);
            }
        } else {
            MT.Count.textContent = --Count;
            if (I >= 0) {
                MT[Type + "sSelected"].splice(I, 1);
            }
        }
        Checkboxes = MT[Type + "Checkboxes"][Key];
        for (I = 0, N = Checkboxes.length; I < N; ++I) {
            if (Checkboxes[I].Checkbox != Checkbox) {
                Checkboxes[I].toggle();
            }
        }
        MT.Tag.classList[(Count > 1) ? "remove" : "add"]("rhHidden");
    }

    function removeMTCheckboxes(Type, MT) {
        var Matches, I, N;
        Matches = document.getElementsByClassName("MT" + Type + "Checkbox");
        for (I = 0, N = Matches.length; I < N; ++I) {
            Matches[0].remove();
        }
        MT[Type + "Checkboxes"] = {};
        MT[Type + "sSelected"] = [];
    }

    function setMTSelect(Element, MT, Call) {
        Element.addEventListener("click", function () {
            selectMTCheckboxes(MT.UserCheckboxes, Call, MT, "User");
            selectMTCheckboxes(MT.GameCheckboxes, Call, MT, "Game");
        });
    }

    function selectMTCheckboxes(MTCheckboxes, Call, MT, Type) {
        var Key, Checkbox, Previous, Current;
        for (Key in MTCheckboxes) {
            Checkbox = MTCheckboxes[Key][0];
            Previous = Checkbox.Checkbox.checked;
            Checkbox[Call]();
            Current = Checkbox.Checkbox.checked;
            if (Previous != Current) {
                checkMTCheckbox(MT, Type, Key, Checkbox.Checkbox);
            }
        }
    }

    function saveMTUserTags(MT, I, N, Keys, Individual, Shared, Tags, Callback) {
        var UserID, User;
        if (!MT.Canceled) {
            MT.OverallProgress.innerHTML =
                "<i class=\"fa fa-circle-o-notch fa-spin\"></i> " +
                "<span>" + I + " of " + N + " users tagged...</span>";
            if (I < N) {
                UserID = Keys[I];
                User = {
                    Tags: Individual ? (Shared + ", " + Tags[UserID]) : Shared
                };
                User[esgst.sg ? "Username" : "SteamID64"] = UserID;
                queueSave(MT, function () {
                    saveUser(User, MT, function () {
                        GM_setValue("LastSave", 0);
                        addPUTTags(UserID, getUser(User).Tags);
                        setTimeout(saveMTUserTags, 0, MT, ++I, N, Keys, Individual, Shared, Tags, Callback);
                    });
                });
            } else {
                Callback();
            }
        }
    }

    function saveMTGameTags(MT, I, N, Keys, Individual, Shared, Tags, Callback) {
        var Game, SavedGames;
        if (!MT.Canceled) {
            MT.OverallProgress.innerHTML =
                "<i class=\"fa fa-circle-o-notch fa-spin\"></i> " +
                "<span>" + I + " of " + N + " groups tagged...</span>";
            if (I < N) {
                Game = Keys[I];
                SavedGames = GM_getValue("Games");
                if (!SavedGames[Game]) {
                    SavedGames[Game] = {};
                }
                SavedGames[Game].Tags = Individual ? (Shared + ", " + Tags[Game]) : Shared;
                GM_setValue("Games", SavedGames);
                addGTTags(Game, SavedGames[Game].Tags);
                setTimeout(saveMTGameTags, 0, MT, ++I, N, Keys, Individual, Shared, Tags, Callback);
            } else {
                Callback();
            }
        }
    }

    /* */

    function loadSMMenu(context) {
        var Selected, Item, SMSyncFrequency, I, Container, SMGeneral, SMGiveaways, SMDiscussions, SMCommenting, SMUsers, SMOthers, SMManageData, SMManageFilteredUsers, SMRecentUsernameChanges,
            SMCommentHistory, SMManageTags, SMGeneralFeatures, SMGiveawayFeatures, SMDiscussionFeatures, SMCommentingFeatures, SMUserGroupGamesFeatures, SMOtherFeatures,
            SMLastSync, LastSync, SMAPIKey, SMLastBundleSync, LastBundleSync;
        var popup = createPopup_v6(`fa-gear`, `Settings`, true);
        popup.description.classList.add(`esgst-text-left`);
        SMSyncFrequency = "<select class=\"SMSyncFrequency\">";
        for (I = 0; I <= 30; ++I) {
            SMSyncFrequency += "<option>" + I + "</option>";
        }
        SMSyncFrequency += "</select>";
        Container = popup.description;
        Container.innerHTML =
            "<div class=\"page__heading\">" +
            "</div>" +
            "<div class=\"form__rows SMMenu\"></div>";
        var heading = Container.getElementsByClassName(`page__heading`)[0];
        createSMButtons(heading, [{
            Check: true,
            Icons: ["fa-arrow-circle-up", "fa-arrow-circle-down", "fa-trash"],
            Name: "SMManageData",
            Title: "Manage data."
        }, {
            Check: esgst.uf,
            Icons: ["fa-user", "fa-eye-slash"],
            Name: "SMManageFilteredUsers",
            Title: "See list of filtered users."
        }, {
            Check: false,
            Icons: ["fa-tags", "fa-cog"],
            Name: "SMManageTags",
            Title: "Manage tags."
        }, {
            Check: esgst.wbc,
            Icons: ["fa-heart", "fa-ban", "fa-cog"],
            Name: "esgst-wbc-button",
            Title: "Manage Whitelist / Blacklist Checker caches."
        }, {
            Check: esgst.namwc,
            Icons: ["fa-trophy", "fa-cog"],
            Name: "esgst-namwc-button",
            Title: "Manage Not Activated / Multiple Wins Checker caches."
        }]);
        var SMMenu = Container.getElementsByClassName(`SMMenu`)[0];
        var sections = {
            general: {
                index: 1
            },
            giveaways: {
                index: 1
            },
            discussions: {
                index: 1
            },
            comments: {
                index: 1
            },
            users: {
                index: 1
            },
            groups: {
                index: 1
            },
            games: {
                index: 1
            },
            other: {
                index: 1
            }
        };
        var j = 0;
        for (var key in sections) {
            var title = key.replace(/^./, function (m) {
                return m.toUpperCase();
            });
            sections[key].section = insertHtml(SMMenu, `beforeEnd`, `
                ${createSMSections(++j, [{
                    Title: title
                }])}
            `);
        }
        for (var i = 0, n = esgst.features.length; i < n; ++i) {
            var feature = esgst.features[i];
            if (feature.type) {
                var ft = getSMFeature(feature, sections[feature.type].index);
                if (ft) {
                    sections[feature.type].section.lastElementChild.appendChild(ft);
                    ++sections[feature.type].index;
                }
            }
        }
        SMMenu.insertAdjacentHTML(`beforeEnd`,
            createSMSections(++j, [{
                Title: "Sync Groups / Whitelist / Blacklist / Wishlist / Owned Games / Ignored Games",
                HTML: SMSyncFrequency + createDescription("Select from how many days to how many days you want the automatic sync to run (0 to disable it).") + (
                    "<div class=\"form__sync\">" +
                    "    <div class=\"form__sync-data\">" +
                    "        <div class=\"notification notification--warning SMLastSync\">" +
                    "            <i class=\"fa fa-question-circle\"></i> Never synced." +
                    "        </div>" +
                    "    </div>" +
                    "    <div class=\"form__submit-button SMSync\">" +
                    "        <i class=\"fa fa-refresh\"></i> Sync" +
                    "    </div>" +
                    "</div>"
                )
            },
            {
                Title: "Sync Bundle List",
                HTML: (
                    "<div class=\"form__sync\">" +
                    "    <div class=\"form__sync-data\">" +
                    "        <div class=\"notification notification--warning SMLastBundleSync\">" +
                    "            <i class=\"fa fa-question-circle\"></i> Never synced." +
                    "        </div>" +
                    "    </div>" +
                    "    <div class=\"form__submit-button SMBundleSync\">" +
                    "        <i class=\"fa fa-refresh\"></i> Sync" +
                    "    </div>" +
                    "</div>"
                )
            }, {
                Title: "Steam API Key",
                HTML: "<input class=\"SMAPIKey\" type=\"text\"/>" +
                createDescription("This is optional for Entries Remover (syncs new games faster). " +
                    "Get a Steam API Key <a class=\"rhBold\" href=\"https://steamcommunity.com/dev/apikey\" target=\"_blank\">here</a>.")
            }]));
        SMManageData = Container.getElementsByClassName("SMManageData")[0];
        SMRecentUsernameChanges = Container.getElementsByClassName("SMRecentUsernameChanges")[0];
        SMManageFilteredUsers = Container.getElementsByClassName("SMManageFilteredUsers")[0];
        SMManageTags = Container.getElementsByClassName("SMManageTags")[0];
        SMSyncFrequency = Container.getElementsByClassName("SMSyncFrequency")[0];
        if (esgst.wbc) {
            addWBCButton(null, Container.getElementsByClassName("esgst-wbc-button")[0]);
        }
        var SMNAMWCButton = Container.getElementsByClassName("esgst-namwc-button")[0];
        if (esgst.namwc) {
            setNAMWCPopup(SMNAMWCButton, null, true);
        }
        SMLastSync = Container.getElementsByClassName("SMLastSync")[0];
        var SMSync = Container.getElementsByClassName("SMSync")[0];
        SMLastBundleSync = Container.getElementsByClassName("SMLastBundleSync")[0];
        SMAPIKey = Container.getElementsByClassName("SMAPIKey")[0];
        SMSyncFrequency.selectedIndex = esgst.syncFrequency;
        LastSync = esgst.lastSync;
        if (LastSync) {
            SMLastSync.classList.remove("notification--warning");
            SMLastSync.classList.add("notification--success");
            SMLastSync.innerHTML = "<i class=\"fa fa-check-circle\"></i> Last synced " + (new Date(LastSync).toLocaleString()) + ".";
        }
        SMSync.addEventListener(`click`, function () {
            SMSync.classList.add(`esgst-busy`);
            checkSync(true, function (CurrentDate) {
                SMSync.classList.remove(`esgst-busy`);
                if (CurrentDate) {
                    SMLastSync.classList.remove("notification--warning");
                    SMLastSync.classList.add("notification--success");
                    SMLastSync.innerHTML =
                        "<i class=\"fa fa-check-circle\"></i> Last synced " + CurrentDate.toLocaleString() + ".";
                }
            });
        });
        LastBundleSync = GM_getValue("LastBundleSync", 0);
        if (LastBundleSync) {
            SMLastBundleSync.classList.remove("notification--warning");
            SMLastBundleSync.classList.add("notification--success");
            SMLastBundleSync.innerHTML = "<i class=\"fa fa-check-circle\"></i> Last synced " + (new Date(LastBundleSync).toLocaleString()) + ".";
        }
        document.getElementsByClassName("SMBundleSync")[0].addEventListener("click", function () {
            if (((new Date().getTime()) - LastBundleSync) > 604800000) {
                syncBundleList(function() {
                    var current = new Date();
                    SMLastBundleSync.classList.remove("notification--warning");
                    SMLastBundleSync.classList.add("notification--success");
                    SMLastBundleSync.innerHTML =
                        "<i class=\"fa fa-check-circle\"></i> Last synced " + current.toLocaleString() + ".";
                });
            } else {
                window.alert(`You synced the bundle list in less than a week ago. You can sync only once per week.`);
            }
        });
        key = esgst.steamApiKey;
        if (key) {
            SMAPIKey.value = key;
        }
        SMSyncFrequency.addEventListener("change", function () {
            setValue(`syncFrequency`, SMSyncFrequency.selectedIndex);
        });
        SMManageData.addEventListener("click", function () {
            var Popup, SM, SMImport, SMExport, SMDelete;
            Popup = createPopup(true);
            Popup.Icon.classList.add("fa-cog");
            Popup.Title.textContent = "Manage data:";
            SM = {
                Names: {
                    users:  `U`,
                    games: `G`,
                    giveaways: `GG`,
                    groups: "GP",
                    comments: "C",
                    Emojis: "E",
                    Rerolls: "R",
                    sgCommentHistory: `CH_SG`,
                    stCommentHistory: `CH_ST`,
                    StickiedGroups: "SG",
                    templates: `T`,
                    decryptedGiveaways: "DG",
                    settings: `S`
                }
            };
            createOptions(Popup.Options, SM, [{
                Check: function () {
                    return true;
                },
                Description: "User Notes data.",
                Name: "un",
                Key: "UN",
                ID: "SM_UN"
            }, {
                Check: function () {
                    return true;
                },
                Description: "User Tags data.",
                Name: "ut",
                Key: "UT",
                ID: "SM_UT"
            }, {
                Check: function () {
                    return true;
                },
                Description: "User Giveaways Data data.",
                Name: "udg",
                Key: "UGD",
                ID: "SM_UGD"
            }, {
                Check: function () {
                    return true;
                },
                Description: "Not Activated/Multiple Wins Checker data.",
                Name: "namwc",
                Key: "NAMWC",
                ID: "SM_NAMWC"
            }, {
                Check: function () {
                    return true;
                },
                Description: "Not Received Finder data.",
                Name: "nrf",
                Key: "NRF",
                ID: "SM_NRF"
            }, {
                Check: function () {
                    return true;
                },
                Description: "Whitelist/Blacklist Checker data.",
                Name: "wbc",
                Key: "WBC",
                ID: "SM_WBC"
            }, {
                Check: function () {
                    return true;
                },
                Description: "Real Won/Sent CV Links data.",
                Name: "rwscvl",
                Key: "RWSCVL",
                ID: "SM_RWSCVL"
            }, {
                Check: function () {
                    return true;
                },
                Description: "User Filters data.",
                Name: "uf",
                Key: "UF",
                ID: "SM_UF"
            }, {
                Check: function () {
                    return true;
                },
                Description: "Game Tags data.",
                Name: "gt",
                Key: "GT",
                ID: "SM_GT"
            }, {
                Check: function () {
                    return true;
                },
                Description: "Entered Games Highlighter data.",
                Name: "egh",
                Key: "EGH",
                ID: "SM_EGH"
            }, {
                Check: function () {
                    return true;
                },
                Description: "Game Categories data.",
                Name: "gc",
                Key: "GC",
                ID: "SM_GC"
            }, {
                Check: function () {
                    return true;
                },
                Description: "Is There Any Deal? Info data.",
                Name: "itadi",
                Key: "ITADI",
                ID: "SM_ITADI"
            }, {
                Check: function () {
                    return true;
                },
                Description: "Giveaways data.",
                Title: "Includes Giveaway Groups Loader data.",
                Name: "giveaways",
                Key: "GG",
                ID: "SM_GG"
            }, {
                Check: function () {
                    return true;
                },
                Description: "Groups data.",
                Title: "Includes groups data.",
                Name: "groups",
                Key: "GP",
                ID: "SM_GP"
            }, {
                Check: function () {
                    return true;
                },
                Description: "Comments data.",
                Title: "Includes Comment Tracker & Discussion Highlighter data.",
                Name: "comments",
                Key: "C",
                ID: "SM_C"
            }, {
                Check: function () {
                    return true;
                },
                Description: "Emojis data.",
                Title: "Includes Comment Formatting Helper emojis data.",
                Name: "Emojis",
                Key: "E",
                ID: "SM_E"
            }, {
                Check: function () {
                    return true;
                },
                Description: "Rerolls data.",
                Title: "Includes Unsent Gifts Sender rerolls data.",
                Name: "Rerolls",
                Key: "R",
                ID: "SM_R"
            }, {
                Check: function () {
                    return true;
                },
                Description: "SteamGifts comment history data.",
                Title: "Includes SteamGifts' comment History data.",
                Name: "sgCommentHistory",
                Key: "CH_SG",
                ID: "SM_CH_SG"
            }, {
                Check: function () {
                    return true;
                },
                Description: "SteamTrades comment history data.",
                Title: "Includes SteamTrades' comment History data.",
                Name: "stCommentHistory",
                Key: "CH_ST",
                ID: "SM_CH_ST"
            }, {
                Check: function () {
                    return true;
                },
                Description: "Stickied groups data.",
                Title: "Includes Stickied Giveaway Groups data.",
                Name: "StickiedGroups",
                Key: "SG",
                ID: "SM_SG"
            }, {
                Check: function () {
                    return true;
                },
                Description: "Templates data.",
                Title: "Includes Giveaway Templates data.",
                Name: "templates",
                Key: "T",
                ID: "SM_T"
            }, {
                Check: function () {
                    return true;
                },
                Description: "Decrypted giveaways data.",
                Title: "Includes data from decrypted giveaways.",
                Name: "decryptedGiveaways",
                Key: "DG",
                ID: "SM_DG"
            }, {
                Check: function () {
                    return true;
                },
                Description: "Settings data.",
                Title: "Includes feature settings.",
                Name: "settings",
                Key: "S",
                ID: "SM_S"
            }, {
                Check: function () {
                    return true;
                },
                Description: "Merge current data with the imported one.",
                Title: "If unchecked, the new data will replace the current one.",
                Name: "Merge",
                Key: "M",
                ID: "SM_M"
            }]);
            Popup.Button.classList.add("SMManageDataPopup");
            Popup.Button.innerHTML =
                "<div class=\"SMImport\"></div>" +
                "<div class=\"SMExport\"></div>" +
                "<div class=\"SMDelete\"></div>";
            SMImport = Popup.Button.firstElementChild;
            SMExport = SMImport.nextElementSibling;
            SMDelete = SMExport.nextElementSibling;
            createButton(SMImport, "fa-arrow-circle-up", "Import", "", "", function (Callback) {
                Callback();
                importSMData(SM);
            });
            createButton(SMExport, "fa-arrow-circle-down", "Export", "", "", function (Callback) {
                Callback();
                exportSMData(SM);
            });
            createButton(SMDelete, "fa-trash", "Delete", "", "", function (Callback) {
                Callback();
                deleteSMData(SM);
            });
            Popup.popUp();
        });
        if (SMManageTags) {
            SMManageTags.addEventListener("click", function () {
                var Popup, MT, SMManageTagsPopup;
                Popup = createPopup(true);
                Popup.Icon.classList.add("fa-cog");
                Popup.Title.textContent = "Manage tags:";
                Popup.TextInput.classList.remove("rhHidden");
                Popup.TextInput.insertAdjacentHTML("beforeBegin", "<div class=\"page__heading\"></div>");
                MT = {};
                addMTContainer(Popup.TextInput.previousElementSibling, MT, {
                    Popup: Popup
                });
                Popup.TextInput.insertAdjacentHTML(
                    "afterEnd",
                    createDescription("Filter users by tag (use commas to separate filters, for example: Filter1, Filter2, ...). Filters are not case sensitive.")
                );
                SMManageTagsPopup = Popup.popUp(function () {
                    var SavedGames, SavedUsers, MTApps, MTSubs, MTUsers, Tags, I, N, Context, Username, SavedTags, J, NumTags, Key;
                    Popup.TextInput.focus();
                    SavedUsers = JSON.parse(GM_getValue(`users`));
                    SavedGames = JSON.parse(GM_getValue(`games`));
                    MTUsers = {};MTApps = {}; MTSubs = {};
                    Tags = {};
                    for (I in SavedUsers.users) {
                        if (SavedUsers.users[I].tags && SavedUsers.users[I].tags.length) {
                            Popup.Results.insertAdjacentHTML(
                                "beforeEnd",
                                "<div>" +
                                "    <a href=\"/user/" + SavedUsers.users[I].username + "\">" + SavedUsers.users[I].username + "</a>" +
                                "</div>"
                            );
                            Context = Popup.Results.lastElementChild.firstElementChild;
                            Username = SavedUsers.users[I].username;
                            if (!MTUsers[Username]) {
                                MTUsers[Username] = [];
                            }
                            MTUsers[Username].push(Context);
                            SMManageTagsPopup.reposition();
                            SavedTags = SavedUsers.users[I].tags;
                            for (J = 0, NumTags = SavedTags.length; J < NumTags; ++J) {
                                Key = SavedTags[J].toLowerCase();
                                if (!Tags[Key]) {
                                    Tags[Key] = [];
                                }
                                Tags[Key].push(Popup.Results.children.length - 1);
                            }
                        }
                    }
                    for (I in SavedGames.apps) {
                        if (SavedGames.apps[I].tags && SavedGames.apps[I].tags) {
                            Popup.Results.insertAdjacentHTML(
                                "beforeEnd",
                                "<div>" +
                                "    <div class=\"table__row-outer-wrap\"><a class=\"table__column__heading\" href=\"https://store.steampowered.com/app/" + I + "\">App: " + I + "</a></div>" +
                                "</div>"
                            );
                            Context = Popup.Results.lastElementChild.firstElementChild;
                            if (!MTApps[I]) {
                                MTApps[I] = [];
                            }
                            MTApps[I].push(Context);
                            SMManageTagsPopup.reposition();
                            SavedTags = SavedGames.apps[I].tags;
                            for (J = 0, NumTags = SavedTags.length; J < NumTags; ++J) {
                                Key = SavedTags[J].toLowerCase();
                                if (!Tags[Key]) {
                                    Tags[Key] = [];
                                }
                                Tags[Key].push(Popup.Results.children.length - 1);
                            }
                        }
                    }
                    for (I in SavedGames.subs) {
                        if (SavedGames.subs[I].tags && SavedGames.subs[I].tags) {
                            Popup.Results.insertAdjacentHTML(
                                "beforeEnd",
                                "<div>" +
                                "    <div class=\"table__row-outer-wrap\"><a class=\"table__column__heading\" href=\"https://store.steampowered.com/sub/" + I + "\">Sub: " + I + "</a></div>" +
                                "</div>"
                            );
                            Context = Popup.Results.lastElementChild.firstElementChild;
                            if (!MTSubs[I]) {
                                MTSubs[I] = [];
                            }
                            MTSubs[I].push(Context);
                            SMManageTagsPopup.reposition();
                            SavedTags = SavedGames.subs[I].tags;
                            for (J = 0, NumTags = SavedTags.length; J < NumTags; ++J) {
                                Key = SavedTags[J].toLowerCase();
                                if (!Tags[Key]) {
                                    Tags[Key] = [];
                                }
                                Tags[Key].push(Popup.Results.children.length - 1);
                            }
                        }
                    }
                    addMTCheckboxes(MTUsers, "User", "beforeBegin", "previousElementSibling", MT);
                    addMTCheckboxes(MTApps, "Game", "beforeBegin", "previousElementSibling", MT);
                    addMTCheckboxes(MTSubs, "Game", "beforeBegin", "previousElementSibling", MT);
                    loadEndlessFeatures(Popup.Results);
                    Popup.TextInput.addEventListener("input", function () {
                        var MTUsers, Matches, Filters, Context, Username;
                        selectMTCheckboxes(MT.UserCheckboxes, "uncheck", MT, "User");
                        removeMTCheckboxes("User", MT);
                        MTUsers = {};
                        Matches = Popup.Results.getElementsByClassName("SMTag");
                        for (I = 0, N = Matches.length; I < N; ++I) {
                            if (Matches[I]) {
                                Matches[I].classList.remove("SMTag");
                            }
                        }
                        if (Popup.TextInput.value) {
                            Popup.Results.classList.add("SMTags");
                            Filters = Popup.TextInput.value.split(/,\s*/g);
                            for (I = 0, N = Filters.length; I < N; ++I) {
                                Key = Filters[I].toLowerCase();
                                if (Tags[Key]) {
                                    for (J = 0, NumTags = Tags[Key].length; J < NumTags; ++J) {
                                        Context = Popup.Results.children[Tags[Key][J]];
                                        Context.classList.add("SMTag");
                                        Context = Context.querySelector("a[href*='/user/']");
                                        Username = Context.textContent;
                                        if (!MTUsers[Username]) {
                                            MTUsers[Username] = [];
                                        }
                                        MTUsers[Username].push(Context);
                                    }
                                }
                            }
                        } else {
                            Popup.Results.classList.remove("SMTags");
                            Matches = Popup.Results.querySelectorAll("a[href*='/user/']");
                            for (I = 0, N = Matches.length; I < N; ++I) {
                                Context = Matches[I];
                                Username = Context.textContent;
                                if (!MTUsers[Username]) {
                                    MTUsers[Username] = [];
                                }
                                MTUsers[Username].push(Context);
                            }
                        }
                        addMTCheckboxes(MTUsers, "User", "beforeBegin", "previousElementSibling", MT);
                        SMManageTagsPopup.reposition();
                    });
                });
            });
        }
        if (SMRecentUsernameChanges) {
            setSMRecentUsernameChanges(SMRecentUsernameChanges);
        }
        if (SMManageFilteredUsers) {
            setSMManageFilteredUsers(SMManageFilteredUsers);
        }
        SMAPIKey.addEventListener("input", function () {
            setValue(`steamApiKey`, SMAPIKey.value);
        });
        popup.open();
    }

    function getSMFeature(Feature, aaa) {
        var Menu, Checkbox, CheckboxInput, SMFeatures;
        Menu = document.createElement("div");
        Menu.insertAdjacentHTML(`beforeEnd`, `
            <div class="esgst-sm-small-number form__heading__number">${aaa}.</div>
        `);
        var ID, localID, val, val1, val2;
        ID = Feature.id;
        var siwtchSg, siwtchSt;
        if (Feature.sg) {
            localID = `${ID}_sg`;
            val1 = esgst.settings[localID];
            if (typeof val1 === `undefined`) {
                val1 = false;
            }
            siwtchSg = createToggleSwitch(Menu, ID, true, esgst.settings.esgst_st ? `[SG]` : ``, true, false, null, val1);
        }
        if (Feature.st && (esgst.settings.esgst_st || Feature.id === `esgst`)) {
            localID = `${ID}_st`;
            val2 = esgst.settings[localID];
            if (typeof val2 === `undefined`) {
                val2 = false;
            }
            siwtchSt = createToggleSwitch(Menu, ID, true, `[ST]`, false, true, null, val2);
        }
        if (siwtchSg || siwtchSt) {
        val = val1 || val2;
        Menu.insertAdjacentHTML(`beforeEnd`, `
            <span>${esgst.settings.esgst_st ? `- ` : ``}${Feature.name}</span>
            ${Feature.description ? `<i class="fa fa-question-circle esgst-clickable"></i>` : ``}
            <div class="form__row__indent SMFeatures esgst-hidden"></div>
        `);
        SMFeatures = Menu.lastElementChild;
        if (Feature.description) {
        var tool = SMFeatures.previousElementSibling;
        var popout, timeout;
            tool.addEventListener(`mouseenter`, function () {
                if (popout) {
                    popout.open(tool);
                } else {
                    popout = createPopout_v6(`esgst-feature-description markdown`);
                    popout.popout.innerHTML = Feature.description;
                    popout.open(tool);
            popout.popout.addEventListener(`mouseenter`, function () {
                if (timeout) {
                    window.clearTimeout(timeout);
                    timeout = null;
                }
            });
                }
            });
            tool.addEventListener(`mouseleave`, function (event) {
                if (popout && !popout.popout.contains(event.relatedTarget)) {
                    timeout = window.setTimeout(function () {
                        popout.close();
                    }, 1000);
                }
            });
        }
        if (Feature.features) {
            for (var i = 0, n = Feature.features.length; i < n; ++i) {
                var ft = getSMFeature(Feature.features[i], i + 1);
                if (ft) {
                    SMFeatures.appendChild(ft);
                }
            }
            if (siwtchSg) {
                siwtchSg.dependencies.push(SMFeatures);
            }
            if (siwtchSt) {
                siwtchSt.dependencies.push(SMFeatures);
            }
            if (val) {
                SMFeatures.classList.remove(`esgst-hidden`);
            }
        }
        if (Feature.colors) {
            var color = esgst[`${Feature.id}_color`];
            var bgColor = esgst[`${Feature.id}_bgColor`];
            var html = `
<div class="esgst-sm-colors">
Text: <input type="color" value="${color}">
Background: <input type="color" value="${bgColor}">
<div class="form__saving-button esgst-sm-colors-default">Use Default</div>
</div>
`;
            SMFeatures.insertAdjacentHTML(`beforeEnd`, html);
            var colorContext = SMFeatures.lastElementChild.firstElementChild;
            var bgColorContext = colorContext.nextElementSibling;
            addColorObserver(colorContext, Feature.id, `color`);
            addColorObserver(bgColorContext, Feature.id, `bgColor`);
            bgColorContext.nextElementSibling.addEventListener(`click`, function () {
                colorContext.value = esgst.defaultValues[`${Feature.id}_color`];
                setValue(`${Feature.id}_color`, colorContext.value);
                bgColorContext.value = esgst.defaultValues[`${Feature.id}_bgColor`];
                setValue(`${Feature.id}_bgColor`, bgColorContext.value);
            });
            if (siwtchSg) {
                siwtchSg.dependencies.push(SMFeatures);
            }
            if (siwtchSt) {
                siwtchSt.dependencies.push(SMFeatures);
            }
            if (val) {
                SMFeatures.classList.remove(`esgst-hidden`);
            }
        } else if (Feature.input) {
            var input, prev, next;
            if (Feature.id === `npth`) {
                input = insertHtml(SMFeatures, `beforeEnd`, `
                    <div class="esgst-sm-colors">
                        Enter the key you want to use for previous links: <input type="text" value=${esgst.npth_previousKey}>
                        <br/>
                        Enter the key you want to use for next links: <input type="text" value=${esgst.npth_nextKey}>
                    </div>
                `);
                prev = input.firstElementChild;
                next = input.lastElementChild;
                prev.addEventListener(`keydown`, function (e) {
                    e.preventDefault();
                    setValue(`npth_previousKey`, e.key);
                    esgst.npth_previousKey = e.key;
                    prev.value = e.key;
                });
                next.addEventListener(`keydown`, function (e) {
                    e.preventDefault();
                    setValue(`npth_nextKey`, e.key);
                    esgst.npth_nextKey = e.key;
                    next.value = e.key;
                });
            } else {
            var hours = esgst.gb_hours;
            input = insertHtml(SMFeatures, `beforeEnd`, `
                <div class="esgst-sm-colors">
                    Time range to trigger highlight: <input type="text" value=${hours}> hours
                </div>
            `);
            input.firstElementChild.addEventListener(`change`, function() {
                setValue(`gb_hours`, input.firstElementChild.value);
                esgst.gb_hours = input.firstElementChild.value;
            });
            }
            if (siwtchSg) {
                siwtchSg.dependencies.push(SMFeatures);
            }
            if (siwtchSt) {
                siwtchSt.dependencies.push(SMFeatures);
            }
            if (val) {
                SMFeatures.classList.remove(`esgst-hidden`);
            }
        } else if (Feature.options) {
            var index = esgst[`${Feature.id}_index`];
            var options = ``;
            for (var j = 0, jj = Feature.options.values.length; j < jj; ++j) {
                options += `<option>${Feature.options.values[j]}</option>`;
            }
            var select = insertHtml(SMFeatures, `beforeEnd`, `
                <div class="esgst-sm-colors">
                    ${Feature.options.title}
                    <select>
                        ${options}
                    </select>
                </div>
            `);
            select.firstElementChild.selectedIndex = index;
            select.firstElementChild.addEventListener(`change`, function() {
                setValue(`${Feature.id}_index`, select.firstElementChild.selectedIndex);
                esgst[`${Feature.id}_index`] = select.firstElementChild.selectedIndex;
            });
            if (siwtchSg) {
                siwtchSg.dependencies.push(SMFeatures);
            }
            if (siwtchSt) {
                siwtchSt.dependencies.push(SMFeatures);
            }
            if (val) {
                SMFeatures.classList.remove(`esgst-hidden`);
            }
        }
        return Menu;
        } else {
            Menu.lastElementChild.remove();
            return null;
        }
    }

    function addColorObserver(context, id, key) {
        context.addEventListener(`change`, function () {
            setValue(`${id}_${key}`, context.value);
        });
    }

    function createSMSections(J, Sections) {
        var SectionsHTML, I, N;
        SectionsHTML = "";
        for (I = 0, N = Sections.length; I < N; ++I) {
            SectionsHTML +=
                "<div class=\"form__row\">" +
                "    <div class=\"form__heading\">" +
                "        <div class=\"form__heading__number\">" + J + ".</div>" +
                "        <div class=\"form__heading__text\">" + Sections[I].Title + "</div>" +
                "    </div>" +
                "    <div class=\"form__row__indent" + (Sections[I].Name ? (" " + Sections[I].Name) : "") + "\">" + (Sections[I].HTML ? Sections[I].HTML : "") + "</div>" +
                "</div>";
            ++J;
        }
        return SectionsHTML;
    }

    function createSMButtons(Heading, Items) {
        var I, N, Item, Icons, J, NumIcons;
        for (I = 0, N = Items.length; I < N; ++I) {
            Item = Items[I];
            if (Item.Check) {
                Icons = "";
                for (J = 0, NumIcons = Item.Icons.length; J < NumIcons; ++J) {
                    Icons += "<i class=\"fa " + Item.Icons[J] + "\"></i> ";
                }
                Heading.insertAdjacentHTML("beforeEnd", "<a class=\"" + Item.Name + "\" title=\"" + Item.Title + "\">" + Icons + "</a>");
            }
        }
    }

    function importSMData(SM) {
        var File, Reader;
        File = document.createElement("input");
        File.type = "file";
        File.click();
        File.addEventListener("change", function () {
            File = File.files[0];
            if (File.name.match(/\.json/)) {
                Reader = new FileReader();
                Reader.readAsText(File);
                Reader.onload = function () {
                    var Key, Setting;
                    File = JSON.parse(Reader.result);
                    if ((File.rhSGST && (File.rhSGST == "Data")) || (File.ESGST && (File.ESGST == "Data"))) {
                        if (window.confirm("Are you sure you want to import this data? A copy of your current data will be downloaded as precaution.")) {
                            exportSMData(SM);
                            for (Key in File.Data) {
                                if (Key === `settings`) {
                                    if (SM.S.checked) {
                                        var savedSettings = JSON.parse(GM_getValue(`settings`, `{}`));
                                        for (Setting in File.Data.Settings) {
                                            savedSettings[Setting] = File.Data.Settings[Setting];
                                        }
                                        GM_setValue(`settings`, JSON.stringify(savedSettings));
                                    }
                                } else if (SM.M.checked) {
                                    var i, j, n, numT, saved, value;
                                    if (Key.match(/^(users|Users)$/)) {
                                        importUsersAndMerge(File, Key, SM);
                                    } else if (Key.match(/^(games|Games)$/)) {
                                        importGamesAndMerge(File, Key, SM);
                                    } else if (Key === `giveaways`) {
                                        importGiveawaysAndMerge(File, Key, SM);
                                    } else if (Key.match(/^(comments|Comments|Comments_ST)$/) && SM.C.checked) {
                                        importCommentsAndMerge(File, Key, SM);
                                    } else if (Key == `Emojis` && SM.E.checked) {
                                        var savedEmojis = GM_getValue(`Emojis`, ``);
                                        var emojis = DOM.parse(File.Data.Emojis).getElementsByTagName(`span`);
                                        for (i = 0, n = emojis.length; i < n; ++i) {
                                            if (!savedEmojis.match(emojis[i].outerHTML)) {
                                                savedEmojis += emojis[i].outerHTML;
                                            }
                                        }
                                        GM_setValue(`Emojis`, savedEmojis);
                                    } else if (Key.match(/^(CommentHistory|sgCommentHistory|stCommentHistory)$/)) {
                                        importCommentHistoryAndMerge(File, Key, SM);
                                    } else if (Key.match(/^(Rerolls|StickiedGroups)$/) && SM[SM.Names[Key]].checked) {
                                        saved = GM_getValue(Key, []);
                                        for (i = 0, n = File.Data[Key].length; i < n; ++i) {
                                            value = File.Data[Key][i];
                                            if (saved.indexOf(value) < 0) {
                                                saved.push(value);
                                            }
                                        }
                                        GM_setValue(Key, saved);
                                    } else if (Key.match(/^(Templates|templates)$/)) {
                                        importTemplatesAndMerge(File, Key, SM);
                                    } else if (SM.Names[Key] && SM[SM.Names[Key]] && SM[SM.Names[Key]].checked) {
                                        GM_setValue(Key, File.Data[Key]);
                                    }
                                } else if (Key.match(/^(users|Users)$/)) {
                                    importUsers(File, Key, SM);
                                } else if (Key.match(/^(games|Games)$/)) {
                                    importGames(File, Key, SM);
                                } else if (Key === `giveaways`) {
                                    importGiveaways(File, Key, SM);
                                } else if (Key.match(/^(CommentHistory|sgCommentHistory|stCommentHistory)$/)) {
                                    importCommentHistory(File, Key, SM);
                                } else if (Key === `comments` && SM.C.checked) {
                                    importComments(File, Key, SM);
                                } else if (Key.match(/^(Templates|templates)$/)) {
                                    importTemplates(File, Key, SM);
                                } else if (SM.Names[Key] && SM[SM.Names[Key]] && SM[SM.Names[Key]].checked) {
                                    GM_setValue(Key, File.Data[Key]);
                                }
                            }
                            window.alert("Imported! It is always recommended to sync your data after importing it.");
                        }
                    } else {
                        window.alert("Wrong file!");
                    }
                };
            } else {
                window.alert("File should be in the .json format.");
            }
        });
    }

    function importGiveawaysAndMerge(File) {
        createLock(`giveawayLock`, 300, function(deleteLock) {
            var saved = JSON.parse(GM_getValue(`giveaways`, `{}`));
            var giveaways = File.Data.giveaways;
            for (var key in giveaways) {
                if (!saved[key]) {
                    saved[key] = {};
                }
                for (var subKey in giveaways[key]) {
                    saved[key][subKey] = giveaways[key][subKey];
                }
            }
            GM_setValue(`giveaways`, JSON.stringify(saved));
            deleteLock();
        });
    }

    function importGiveaways(File) {
        createLock(`giveawayLock`, 300, function(deleteLock) {
            GM_setValue(`giveaways`, JSON.stringify(File.Data.giveaways));
            deleteLock();
        });
    }

    function importTemplatesAndMerge(File, Key, SM) {
        createLock(`templateLock`, 300, function (deleteLock) {
            var i, j, n, numT, savedTemplates, template, templates;
            savedTemplates = JSON.parse(GM_getValue(`templates`, `[]`));
            if (Key === `Templates`) {
                templates = getTemplateStorageV6(File.Data.Templates);
            } else {
                templates = File.data.templates;
            }
            for (i = 0, n = templates.length; i < n; ++i) {
                template = templates[i];
                for (j = 0, numT = savedTemplates.length; j < numT && savedTemplates[j].name !== template.name; ++j);
                if (j >= numT) {
                    savedTemplates.push(template);
                }
            }
            GM_setValue(`templates`, JSON.stringify(savedTemplates));
            deleteLock();
        });
    }

    function importTemplates(File, Key, SM) {
        createLock(`templateLock`, 300, function (deleteLock) {
            var templates;
            if (Key === `Templates`) {
                templates = getTemplateStorageV6(File.Data.Templates);
            } else {
                templates = File.data.templates;
            }
            GM_setValue(`templates`, JSON.stringify(templates));
            deleteLock();
        });
    }

    function importUsersAndMerge(File, Key, SM) {
        createLock(`userLock`, 300, function (deleteLock) {
            var savedUsers = JSON.parse(GM_getValue(`users`));
            if (Key === `Users`) {
                mergeUsers(savedUsers, getUserStorageV6(File.Data.Users), SM);
            } else {
                mergeUsers(savedUsers, File.Data.users, SM);
            }
            GM_setValue(`users`, JSON.stringify(savedUsers));
            deleteLock();
        });
    }

    function mergeUsers(savedUsers, users, SM) {
        var keys = {
            notes: `UN`,
            tags: `UT`,
            ugd: `UGD`,
            namwc: `NAMWC`,
            nrf: `NRF`,
            rwscvl: `RWSCVL`,
            wbc: `WBC`,
            uf: `UF`
        };
        for (var key in users.users) {
            if (!savedUsers.users[key]) {
                savedUsers.users[key] = users.users[key];
                savedUsers.steamIds[users.users[key].username] = key;
            } else {
                savedUsers.users[key].id = users.users[key].id;
                savedUsers.users[key].username = users.users[key].username;
                savedUsers.steamIds[users.users[key].username] = key;
                for (var subKey in keys) {
                    if (SM[keys[subKey]].checked && users.users[key][subKey]) {
                        if (subKey === `notes`) {
                            if (savedUsers.users[key].notes) {
                                savedUsers.users[key].notes += `\n\n${users.users[key].notes}`;
                            } else {
                                savedUsers.users[key].notes = users.users[key].notes;
                            }
                        } else if (subKey === `tags`) {
                            if (savedUsers.users[key].tags && savedUsers.users[key].tags.length) {
                                for (var i = 0, n = users.users[key].tags.length; i < n; ++i) {
                                    if (savedUsers.users[key].tags.indexOf(users.users[key].tags[i]) < 0) {
                                        savedUsers.users[key].tags.push(users.users[key].tags[i]);
                                    }
                                }
                            } else {
                                savedUsers.users[key].tags = users.users[key].tags;
                            }
                        } else if (subKey === `ugd`) {
                            if (savedUsers.users[key].ugd) {
                                if (users.users[key].ugd.wonTimestamp > savedUsers.users[key].ugd.wonTimestamp) {
                                    savedUsers.users[key].ugd.won = users.users[key].ugd.won;
                                    savedUsers.users[key].ugd.wonTimestamp = users.users[key].ugd.wonTimestamp;
                                }
                                if (users.users[key].ugd.sentTimestamp > savedUsers.users[key].ugd.sentTimestamp) {
                                    savedUsers.users[key].ugd.sent = users.users[key].ugd.sent;
                                    savedUsers.users[key].ugd.sentTimestamp = users.users[key].ugd.sentTimestamp;
                                }
                            } else {
                                savedUsers.users[key].ugd = users.users[key].ugd;
                            }
                        } else {
                            if (savedUsers.users[key][subKey]) {
                                if (users.users[key][subKey].lastCheck > savedUsers.users[key][subKey].lastCheck) {
                                    savedUsers.users[key][subKey] = users.users[key][subKey];
                                }
                            } else {
                                savedUsers.users[key][subKey] = users.users[key][subKey];
                            }
                        }
                    }
                }
            }
        }
    }

    function importUsers(File, Key, SM) {
        createLock(`userLock`, 300, function(deleteLock) {
            var users;
            if (Key === `Users`) {
                users = getUserStorageV6(File.Data.Users);
            } else {
                users = File.Data.users;
            }
            var keys = {
                notes: `UN`,
                tags: `UT`,
                ugd: `UGD`,
                namwc: `NAMWC`,
                nrf: `NRF`,
                rwscvl: `RWSCVL`,
                wbc: `WBC`,
                uf: `UF`
            };
            var found = true, key;
            for (key in keys) {
                if (!SM[keys[key]].checked) {
                    found = false;
                }
            }
            if (found) {
                GM_setValue(`users`, JSON.stringify(users));
            } else {
                var savedUsers = JSON.parse(GM_getValue(`users`));
                for (key in users.users) {
                    if (!savedUsers.users[key]) {
                        savedUsers.users[key] = {};
                    }
                    savedUsers.users[key].id = users.users[key].id;
                    savedUsers.users[key].username = users.users[key].username;
                    savedUsers.steamIds[users.users[key].username] = key;
                    for (var subKey in keys) {
                        if (SM[keys[subKey]].checked && users.users[key][subKey]) {
                            savedUsers.users[key][subKey] = users.users[key][subKey];
                        }
                    }
                }
                GM_setValue(`users`, JSON.stringify(savedUsers));
            }
            deleteLock();
        });
    }

    function importCommentHistoryAndMerge(File, kk, SM) {
        createLock(`${kk === `CommentHistory` ? `sgCommentHistory` : kk}Lock`, 300, function (deleteLock) {
            var i, j, nS, nC, k, nK, newComments, comments, savedComments;
            savedComments = JSON.parse(GM_getValue(kk === `CommentHistory` ? `sgCommentHistory` : kk, `[]`));
            newComments = savedComments;
            if (kk === `CommentHistory` && SM.CH_SG.checked) {
                newComments = [];
                comments = getCommentHistoryStorageV6(File.Data.CommentHistory);
                i = 0;
                j = 0;
                nS = savedComments.length;
                nC = comments.length;
                while (i < nS && j < nC) {
                    if (savedComments[i].timestamp > comments[j].timestamp) {
                        newComments.push(savedComments[i]);
                        ++i;
                    } else {
                        for (k = 0, nK = savedComments.length; k < nK && savedComments[k].id !== comments[j].id; ++k);
                        if (k >= nK) {
                            newComments.push(comments[j]);
                        }
                        ++j;
                    }
                }
                while (i < nS) {
                    newComments.push(savedComments[i]);
                    ++i;
                }
                while (j < nC) {
                    for (k = 0, nK = savedComments.length; k < nK && savedComments[k].id !== comments[j].id; ++k);
                    if (k >= nK) {
                        newComments.push(comments[j]);
                    }
                    ++j;
                }
                savedComments = newComments;
            } else if ((kk === `sgCommentHistory` && SM.CH_SG.checked) || (kk === `stCommentHistory` && SM.CH_ST.checked)) {
                newComments = [];
                comments = File.Data[kk];
                i = 0;
                j = 0;
                nS = savedComments.length;
                nC = comments.length;
                while (i < nS && j < nC) {
                    if (savedComments[i].timestamp > comments[j].timestamp) {
                        newComments.push(savedComments[i]);
                        ++i;
                    } else {
                        for (k = 0, nK = savedComments.length; k < nK && savedComments[k].id !== comments[j].id; ++k);
                        if (k >= nK) {
                            newComments.push(comments[j]);
                        }
                        ++j;
                    }
                }
                while (i < nS) {
                    newComments.push(savedComments[i]);
                    ++i;
                }
                while (j < nC) {
                    for (k = 0, nK = savedComments.length; k < nK && savedComments[k].id !== comments[j].id; ++k);
                    if (k >= nK) {
                        newComments.push(comments[j]);
                    }
                    ++j;
                }
            }
            GM_setValue(kk === `CommentHistory` ? `sgCommentHistory` : kk, JSON.stringify(newComments));
            deleteLock();
        });
    }

    function importCommentHistory(File, Key, SM) {
        var key = `${Key === `CommentHistory` ? `sgCommentHistory` : Key}`;
        if ((key === `sgCommentHistory` && SM.CH_SG.checked) || (key === `stCommentHistory` && SM.CH_ST.checked)) {
            createLock(`${key}Lock`, 300, function (deleteLock) {
                GM_setValue(key, JSON.stringify(Key === `CommentHistory` ? getCommentHistoryStorageV6(File.Data.CommentHistory) : File.Data[Key]));
                deleteLock();
            });
        }
    }

    function importCommentsAndMerge(File, Key) {
        createLock(`commentLock`, 300, function(deleteLock) {
            var comments, id, key, savedComments, sgComments, stComments, subKey, type;
            savedComments = JSON.parse(GM_getValue(`comments`));
            if (Key.match(/Comments|Comments_ST/)) {
                sgComments = File.Data.Comments ? File.Data.Comments : {};
                stComments = File.Data.Comments_ST ? File.Data.Comments_ST : {};
                comments = getCommentStorageV6(sgComments, stComments);
            } else {
                comments = File.Data.comments;
            }
            for (type in comments) {
                for (key in comments[type]) {
                    if (savedComments[type][key]) {
                        for (subKey in comments[type][key]) {
                            if (subKey === `comments`) {
                                for (id in comments[type][key].comments) {
                                    if (savedComments[type][key].comments[id]) {
                                        if (comments[type][key].comments[id].timestamp > savedComments[type][key].comments[id].timestamp) {
                                            savedComments[type][key].comments[id].timestamp = comments[type][key].comments[id].timestamp;
                                        }
                                    } else {
                                        savedComments[type][key].comments[id] = comments[type][key].comments.id;
                                    }
                                }
                            } else {
                                savedComments[type][key][subKey] = comments[type][key][subKey];
                            }
                        }
                    } else {
                        savedComments[type][key] = comments[type][key];
                    }
                }
            }
            GM_setValue(`comments`, JSON.stringify(savedComments));
            deleteLock();
        });
    }

    function importComments(File) {
        createLock(`commentLock`, 300, function(deleteLock) {
            GM_setValue(`comments`, JSON.stringify(File.Data.comments));
            deleteLock();
        });
    }

    function importGamesAndMerge(File, Key, SM) {
        var i, n, types, categories, savedGames, games, type, id;
        createLock(`gameLock`, 300, function (deleteLock) {
            types = { apps: ``, subs: `` };
            categories = [`rating`, `bundled`, `owned`, `wishlisted`, `ignored`, `tradingCards`, `achievements`, `multiplayer`, `steamCloud`, `linux`, `mac`, `dlc`, `genres`];
            savedGames = JSON.parse(GM_getValue(`games`));
            if (Key === `Games`) {
                games = getGameStorageV6(File.Data.Games);
                for (type in types) {
                    for (id in games[type]) {
                        if (savedGames[type][id]) {
                            if (games[type][id].tags && SM.GT.checked) {
                                if (!Array.isArray(games[type][id].tags)) {
                                    games[type][id].tags = games[type][id].tags.split(`, `);
                                }
                                if (savedGames[type][id].tags) {
                                    for (i = 0, n = games[type][id].tags.length; i < n; ++i) {
                                        if (savedGames[type][id].tags.indexOf(games[type][id].tags[i]) < 0) {
                                            savedGames[type][id].tags.push(games[type][id].tags[i]);
                                        }
                                    }
                                } else {
                                    savedGames[type][id].tags = games[type][id].tags;
                                }
                            }
                            if (games[type][id].entered && SM.EGH.checked) {
                                savedGames[type][id].entered = true;
                            }
                            if (games[type][id].lastCheck && SM.GC.checked) {
                                if (savedGames[type][id].lastCheck) {
                                    if (games[type][id].lastCheck > savedGames[type][id].lastCheck) {
                                        savedGames[type][id].lastCheck = games[type][id].lastCheck;
                                        for (i = 0, n = categories.length; i < n; ++i) {
                                            savedGames[type][id][categories[i]] = games[type][id][categories[i]];
                                        }
                                    }
                                } else {
                                    savedGames[type][id].lastCheck = games[type][id].lastCheck;
                                    for (i = 0, n = categories.length; i < n; ++i) {
                                        savedGames[type][id][categories[i]] = games[type][id][categories[i]];
                                    }
                                }
                            }
                            if (games[type][id].itadi && SM.ITADI.checked) {
                                if (savedGames[type][id].itadi) {
                                    if (savedGames[type][id].itadi.lastCheck < games[type][id].itadi.lastCheck) {
                                        savedGames[type][id].itadi = games[type][id].itadi;
                                    }
                                } else {
                                    savedGames[type][id].itadi = games[type][id].itadi;
                                }
                            }
                        } else if (SM.GT.checked || SM.EGH.checked || SM.GC.checked) {
                            if (!savedGames[type][id]) {
                                savedGames[type][id] = {};
                            }
                            if (games[type][id].tags && SM.GT.checked) {
                                savedGames[type][id].tags = games[type][id].tags;
                            }
                            if (games[type][id].entered && SM.EGH.checked) {
                                savedGames[type][id].entered = true;
                            }
                            if (games[type][id].lastCheck && SM.GC.checked) {
                                savedGames[type][id].lastCheck = games[type][id].lastCheck;
                                for (i = 0, n = categories.length; i < n; ++i) {
                                    savedGames[type][id][categories[i]] = games[type][id][categories[i]];
                                }
                            }
                            if (games[type][id].itadi && SM.ITADI.checked) {
                                savedGames[type][id].itadi = games[type][id].itadi;
                            }
                        }
                    }
                }
            } else {
                games = File.Data.games;
                for (type in types) {
                    for (id in games[type]) {
                        if (savedGames[type][id]) {
                            if (games[type][id].tags && SM.GT.checked) {
                                if (!Array.isArray(games[type][id].tags)) {
                                    games[type][id].tags = games[type][id].tags.split(`, `);
                                }
                                if (savedGames[type][id].tags) {
                                    for (i = 0, n = games[type][id].tags.length; i < n; ++i) {
                                        if (savedGames[type][id].tags.indexOf(games[type][id].tags[i]) < 0) {
                                            savedGames[type][id].tags.push(games[type][id].tags[i]);
                                        }
                                    }
                                } else {
                                    savedGames[type][id].tags = games[type][id].tags;
                                }
                            }
                            if (games[type][id].entered && SM.EGH.checked) {
                                savedGames[type][id].entered = true;
                            }
                            if (games[type][id].lastCheck && SM.GC.checked) {
                                if (savedGames[type][id].lastCheck) {
                                    if (games[type][id].lastCheck > savedGames[type][id].lastCheck) {
                                        savedGames[type][id].lastCheck = games[type][id].lastCheck;
                                        for (i = 0, n = categories.length; i < n; ++i) {
                                            savedGames[type][id][categories[i]] = games[type][id][categories[i]];
                                        }
                                    }
                                } else {
                                    savedGames[type][id].lastCheck = games[type][id].lastCheck;
                                    for (i = 0, n = categories.length; i < n; ++i) {
                                        savedGames[type][id][categories[i]] = games[type][id][categories[i]];
                                    }
                                }
                            }
                            if (games[type][id].itadi && SM.ITADI.checked) {
                                if (savedGames[type][id].itadi) {
                                    if (savedGames[type][id].itadi.lastCheck < games[type][id].itadi) {
                                        savedGames[type][id].itadi = games[type][id].itadi;
                                    }
                                } else {
                                    savedGames[type][id].itadi = games[type][id].itadi;
                                }
                            }
                        } else if (SM.GT.checked || SM.EGH.checked || SM.GC.checked) {
                            if (!savedGames[type][id]) {
                                savedGames[type][id] = {};
                            }
                            if (games[type][id].tags && SM.GT.checked) {
                                savedGames[type][id].tags = games[type][id].tags;
                            }
                            if (games[type][id].entered && SM.EGH.checked) {
                                savedGames[type][id].entered = true;
                            }
                            if (games[type][id].lastCheck && SM.GC.checked) {
                                savedGames[type][id].lastCheck = games[type][id].lastCheck;
                                for (i = 0, n = categories.length; i < n; ++i) {
                                    savedGames[type][id][categories[i]] = games[type][id][categories[i]];
                                }
                            }
                            if (games[type][id].itadi && SM.ITADI.checked) {
                                savedGames[type][id].itadi = games[type][id].itadi;
                            }
                        }
                    }
                }
            }
            GM_setValue(`games`, JSON.stringify(savedGames));
            deleteLock();
        });
    }

    function importGames(File, Key, SM) {
        createLock(`gameLock`, 300, function (deleteLock) {
            var games, savedGames;
            if (Key === `Games`) {
                games = getGameStorageV6(File.Data.Games);
            } else {
                games = File.Data.games;
            }
            if (SM.GT.checked && SM.EGH.checked && SM.GC.checked && SM.ITADI.checked) {
                GM_setValue(`games`, JSON.stringify(games));
            } else {
                savedGames = JSON.parse(GM_getValue(`games`));
                if (SM.GT.checked) {
                    getSMGames(games, `tags`, savedGames, `apps`);
                    getSMGames(games, `tags`, savedGames, `subs`);
                }
                if (SM.EGH.checked) {
                    getSMGames(games, `entered`, savedGames, `apps`);
                    getSMGames(games, `entered`, savedGames, `subs`);
                }
                if (SM.GC.checked) {
                    getSMGames(games, `lastCheck`, savedGames, `apps`);
                    getSMGames(games, `lastCheck`, savedGames, `subs`);
                }
                if (SM.ITADI.checked) {
                    getSMGames(games, `itadi`, savedGames, `apps`);
                    getSMGames(games, `itadi`, savedGames, `subs`);
                }
                GM_setValue(`games`, JSON.stringify(savedGames));
            }
            deleteLock();
        });
    }

    function getSMGames(games, key, selected, type, deleteData) {
        var categories, i, id, n;
        categories = [`rating`, `bundled`, `owned`, `wishlisted`, `ignored`, `tradingCards`, `achievements`, `multiplayer`, `steamCloud`, `linux`, `mac`, `dlc`, `genres`];
        for (id in games[type]) {
            if (typeof games[type][id][key] !== `undefined`) {
                if (deleteData) {
                    if (key === `lastCheck`) {
                        for (i = 0, n = categories.length; i < n; ++i) {
                            if (games[type][id][categories[i]]) {
                                delete games[type][id][categories[i]];
                            }
                        }
                        delete games[type][id][key];
                    } else {
                        delete games[type][id][key];
                    }
                } else {
                    if (!selected[type][id]) {
                        selected[type][id] = {};
                    }
                    if (key === `lastCheck`) {
                        for (i = 0, n = categories.length; i < n; ++i) {
                            if (games[type][id][categories[i]]) {
                                selected[type][id][categories[i]] = games[type][id][categories[i]];
                            }
                        }
                        selected[type][id][key] = games[type][id][key];
                    } else if (key === `tags`) {
                        if (!Array.isArray(games[type][id].tags)) {
                            games[type][id].tags = games[type][id].tags.split(`, `);
                        }
                        selected[type][id][key] = games[type][id][key];
                    } else {
                        selected[type][id][key] = games[type][id][key];
                    }
                }
            }
        }
    }

    function exportSMData(SM) {
        var File, Data, Key, URL;
        File = document.createElement("a");
        File.download = "ESGST.json";
        Data = {};
        for (Key in SM.Names) {
            if (Key === `users`) {
                Data.users = {};
                var keys = {
                    notes: `UN`,
                    tags: `UT`,
                    ugd: `UGD`,
                    namwc: `NAMWC`,
                    nrf: `NRF`,
                    rwscvl: `RWSCVL`,
                    wbc: `WBC`,
                    uf: `UF`
                };
                var users = JSON.parse(GM_getValue(`users`));
                Data.users.users = {};
                for (var key in users.users) {
                    Data.users.users[key] = {
                        id: users.users[key].id,
                        username: users.users[key].username
                    };
                    var added = false;
                    for (var subKey in keys) {
                        if (SM[keys[subKey]].checked && users.users[key][subKey]) {
                            Data.users.users[key][subKey] = users.users[key][subKey];
                            added = true;
                        }
                    }
                    if (!added) {
                        delete Data.users.users[key];
                    }
                }
            } else if (Key === `games`) {
                Data.games = {
                    apps: {},
                    subs: {}
                };
                var games = JSON.parse(GM_getValue(`games`));
                if (SM.GT.checked) {
                    getSMGames(games, `tags`, Data.games, `apps`);
                    getSMGames(games, `tags`, Data.games, `subs`);
                }
                if (SM.EGH.checked) {
                    getSMGames(games, `entered`, Data.games, `apps`);
                    getSMGames(games, `entered`, Data.games, `subs`);
                }
                if (SM.GC.checked) {
                    getSMGames(games, `lastCheck`, Data.games, `apps`);
                    getSMGames(games, `lastCheck`, Data.games, `subs`);
                }
                if (SM.ITADI.checked) {
                    getSMGames(games, `itadi`, Data.games, `apps`);
                    getSMGames(games, `itadi`, Data.games, `subs`);
                }
            } else if (Key.match(/sgCommentHistory|stCommentHistory|comments|giveaways|descryptedGiveaways|templates|settings/) && SM[SM.Names[Key]].checked) {
                Data[Key] = JSON.parse(GM_getValue(Key, `{}`));
            } else if (SM[SM.Names[Key]].checked) {
                Data[Key] = GM_getValue(Key);
            }
        }
        Data = new Blob([JSON.stringify({
            ESGST: "Data",
            Data: Data
        })]);
        URL = window.URL.createObjectURL(Data);
        File.href = URL;
        document.body.appendChild(File);
        File.click();
        File.remove();
        window.URL.revokeObjectURL(URL);
        window.alert("Exported!");
    }

    function deleteSMData(SM) {
        var Key;
        if (window.confirm("Are you sure you want to delete this data? A copy will be downloaded as precaution.")) {
            exportSMData(SM);
            for (Key in SM.Names) {
                if (Key === `users`) {
                    createLock(`userLock`, 300, function(deleteLock) {
                        var keys = {
                            notes: `UN`,
                            tags: `UT`,
                            ugd: `UGD`,
                            namwc: `NAMWC`,
                            nrf: `NRF`,
                            rwscvl: `RWSCVL`,
                            wbc: `WBC`,
                            uf: `UF`
                        };
                        var users = JSON.parse(GM_getValue(`users`));
                        for (var key in users.users) {
                            for (var subKey in keys) {
                                if (SM[keys[subKey]].checked) {
                                   delete users.users[key][subKey];
                                }
                            }
                        }
                        GM_setValue(`users`, JSON.stringify(users));
                        deleteLock();
                    });
                } else if (Key === `games`) {
                    createLock(`gameLock`, 300, function (deleteLock) {
                        var games = JSON.parse(GM_getValue(`games`));
                        if (SM.GT.checked && SM.EGH.checked && SM.GC.checked) {
                            GM_setValue(`games`, JSON.stringify({
                                apps: {},
                                subs: {}
                            }));
                        } else {
                            if (SM.GT.checked) {
                                getSMGames(games, `tags`, null, `apps`, true);
                                getSMGames(games, `tags`, null, `subs`, true);
                            }
                            if (SM.EGH.checked) {
                                getSMGames(games, `entered`, null, `apps`, true);
                                getSMGames(games, `entered`, null, `subs`, true);
                            }
                            if (SM.GC.checked) {
                                getSMGames(games, `lastCheck`, null, `apps`, true);
                                getSMGames(games, `lastCheck`, null, `subs`, true);
                            }
                            if (SM.ITADI.checked) {
                                getSMGames(games, `itadi`, null, `apps`, true);
                                getSMGames(games, `itadi`, null, `subs`, true);
                            }
                            GM_setValue(`games`, JSON.stringify(games));
                        }
                        deleteLock();
                    });
                } else if (SM[SM.Names[Key]].checked) {
                    GM_deleteValue(Key);
                }
            }
            window.alert("Deleted!");
        }
    }

    function setSMManageFilteredUsers(SMManageFilteredUsers) {
            var popup;
        SMManageFilteredUsers.addEventListener(`click`, function() {
            if (!popup) {
                popup = createPopup_v6(`fa-eye-slash`, `Filtered Users`);
            var users = JSON.parse(GM_getValue(`users`));
            var filtered = [];
            for (var key in users.users) {
                if (users.users[key].uf && (users.users[key].uf.posts || users.users[key].uf.giveaways || users.users[key].uf.discussions)) {
                    filtered.push(users.users[key]);
                }
            }
            filtered.sort(function(a, b) {
                if (a.username > b.username) {
                    return -1;
                } else {
                    return 1;
                }
            });
            var table = insertHtml(popup.description, `beforeEnd`, `
                <table class="UGDData">
                    <tr>
                        <th>Username</th>
                        <th>Posts Hidden</th>
                        <th>Discussions Hidden</th>
                        <th>Giveaways Hidden</th>
                    </tr>
                </table>
            `);
            for (var i = 0, n = filtered.length; i < n; ++i) {
                var postsIcon = filtered[i].uf.posts ? `<i class="fa fa-check"></i>` : ``;
                var discussionsIcon = filtered[i].uf.discussions ? `<i class="fa fa-check"></i>` : ``;
                var giveawaysIcon = filtered[i].uf.giveaways ? `<i class="fa fa-check"></i>` : ``;
                table.insertAdjacentHTML(`beforeEnd`, `
                    <tr>
                        <td><a href="/user/${filtered[i].username}">${filtered[i].username}</a></td>
                        <td>${postsIcon}</td>
                        <td>${discussionsIcon}</td>
                        <td>${giveawaysIcon}</td>
                    </tr>
                `);
            }
            }
            popup.open();
        });
    }

    function setSMRecentUsernameChanges(SMRecentUsernameChanges) {
        SMRecentUsernameChanges.addEventListener("click", function () {
            var Popup, SMRecentUsernameChangesPopup;
            Popup = createPopup(true);
            Popup.Results.classList.add("SMRecentUsernameChangesPopup");
            Popup.Icon.classList.add("fa-comments");
            Popup.Title.textContent = "Recent Username Changes";
            Popup.Progress.innerHTML =
                "<i class=\"fa fa-circle-o-notch fa-spin\"></i> " +
                "<span>Loading recent username changes...</span>";
            makeRequest(null, "https://script.google.com/macros/s/AKfycbzvOuHG913mRIXOsqHIeAuQUkLYyxTHOZim5n8iP-k80iza6g0/exec?Action=2", Popup.Progress, function (Response) {
                var RecentChanges, HTML, I, N;
                Popup.Progress.innerHTML = "";
                RecentChanges = JSON.parse(Response.responseText).RecentChanges;
                HTML = "";
                for (I = 0, N = RecentChanges.length; I < N; ++I) {
                    HTML += "<div>" + RecentChanges[I][0] + " changed to <a class=\"rhBold\" href=\"/user/" + RecentChanges[I][1] + "\">" + RecentChanges[I][1] + "</a></div>";
                }
                Popup.Results.innerHTML = HTML;
                if (esgst.sg) {
                    loadEndlessFeatures(Popup.Results);
                }
                SMRecentUsernameChangesPopup.reposition();
            });
            SMRecentUsernameChangesPopup = Popup.popUp();
        });
    }

    function setSMCommentHistory(SMCommentHistory) {
        SMCommentHistory.addEventListener("click", function () {
            var comments, i, popup, set;
            popup = createPopup_v6(`fa-comments`, `Comment History`);
            popup.commentHistory = insertHtml(popup.description, `afterBegin`, `<div class="comments esgst-text-left"></div>`);
            comments = JSON.parse(GM_getValue(`${esgst.name}CommentHistory`, `[]`));
            i = 0;
            set = createButtonSet(`green`, `grey`, `fa-plus`, `fa-circle-o-notch fa-spin`, `Load more...`, `Loading more...`, function (callback) {
                getChComments(comments, i, i + 5, popup, function (value) {
                    i = value;
                    if (i > comments.length) {
                        set.set.remove();
                    }
                    callback();
                });
            });
            popup.description.appendChild(set.set);
            popup.open();
            set.trigger();
        });
    }

    function checkNewVersion() {
        var version = GM_getValue(`version`, `0`);
        if (version !== GM_info.script.version && esgst.showChangelog) {
            makeRequest(null, `https://raw.githubusercontent.com/revilheart/ESGST/master/changelog.txt`, null, function (response) {
                version = GM_info.script.version;
                GM_setValue(`version`, version);
                var reg = new RegExp(`v${version}\\n\\s\\*\\/\\n\\n([\\s\\S]*?)\\n\\n\\/\\*`);
                var changelog = response.responseText.match(reg);
                if (changelog) {
                    var popup = createPopup(true);
                    popup.Icon.classList.add(`fa-code`);
                    popup.Title.textContent = `ESGST v${version} Changelog`;
                    var html = changelog[1].replace(/\* (.+)/g, function (m, p1) {
                        return `<li>${p1}</li>`;
                    }).replace(/\n/g, `<br/>`).replace(/#(\d+)/g, function (m, p1) {
                        return `<a href="https://github.com/revilheart/ESGST/issues/${p1}">#${p1}</a>`;
                    });
                    popup.Description.insertAdjacentHTML(`afterBegin`, html);
                    popup.popUp();
                }
            });
        }
    }

    function startGiveawayFeatures() {
        if (esgst.gv || esgst.ochgb || esgst.ggl || esgst.gb || esgst.gwc || esgst.gwr || esgst.elgb || esgst.gwl || esgst.gf || esgst.uf) {
            esgst.endlessFeatures.push(loadGiveawayFeatures);
            loadGiveawayFeatures(document, true);
        }
    }

    function loadGiveawayFeatures(context, main) {
        var giveaways, i, n, savedGiveaways;
        giveaways = getGiveaways(context, main);
        if (main) {
            for (i = 0, n = giveaways.length; i < n; ++i) {
                esgst.currentGiveaways.push(giveaways[i]);
            }
        }
        for (i = 0, n = esgst.giveawayFeatures.length; i < n; ++i) {
            esgst.giveawayFeatures[i](giveaways, main);
        }
    }

    function getGiveaways(context, main, mainUrl) {
        var games, giveaway, giveaways, i, key, mainContext, matches, n, query, savedUsers;
        games = JSON.parse(GM_getValue(`games`));
        savedUsers = JSON.parse(GM_getValue(`users`));
        giveaways = [];
        if (esgst.createdPath || esgst.enteredPath || esgst.wonPath) {
            query = `.giveaway__row-outer-wrap, .featured__outer-wrap--giveaway, .table:not(.table--summary) .table__row-outer-wrap`;
        } else {
            query = `.giveaway__row-outer-wrap, .featured__outer-wrap--giveaway`;
        }
        if (mainUrl) {
            mainContext = context;
            key = `data`;
        } else {
            mainContext = document;
            key = `giveaway`;
        }
        matches = context.querySelectorAll(query);
        for (i = matches.length - 1; i >= 0; --i) {
            giveaway = getGiveawayInfo(matches[i], mainContext, games, savedUsers, null, main, mainUrl);
            if (giveaway) {
                giveaways.push(giveaway[key]);
            }
        }
        return giveaways;
    }

    function getGiveawayInfo(context, mainContext, games, savedUsers, ugd, main, mainUrl, ged) {
        var category, categories, chance, element, giveaway, i, id, info, match, n, savedUser, uf, thinHeadings;
        giveaway = {};
        giveaway.outerWrap = context;
        giveaway.gameId = giveaway.outerWrap.getAttribute(`data-game-id`);
        info = getGameInfo(giveaway.outerWrap);
        if (info) {
            giveaway.id = info.id;
            giveaway.type = info.type;
            if (games && games[giveaway.type][giveaway.id] && games[giveaway.type][giveaway.id].wishlisted) {
                giveaway.wishlisted = true;
            }
        }
        if (giveaway.outerWrap.classList.contains(`table__row-outer-wrap`) && esgst.giveawayPath) {
            return;
        }
        giveaway.innerWrap = giveaway.outerWrap.querySelector(`.giveaway__row-inner-wrap, .featured__inner-wrap, .table__row-inner-wrap`);
        giveaway.avatar = giveaway.outerWrap.getElementsByClassName(`giveaway_image_avatar`)[0];
        giveaway.image = giveaway.outerWrap.querySelector(`.giveaway_image_thumbnail, .giveaway_image_thumbnail_missing`);
        giveaway.summary = giveaway.innerWrap.querySelector(`.giveaway__summary, .featured__summary, .table__column--width-fill`);
        giveaway.entered = giveaway.innerWrap.classList.contains(`is-faded`);
        giveaway.headingName = giveaway.innerWrap.querySelector(`.giveaway__heading__name, .featured__heading__medium, .table__column__heading`);
        giveaway.name = giveaway.headingName.textContent;
        match = giveaway.name.match(/\s\((.+) Copies\)/);
        if (match) {
            giveaway.name = giveaway.name.replace(match[0], ``);
            giveaway.copies = parseInt(match[1].replace(/,/g, ``).match(/\d+/)[0]);
        } else {
            giveaway.copies = 1;
        }
        giveaway.url = esgst.giveawayPath && !ugd ? window.location.pathname : (mainUrl || giveaway.headingName.getAttribute(`href`));
        if (giveaway.url) {
            match = giveaway.url.match(/\/giveaway\/(.+?)(\/.+?)$/);
            if (match) {
                giveaway.code = match[1];
            } else {
                return null;
            }
        }
        thinHeadings = giveaway.innerWrap.querySelectorAll(`.giveaway__heading__thin, .featured__heading__small`);
        n = thinHeadings.length;
        if (n > 0) {
            if (n > 1) {
                giveaway.copies = parseInt(thinHeadings[0].textContent.replace(/,/g, ``).match(/\d+/)[0]);
                giveaway.pointsContainer = thinHeadings[1];
                giveaway.points = parseInt(thinHeadings[1].textContent.match(/\d+/)[0]);
            } else {
                giveaway.copies = 1;
                giveaway.pointsContainer = thinHeadings[0];
                giveaway.points = parseInt(thinHeadings[0].textContent.match(/\d+/)[0]);
            }
        }
        giveaway.columns = giveaway.innerWrap.querySelector(`.giveaway__columns, .featured__columns`);
        if (giveaway.columns && ((esgst.archivePath && !main) || !esgst.archivePath)) {
            giveaway.endTimeColumn = giveaway.columns.firstElementChild;
            giveaway.started = !giveaway.endTimeColumn.textContent.match(/Begins/);
            giveaway.endTime = parseInt(giveaway.endTimeColumn.lastElementChild.getAttribute(`data-timestamp`)) * 1e3;
            giveaway.ended = giveaway.endTime < Date.now();
            if (giveaway.ended && (esgst.userPath || esgst.groupPath || ugd)) {
                giveaway.startTimeColumn = giveaway.endTimeColumn.nextElementSibling.nextElementSibling;
            } else {
                giveaway.startTimeColumn = giveaway.endTimeColumn.nextElementSibling;
            }
            giveaway.startTime = parseInt(giveaway.startTimeColumn.firstElementChild.getAttribute(`data-timestamp`)) * 1e3;
            if (!esgst.userPath || ugd || ged) {
                giveaway.creatorContainer = giveaway.startTimeColumn.lastElementChild;
                giveaway.creator = giveaway.creatorContainer.textContent;
            }
            giveaway.winners = giveaway.columns.textContent.match(/No winners/) ? 0 : giveaway.copies;
        } else {
            giveaway.started = true;
        }
        if (!giveaway.endTime && (esgst.enteredPath || esgst.wonPath)) {
            giveaway.endTime = giveaway.innerWrap.querySelector(`[data-timestamp]`);
            if (giveaway.endTime) {
                giveaway.endTimeColumn = giveaway.endTime.parentElement;
                giveaway.endTime = parseInt(giveaway.endTime.getAttribute(`data-timestamp`)) * 1e3;
            } else {
                giveaway.endTime = 0;
            }
        }
        if (esgst.userPath && !ugd && !ged) {
            giveaway.creator = window.location.pathname.match(/^\/user\/(.+)/)[1];
        }
        if (esgst.createdPath && main) {
            giveaway.creator = esgst.username;
        }
        giveaway.created = giveaway.creator === esgst.username;
        if (esgst.uf && esgst.giveawaysPath && savedUsers) {
            savedUser = getUser(savedUsers, {
                username: giveaway.creator
            });
            if (savedUser) {
                uf = savedUser.uf;
                if (esgst.uf_g && savedUser.blacklisted && !uf) {
                    updateUfCount(giveaway.outerWrap.parentElement.nextElementSibling);
                    giveaway.outerWrap.remove();
                    return null;
                } else if (uf && uf.giveaways) {
                    updateUfCount(giveaway.outerWrap.parentElement.nextElementSibling);
                    giveaway.outerWrap.remove();
                    return null;
                }
            }
        }
        giveaway.links = giveaway.innerWrap.getElementsByClassName(`giveaway__links`)[0];
        if (giveaway.links) {
            giveaway.links.classList.add(`esgst-giveaway-links`);
            giveaway.entriesLink = giveaway.links.firstElementChild;
            giveaway.commentsLink = giveaway.entriesLink.nextElementSibling;
        } else {
            giveaway.entriesLink = mainContext.getElementsByClassName(`sidebar__navigation__item__count`)[1];
            giveaway.commentsLink = mainContext.getElementsByClassName(`sidebar__navigation__item__count`)[0];
        }
        if (giveaway.entriesLink && giveaway.commentsLink) {
            giveaway.entries = parseInt(giveaway.entriesLink.textContent.replace(/,/g, ``).match(/\d+/)[0]);
            giveaway.comments = parseInt(giveaway.commentsLink.textContent.replace(/,/g, ``).match(/\d+/)[0]);
        }
        giveaway.panel = giveaway.innerWrap.getElementsByClassName(`esgst-giveaway-panel`)[0];
        if (!giveaway.panel && (esgst.gwc || esgst.gwr || esgst.elgb || esgst.cewgd)) {
            if (giveaway.links) {
                giveaway.panel = insertHtml(giveaway.links, `afterEnd`, `
                    <div class="giveaway__columns esgst-giveaway-panel"></div>
                    <div style="clear: both;"></div>
                `);
                if (giveaway.startTimeColumn) {
                    element = giveaway.startTimeColumn.nextElementSibling;
                    while (element) {
                        giveaway.panel.appendChild(element);
                        element = giveaway.startTimeColumn.nextElementSibling;
                    }
                }
            } else if (giveaway.columns) {
                giveaway.panel = insertHtml(giveaway.columns, `afterEnd`, `<div class="featured__columns esgst-giveaway-panel"></div>`);
            } else {
                giveaway.panel = insertHtml(giveaway.innerWrap.firstElementChild.nextElementSibling, `afterEnd`, `<div class="table__column--width-small text-center esgst-giveaway-panel"></div>`);
            }
        }
        if (!giveaway.entriesLink) {
            var ct = giveaway.panel || giveaway.innerWrap.firstElementChild.nextElementSibling;
            if (ct.nextElementSibling) {
                giveaway.entries = parseInt(ct.nextElementSibling.textContent.replace(/,/g, ``));
            }
        }
        giveaway.levelColumn = giveaway.outerWrap.querySelector(`.giveaway__column--contributor-level, .featured__column--contributor-level`);
        giveaway.level = giveaway.levelColumn ? parseInt(giveaway.levelColumn.textContent.match(/\d+/)[0]) : 0;
        giveaway.inviteOnly = giveaway.outerWrap.querySelector(`.giveaway__column--invite-only, .featured__column--invite-only`);
        giveaway.regionRestricted = giveaway.outerWrap.querySelector(`.giveaway__column--region-restricted, .featured__column--region-restricted`);
        giveaway.group = giveaway.outerWrap.querySelector(`.giveaway__column--group, .featured__column--group`);
        giveaway.whitelist = giveaway.outerWrap.querySelector(`.giveaway__column--whitelist, .featured__column--whitelist`);
        giveaway.pinned = giveaway.outerWrap.closest(`.pinned-giveaways__outer-wrap`);
        chance = context.getElementsByClassName(`esgst-gwc`)[0];
        giveaway.chance = chance ? parseFloat(chance.getAttribute(`data-chance`)) : 0;
        return {
            giveaway: giveaway,
            data: {
                gameId: giveaway.gameId,
                gameSteamId: giveaway.id,
                gameType: giveaway.type,
                gameName: giveaway.name,
                code: giveaway.code,
                copies: giveaway.copies,
                points: giveaway.points,
                endTime: giveaway.endTime,
                startTime: giveaway.startTime,
                started: giveaway.started,
                creator: giveaway.creator,
                winners: giveaway.winners,
                entries: giveaway.entries,
                comments: giveaway.comments,
                level: giveaway.level,
                inviteOnly: giveaway.inviteOnly ? true : false,
                regionRestricted: giveaway.regionRestricted ? true : false,
                group: giveaway.group ? true : false,
                whitelist: giveaway.whitelist ? true : false
            }
        };
    }

    function startDiscussionFeatures() {
        if (esgst.discussionsPath) {
            esgst.endlessFeatures.push(loadDiscussionFeatures);
            loadDiscussionFeatures(document);
        }
    }

    function loadDiscussionFeatures(context) {
        var i, n, discussions;
        discussions = getDiscussions(document);
        for (i = 0, n = discussions.length; i < n; ++i) {
            esgst.discussions.push(discussions[i]);
        }
        for (i = 0, n = esgst.discussionFeatures.length; i < n; ++i) {
            esgst.discussionFeatures[i](discussions);
        }
    }

    function getDiscussions(context) {
        var discussion, discussions, elements, i, n, savedUsers;
        discussions = [];
        savedUsers = JSON.parse(GM_getValue(`users`));
        elements = context.getElementsByClassName(`table__row-outer-wrap`);
        for (i = elements.length - 1; i >= 0; --i) {
            discussion = getDiscussionInfo(elements[i], savedUsers);
            if (discussion) {
                discussions.push(discussion);
            }
        }
        return discussions;
    }

    function getDiscussionInfo(context, savedUsers) {
        var match, discussion, savedUser, uf;
        discussion = {};
        discussion.outerWrap = context;
        discussion.innerWrap = discussion.outerWrap.firstElementChild;
        discussion.firstColumn = discussion.innerWrap.firstElementChild.nextElementSibling;
        discussion.headingContainer = discussion.firstColumn.firstElementChild;
        discussion.info = discussion.headingContainer.nextElementSibling;
        discussion.heading = discussion.headingContainer.lastElementChild;
        discussion.title = discussion.heading.textContent;
        discussion.url = discussion.heading.getAttribute(`href`);
        if (discussion.url) {
            match = discussion.url.match(/discussion\/(.+?)\//);
            if (match) {
                discussion.code = match[1];
                discussion.created = discussion.info.firstElementChild.nextElementSibling;
                discussion.createdTime = parseInt(discussion.created.getAttribute(`data-timestamp`)) * 1e3;
                discussion.author = discussion.created.nextElementSibling.textContent;
                if (esgst.uf && savedUsers) {
                    savedUser = getUser(savedUsers, {
                        username: discussion.author
                    });
                    if (savedUser) {
                        uf = savedUser.uf;
                        if (esgst.uf_d && savedUser.blacklisted && !uf) {
                            updateUfCount(discussion.outerWrap.parentElement.parentElement.nextElementSibling);
                            discussion.outerWrap.remove();
                            return null;
                        } else if (uf && uf.discussions) {
                            updateUfCount(discussion.outerWrap.parentElement.parentElement.nextElementSibling);
                            discussion.outerWrap.remove();
                            return null;
                        }
                    }
                }
                return discussion;
            } else {
                return null;
            }
        } else {
            return null;
        }
    }

    function startCommentFeatures() {
        if (esgst.commentsPath || esgst.inboxPath) {
            esgst.endlessFeatures.push(loadCommentFeatures);
            loadCommentFeatures(document);
        }
    }

    function loadCommentFeatures(context, main, goToUnread, markRead, markUnread, mainContext) {
        var comments, i, n;
        if (!mainContext) {
            mainContext = document;
        }
        comments = getComments(context, mainContext);
        for (i = 0, n = esgst.commentFeatures.length; i < n; ++i) {
            esgst.commentFeatures[i](comments, goToUnread, markRead, markUnread);
        }
    }

    function getComments(context, mainContext) {
        var comment, comments, i, matches, n, sourceLink, savedUsers;
        comments = [];
        savedUsers = JSON.parse(GM_getValue(`users`));
        matches = context.querySelectorAll(`:not(.comment--submit) > .comment__parent, .comment__child, .comment_inner`);
        sourceLink = mainContext.querySelector(`.page__heading__breadcrumbs a[href*="/giveaway/"], .page__heading__breadcrumbs a[href*="/discussion/"], .page__heading__breadcrumbs a[href*="/ticket/"], .page_heading_breadcrumbs a[href*="/trade/"]`);
        for (i = matches.length - 1; i >= 0; --i) {
            comment = getCommentInfo(matches[i], sourceLink, savedUsers);
            if (comment) {
                comments.push(comment);
            }
        }
        return comments;
    }

    function getCommentInfo(context, sourceLink, savedUsers) {
        var comment, matches, n, source;
        comment = {};
        comment.comment = context;
        comment.author = comment.comment.querySelector(`.comment__author, .author_name`).textContent.trim();
                if (esgst.uf && savedUsers) {
                    var savedUser = getUser(savedUsers, {
                        username: comment.author
                    });
                    if (savedUser) {
                        var uf = savedUser.uf, comments, extraCount;
                        if (esgst.uf_p && savedUser.blacklisted && !uf) {
                            comments = comment.comment.closest(`.comments`);
                            if (esgst.inboxPath) {
                                updateUfCount(comments.parentElement.nextElementSibling);
                                comment.comment.parentElement.remove();
                                if (!comments.children.length) {
                                    comments.previousElementSibling.remove();
                                    comments.remove();
                                }
                            } else {
                                if (comment.comment.nextElementSibling) {
                                    extraCount = comment.comment.nextElementSibling.children.length;
                                } else {
                                    extraCount = 0;
                                }
                                updateUfCount(comments.nextElementSibling, extraCount);
                                comment.comment.parentElement.remove();
                            }
                            return null;
                        } else if (uf && uf.posts) {
                            comments = comment.comment.closest(`.comments`);
                            updateUfCount(comment.comment.closest(`.comments`).nextElementSibling);
                            if (esgst.inboxPath) {
                                updateUfCount(comments.parentElement.nextElementSibling);
                                comment.comment.parentElement.remove();
                                if (!comments.children.length) {
                                    comments.previousElementSibling.remove();
                                    comments.remove();
                                }
                            } else {
                                if (comment.comment.nextElementSibling) {
                                    extraCount = comment.comment.nextElementSibling.children.length;
                                } else {
                                    extraCount = 0;
                                }
                                updateUfCount(comments.nextElementSibling, extraCount);
                                comment.comment.parentElement.remove();
                            }
                            return null;
                        }
                    }
                }
        comment.actions = comment.comment.querySelector(`.comment__actions, .action_list`);
        matches = comment.actions.querySelectorAll(`[href*="/comment/"]`);
        n = matches.length;
        if (n > 0) {
            comment.permalink = matches[n - 1];
        }
        comment.id = comment.permalink ? comment.permalink.getAttribute(`href`).match(/\/comment\/(.+)/)[1] : ``;
        comment.timestamp = parseInt(comment.actions.firstElementChild.lastElementChild.getAttribute(`data-timestamp`));
        if (esgst.inboxPath) {
            if (esgst.sg) {
                source = comment.comment.closest(`.comments`).previousElementSibling.firstElementChild.firstElementChild.getAttribute(`href`);
            } else {
                source = comment.actions.querySelector(`[href*="/trade/"]`).getAttribute(`href`);
            }
        } else if (sourceLink) {
            source = sourceLink.getAttribute(`href`);
        }
        if (source) {
            source = source.match(/(giveaway|discussion|ticket|trade)\/(.+?)(\/.*)?$/);
            comment.type = `${source[1]}s`;
            comment.code = source[2];
            return comment;
        } else {
            return null;
        }
    }

    function startProfileFeatures() {
        if (esgst.userPath) {
            loadProfileFeatures(document);
        }
    }

    function loadProfileFeatures(context) {
        var element, elements, i, input, key, match, n, profile, savedUsers;
        profile = {};
        if (esgst.sg) {
            profile.heading = context.getElementsByClassName(`featured__heading`)[0];
            input = context.querySelector(`[name="child_user_id"]`);
            if (input) {
                profile.id = input.value;
            } else {
                profile.id = ``;
            }
            profile.username = profile.heading.textContent;
            profile.steamButtonContainer = context.getElementsByClassName(`sidebar__shortcut-outer-wrap`)[0];
            profile.steamButton = profile.steamButtonContainer.querySelector(`[href*="/profiles/"]`);
            profile.steamId = profile.steamButton.getAttribute(`href`).match(/\d+/)[0];
            profile.name = profile.username;
        } else {
            profile.heading = esgst.mainPageHeading;
            profile.id = ``;
            profile.username = ``;
            profile.steamButtonContainer = context.getElementsByClassName(`profile_links`)[0];
            profile.steamButton = profile.steamButtonContainer.querySelector(`[href*="/profiles/"]`);
            profile.steamId = profile.steamButton.getAttribute(`href`).match(/\d+/)[0];
            profile.name = profile.steamId;
        }
        elements = context.getElementsByClassName(`featured__table__row__left`);
        for (i = elements.length - 1; i >= 0; --i) {
            element = elements[i];
            match = element.textContent.match(/(Gifts (Won|Sent)|Contributor Level)/);
            if (match) {
                key = match[2];
                if (key) {
                    if (key === `Won`) {
                        profile.wonRow = element.parentElement;
                        profile.wonRowLeft = element;
                        profile.wonRowRight = element.nextElementSibling;
                    } else {
                        profile.sentRow = element.parentElement;
                        profile.sentRowLeft = element;
                        profile.sentRowRight = element.nextElementSibling;
                    }
                } else {
                    profile.levelRow = element.parentElement;
                    profile.levelRowLeft = element;
                    profile.levelRowRight = element.nextElementSibling;
                }
            }
        }
        savedUsers = JSON.parse(GM_getValue(`users`));
        for (i = 0, n = esgst.profileFeatures.length; i < n; ++i) {
            esgst.profileFeatures[i](profile, savedUsers.users[profile.steamId]);
        }
    }

    /* [UT] User Tags */

    function loadUt() {
        esgst.userFeatures.push(getUtTags);
    }

    function getUtTags(currentUsers) {
        var key, i, n, steamId, user, username;
        for (key in currentUsers) {
            steamId = esgst.sg ? esgst.users.steamIds[key] : key;
            username = esgst.sg ? key : esgst.users.users[key] && esgst.users.users[key].username;
            for (i = 0, n = currentUsers[key].length; i < n; ++i) {
                addPUTButton(currentUsers[key][i], steamId, username, key);
            }
            user = esgst.sg ? steamId && esgst.users.users[steamId] : esgst.users.users[key];
            if (user && user.tags) {
                addPUTTags(key, user.tags);
            }
        }
    }

    function addPUTButton(Context, steamId, username, key) {
        var Container;
        Container = Context.parentElement;
        if (Container.classList.contains("comment__username")) {
            Context = Container;
        }
        Context.insertAdjacentHTML(
            "afterEnd",
            "<a class=\"PUTButton\">" +
            "    <i class=\"fa fa-tag\"></i>" +
            "    <span class=\"PUTTags\"></span>" +
            "</a>"
        );
        Context.nextElementSibling.addEventListener("click", function () {
            var Popup;
            Popup = createPopup(true);
            Popup.Icon.classList.add("fa-tag");
            Popup.Title.innerHTML = "Edit user tags for <span>" + key + "</span>:";
            Popup.TextInput.classList.remove("rhHidden");
            Popup.TextInput.addEventListener(`keydown`, function(e) {
                if (e.key === `Enter`) {
                    Popup.Button.firstElementChild.click();
                }
            });
            var user = {
                steamId: steamId,
                username: username
            };
            Popup.TextInput.insertAdjacentHTML("afterEnd", createDescription("Use commas to separate tags, for example: Tag1, Tag2, ..."));
            createButton(Popup.Button, "fa-check", "Save", "fa-circle-o-notch fa-spin", "Saving...", function (Callback) {
                var tags;
                tags = Popup.TextInput.value.replace(/(,\s*)+/g, function (Match, P1, Offset, String) {
                    return (((Offset === 0) || (Offset == (String.length - Match.length))) ? "" : ", ");
                }).split(`, `);
                user.values = {
                    tags: tags
                };
                saveUser(null, null, user, function () {
                    addPUTTags(key, tags);
                    Callback();
                    Popup.Close.click();
                });
            });
            Popup.popUp(function () {
                var savedUser;
                savedUser = getUser(null, user);
                Popup.TextInput.focus();
                if (savedUser && savedUser.tags) {
                    Popup.TextInput.value = savedUser.tags.join(`, `);
                }
            });
        });
    }

    function addPUTTags(UserID, Tags) {
        var Matches, Prefix, Suffix, HTML, I, N, Context, Container;
        Matches = esgst.currentUsers[UserID];
        Prefix = "<span class=\"global__image-outer-wrap author_avatar is_icon\">";
        Suffix = "</span>";
        if (Tags.length && Tags[0]) {
            HTML = Prefix;
            HTML += Tags.join(Suffix + Prefix);
            HTML += Suffix;
        } else {
            HTML = ``;
        }
        for (I = 0, N = Matches.length; I < N; ++I) {
            Context = Matches[I];
            Container = Context.parentElement;
            if (Container) {
                if (Container.classList.contains("comment__username")) {
                    Context = Container;
                }
                Context.parentElement.getElementsByClassName("PUTTags")[0].innerHTML = HTML;
            }
        }
    }

    function startUserFeatures() {
        esgst.endlessFeatures.push(loadUserFeatures);
        loadUserFeatures(document);
    }

    function loadUserFeatures(context) {
        var currentUsers, element, elements, i, id, match, n, savedUsers;
        elements = context.querySelectorAll(`a[href*='/user/']`);
        currentUsers = {};
        for (i = 0, n = elements.length; i < n; ++i) {
            element = elements[i];
            match = element.getAttribute(`href`).match(/\/user\/(.+)/);
            if (match) {
                id = match[1];
                if (((esgst.sg && element.textContent === id) || (!esgst.sg && element.textContent && !element.children.length)) && !element.closest(`.markdown`)) {
                    if (!esgst.currentUsers[id]) {
                        esgst.currentUsers[id] = [];
                    }
                    if (!currentUsers[id]) {
                        currentUsers[id] = [];
                    }
                    esgst.currentUsers[id].push(element);
                    currentUsers[id].push(element);
                }
            }
        }
        var keys = Object.keys(currentUsers);
        var length = keys.length;
        if (length > 0) {
            if ((length > 1 || (keys[0] !== `cg` && keys[0] !== esgst.username)) && esgst.wbcButton && context === document) {
                esgst.wbcButton.classList.remove(`esgst-hidden`);
            }
            for (i = 0, n = esgst.userFeatures.length; i < n; ++i) {
                esgst.userFeatures[i](currentUsers);
            }
        }
    }

    function startGameFeatures() {
        esgst.endlessFeatures.push(loadGameFeatures);
        loadGameFeatures(document);
    }

    function loadGameFeatures(context) {
        var games, i, n;
        games = getGames(context);
        for (i = 0, n = esgst.gameFeatures.length; i < n; ++i) {
            esgst.gameFeatures[i](games);
        }
    }

    function getGames(context) {
        var games, heading, headingName, name, i, id, info, match, matches, n, headingQuery, matchesQuery, table, type;
        games = {
            apps: {},
            subs: {}
        };
        if (esgst.discussionPath && (esgst.gc_t || esgst.gt_t || esgst.egh_t)) {
            matchesQuery = `.featured__outer-wrap--giveaway, .giveaway__row-outer-wrap, .table__row-outer-wrap, .markdown table td`;
            headingQuery = `.featured__heading, .giveaway__heading, .table__column__heading, a`;
        } else {
            matchesQuery = `.featured__outer-wrap--giveaway, .giveaway__row-outer-wrap, .table__row-outer-wrap`;
            headingQuery = `.featured__heading, .giveaway__heading, .table__column__heading`;
        }
        matches = context.querySelectorAll(matchesQuery);
        for (i = 0, n = matches.length; i < n; ++i) {
            match = matches[i];
            if (match.closest(`table`)) {
                table = true;
            } else {
                table = false;
            }
            info = getGameInfo(match);
            heading = match.querySelector(headingQuery);
            if (info && heading) {
                headingName = heading.querySelector(`.featured__heading__medium, .giveaway__heading__name`) || heading;
                name = headingName.textContent;
                id = info.id;
                type = info.type;
                if (!games[type][id]) {
                    games[type][id] = [];
                }
                games[type][id].push({
                    container: match,
                    heading: heading,
                    headingName: headingName,
                    name: name,
                    table: table
                });
            }
        }
        return games;
    }

    function getGameInfo(context, steamLink) {
        var image, info, link, url;
        link = context.querySelector(`[href*="/app/"], [href*="/sub/"]`);
        image = context.querySelector(`[style*="/apps/"], [style*="/subs/"]`);
        if (link || image) {
            url = (link && link.getAttribute(`href`)) || (image && image.getAttribute(`style`));
            if (url) {
                info = url.match(/\/(app|sub)s?\/(\d+)/);
                return {
                    type: `${info[1]}s`,
                    id: info[2]
                };
            } else {
                return null;
            }
        } else {
            return null;
        }
    }

    /* [AP] Avatar Popout */

    function loadAp() {
        esgst.endlessFeatures.push(getApAvatars);
        getApAvatars(document);
        esgst.userFeatures.push(getInlineApAvatars);
    }

    function getApAvatars(context) {
        var i, matches, n;
        matches = context.querySelectorAll(`.global__image-outer-wrap--avatar-small, .giveaway_image_avatar, .table_image_avatar, .featured_giveaway_image_avatar`);
        for (i = 0, n = matches.length; i < n; ++i) {
            setApAvatar(matches[i]);
        }
    }

    function getInlineApAvatars(currentUsers) {
        var i, key, n;
        for (key in currentUsers) {
            for (i = 0, n = currentUsers[key].length; i < n; ++i) {
                setApAvatar(currentUsers[key][i]);
            }
        }
    }

    function setApAvatar(apAvatar) {
        var exitTimeout, id, match, popout, timeout, type, url;
        url = apAvatar.getAttribute(`href`);
        if (url) {
            match = url.match(/\/(user|group)\/(.+?)(\/.*)?$/);
            if (match) {
                id = match[2];
                type = match[1];
                apAvatar.addEventListener(`mouseenter`, function() {
                    timeout = window.setTimeout(function() {
                        popout = esgst.apPopouts[id];
                        if (popout) {
                            popout.open(apAvatar);
                        } else {
                            esgst.apPopouts[id] = popout = createPopout_v6(`page__outer-wrap esgst-ap-popout`);
                            popout.popout.innerHTML = `
                                <i class="fa fa-circle-o-notch fa-spin"></i>
                                <span>Loading ${type}...</span>
                            `;
                            popout.open(apAvatar);
                            request(null, false, url, function (response) {
                                var avatar, columns, i, link, n, reportButton, responseHtml, table;
                                responseHtml = DOM.parse(response.responseText);
                                popout.popout.innerHTML = ``;
                                popout.popout.appendChild(responseHtml.getElementsByClassName(`featured__outer-wrap`)[0]);
                                avatar = popout.popout.getElementsByClassName(`global__image-outer-wrap--avatar-large`)[0];
                                link = insertHtml(avatar, `afterEnd`, `<a class="esgst-ap-link"></a>`);
                                link.appendChild(avatar);
                                link.setAttribute(`href`, url);
                                table = popout.popout.getElementsByClassName(`featured__table`)[0];
                                responseHtml.getElementsByClassName(`sidebar__shortcut-outer-wrap`)[0].lastElementChild.remove();
                                table.parentElement.insertBefore(responseHtml.getElementsByClassName(`sidebar__shortcut-outer-wrap`)[0], table);
                                reportButton = popout.popout.getElementsByClassName(`js__submit-form-inner`)[0];
                                if (reportButton) {
                                    reportButton.addEventListener(`click`, function() {
                                        return reportButton.getElementsByTagName(`form`)[0].submit();
                                    });
                                }
                                columns = table.children;
                                for (i = 0, n = columns[1].children.length; i < n; ++i) {
                                    columns[0].appendChild(columns[1].firstElementChild);
                                }
                                columns[1].remove();
                                if (type === `user`) {
                                    loadProfileFeatures(popout.popout);
                                }
                                popout.reposition();
                            });
                        }
                        popout.popout.onmouseenter = function() {
                            if (exitTimeout) {
                                window.clearTimeout(exitTimeout);
                                exitTimeout = null;
                            }
                        };
                    }, 1000);
                });
                apAvatar.addEventListener(`mouseleave`, function(event) {
                    if (timeout) {
                        window.clearTimeout(timeout);
                        timeout = null;
                    }
                    exitTimeout = window.setTimeout(function() {
                        if (popout && !popout.popout.contains(event.relatedTarget)) {
                            popout.close();
                        }
                    }, 1000);
                });
                apAvatar.addEventListener(`click`, function() {
                    if (timeout) {
                        window.clearTimeout(timeout);
                        timeout = null;
                    }
                });
            }
        }
    }

    /* [ES] Endless Scrolling */

    function loadEs() {
        var pagination, context, currentPage, lastLink, lastPageMissing, nextPage, reversePages,
            esPageHeading,
            mainPaginationNavigationBackup,
            esRefreshButton, esPauseButton;
        if (((esgst.es_g && esgst.giveawaysPath) || (esgst.es_d && esgst.discussionsTicketsPath) || (esgst.es_t && esgst.tradesPath) || (esgst.es_c && esgst.commentsPath) || (esgst.es_l && !esgst.giveawaysPath && !esgst.discussionsTicketsPath && !esgst.tradesPath && !esgst.commentsPath)) && esgst.pagination) {
        pagination = esgst.pagination;
        context = pagination.previousElementSibling;
        if (esgst.paginationNavigation) {
            if (esgst.es_r && esgst.discussionPath) {
                if (esgst.currentPage == 1 && document.referrer.match(/\/discussions/)) {
                    pagination.classList.add(`esgst-hidden`);
                    context.classList.add(`esgst-hidden`);
                    lastLink = esgst.paginationNavigation.lastElementChild;
                    if (lastLink.classList.contains(`is-selected`) && lastLink.textContent.match(/Last/) && !esgst.lastPageLink) {
                        currentPage = parseInt(lastLink.getAttribute(`data-page-number`));
                    } else {
                        currentPage = 999999999;
                        lastPageMissing = true;
                    }
                    nextPage = currentPage;
                    reversePages = true;
                    activateEndlessScrolling();
                } else {
                    reverseComments(context);
                    currentPage = esgst.currentPage;
                    nextPage = currentPage - 1;
                    reversePages = false;
                    if (nextPage > 0) {
                        activateEndlessScrolling();
                    }
                }
            } else if (!esgst.paginationNavigation.lastElementChild.classList.contains(esgst.selectedClass)) {
                currentPage = esgst.currentPage;
                nextPage = currentPage + 1;
                activateEndlessScrolling();
            }
        } else if (esgst.es_r && esgst.discussionPath) {
            reverseComments(context);
        }
        }

        function activateEndlessScrolling() {
            var html;
            if (!esgst.fmph) {
                loadFmph();
            }
            esgst.mainPageHeadingPlaceholder.id = `esgst-es-page-${currentPage}`;
            mainPaginationNavigationBackup = esgst.paginationNavigation.innerHTML;
            if (!reversePages) {
                document.addEventListener(`scroll`, restoreMainPaginationNavigation);
            }
            html = `
<div class="page_heading_btn esgst-es-refresh-button" title="Refresh the current page">
<i class="fa fa-refresh"></i>
</div>
<div class="page_heading_btn esgst-es-pause-button" title="Pause the endless scrolling">
<i class="fa fa-pause"></i>
</div>
`;
            esgst.mainPageHeading.insertAdjacentHTML(`beforeEnd`, html);
            esPauseButton = esgst.mainPageHeading.lastElementChild;
            esRefreshButton = esPauseButton.previousElementSibling;
            esRefreshButton.addEventListener(`click`, refreshPage);
            esPauseButton.addEventListener(`click`, pauseEndlessScrolling);
            setEsPaginationNavigation();
            if (GM_getValue(`esPause`, false)) {
                esPauseButton.click();
            } else {
                document.addEventListener(`scroll`, loadNextPage);
                loadNextPage();
            }
        }

        function loadNextPage() {
            var html;
            if (window.scrollY >= (document.body.offsetHeight - (window.innerHeight * 2))) {
                document.removeEventListener(`scroll`, loadNextPage);
                if (reversePages) {
                    html = `
<div>
<i class="fa fa-circle-o-notch fa-spin"></i>
<span>Reversing pages...</span>
</div>
`;
                    esgst.mainPageHeading.insertAdjacentHTML(`afterBegin`, html);
                    esPageHeading = esgst.mainPageHeading.firstElementChild;
                } else {
                    html = `
<div class="${esgst.pageHeadingClass} esgst-es-page-heading">
<div class="${esgst.pageHeadingBreadcrumbsClass}">
<i class="fa fa-circle-o-notch fa-spin"></i>
<span>Loading next page...</span>
</div>
</div>
`;
                    pagination.insertAdjacentHTML(`afterEnd`, html);
                    esPageHeading = pagination.nextElementSibling;
                }
                makeRequest(null, `${esgst.searchUrl}${nextPage}`, null, setNextPage);
            }
        }

        function setNextPage(response) {
            var responseHtml, nextPageBackup, previousPaginationBackup, paginationNavigation, paginationNavigationBackup,
                paginationBackup, parent;
            nextPageBackup = nextPage;
            responseHtml = DOM.parse(response.responseText);
            previousPaginationBackup = pagination;
            pagination = responseHtml.getElementsByClassName(`pagination`)[0];
            context = pagination.previousElementSibling;
            paginationNavigation = pagination.getElementsByClassName(esgst.paginationNavigationClass)[0];
            paginationNavigationBackup = paginationNavigation.innerHTML;
            paginationBackup = pagination;
            if (reversePages) {
                esPageHeading.remove();
                esPageHeading = esgst.pagination;
                esgst.paginationNavigation.innerHTML = paginationNavigationBackup;
                setEsPaginationNavigation();
                reversePages = false;
            } else {
                esPageHeading.firstElementChild.innerHTML = `
<a href="${esgst.searchUrl}${nextPage}">Page ${nextPage}</a>
`;
                esPageHeading.id = `esgst-es-page-${nextPage}`;
            }
            parent = esPageHeading.parentElement;
            parent.insertBefore(context, esPageHeading.nextElementSibling);
            parent.insertBefore(pagination, context.nextElementSibling);
            loadEndlessFeatures(context, true);
            setESHide(context);
            setESRemoveEntry(context);
            if (esgst.es_r && esgst.discussionPath) {
                reverseComments(context);
                if (lastPageMissing) {
                    lastPageMissing = false;
                    currentPage = parseInt(paginationNavigation.lastElementChild.getAttribute(`data-page-number`));
                    nextPage = currentPage;
                    esgst.mainPageHeadingPlaceholder.id = `esgst-es-page-${currentPage}`;
                }
                --nextPage;
                if (nextPage > 0) {
                    document.addEventListener(`scroll`, loadNextPage);
                    loadNextPage();
                }
            } else {
                ++nextPage;
                if (!paginationNavigation.lastElementChild.classList.contains(esgst.selectedClass)) {
                    document.addEventListener(`scroll`, loadNextPage);
                    loadNextPage();
                }
            }
            paginationNavigation.remove();
            document.addEventListener(`scroll`, changePaginationNavigation);

            function changePaginationNavigation() {
                var pageTop, pageBottom;
                pageTop = previousPaginationBackup.offsetTop - esgst.pageTop;
                pageBottom = paginationBackup.offsetTop;
                if ((window.scrollY >= pageTop) && (window.scrollY <= pageBottom)) {
                    if (esgst.paginationNavigation.innerHTML != paginationNavigationBackup) {
                        esgst.paginationNavigation.innerHTML = paginationNavigationBackup;
                        lastLink = esgst.paginationNavigation.lastElementChild;
                        if (esgst.lastPageLink && esgst.lastPage !== nextPageBackup && !lastLink.classList.contains(`is-selected`) && !lastLink.textContent.match(/Last/)) {
                            esgst.paginationNavigation.insertAdjacentHTML(`beforeEnd`, esgst.lastPageLink);
                        }
                        setEsPaginationNavigation();
                    }
                }
            }
        }

        function restoreMainPaginationNavigation() {
            var mainPageBottom;
            mainPageBottom = esgst.pagination.offsetTop;
            if ((window.scrollY >= 0) && (window.scrollY <= mainPageBottom)) {
                if (esgst.paginationNavigation.innerHTML != mainPaginationNavigationBackup) {
                    esgst.paginationNavigation.innerHTML = mainPaginationNavigationBackup;
                    setEsPaginationNavigation();
                }
            }
        }

        function refreshPage() {
            var page;
            esRefreshButton.removeEventListener(`click`, refreshPage);
            esRefreshButton.innerHTML = `
<i class="fa fa-circle-o-notch fa-spin"></i>
`;
            page = window.location.href.match(/page=(\d+)/);
            if (page) {
                page = page[1];
            } else {
                page = 1;
            }
            makeRequest(null, window.location.href, null, setRefreshedPage);

            function setRefreshedPage(response) {
                var responseHtml, newContext, element, parent;
                responseHtml = DOM.parse(response.responseText);
                newContext = responseHtml.getElementsByClassName(`pagination`)[0].previousElementSibling;
                loadEndlessFeatures(newContext, true);
                setESHide(newContext);
                setESRemoveEntry(newContext);
                if (esgst.es_r && esgst.discussionPath) {
                    reverseComments(newContext);
                }
                element = document.getElementById(`esgst-es-page-${page}`);
                if (element.classList.contains(`esgst-fmph-placeholder`)) {
                    element = esgst.pagination.previousElementSibling.previousElementSibling;
                }
                if (esgst.gf.filtered) {
                    var hidden = element.nextElementSibling.getElementsByClassName(`giveaway__row-outer-wrap esgst-hidden`).length;
                    esgst.gf.filtered.textContent = parseInt(esgst.gf.filtered.textContent) - hidden;
                }
                element.nextElementSibling.remove();
                parent = element.parentElement;
                parent.insertBefore(newContext, element.nextElementSibling);
                esRefreshButton.innerHTML = `
<i class="fa fa-refresh"></i>
`;
                esRefreshButton.addEventListener(`click`, refreshPage);
            }
        }

        function pauseEndlessScrolling() {
            document.removeEventListener(`scroll`, loadNextPage);
            esPauseButton.removeEventListener(`click`, pauseEndlessScrolling);
            esPauseButton.title = `Resume the endless scrolling.`;
            esPauseButton.innerHTML = `
<i class="fa fa-play"></i>
`;
            GM_setValue(`esPause`, true);
            esPauseButton.addEventListener(`click`, resumeEndlessScrolling);
        }

        function resumeEndlessScrolling() {
            esPauseButton.removeEventListener(`click`, resumeEndlessScrolling);
            esPauseButton.title = `Pause the endless scrolling.`;
            esPauseButton.innerHTML = `
<i class="fa fa-pause"></i>
`;
            GM_setValue(`esPause`, false);
            esPauseButton.addEventListener(`click`, pauseEndlessScrolling);
            document.addEventListener(`scroll`, loadNextPage);
            loadNextPage();
        }
    }

    function reverseComments(context) {
        var i, n;
        var frag = document.createDocumentFragment();
        for (i = 0, n = context.children.length; i < n; ++i) {
            frag.appendChild(context.lastElementChild);
        }
        context.appendChild(frag);
    }

    function setEsPaginationNavigation() {
        var matches, i, n;
        matches = esgst.paginationNavigation.children;
        for (i = 0, n = matches.length; i < n; ++i) {
            matches[i].addEventListener(`click`, setEsPaginationNavigationItem);
        }
    }

    function setEsPaginationNavigationItem(event) {
        var page, id;
        event.preventDefault();
        page = event.currentTarget.getAttribute(`data-page-number`);
        id = `esgst-es-page-${page}`;
        if (document.getElementById(id)) {
            window.location.hash = id;
        } else {
            window.location.href = event.currentTarget.getAttribute(`href`);
        }
    }

    function setESHide(Context) {
        var Matches, I, N;
        Matches = Context.getElementsByClassName("giveaway__hide trigger-popup");
        for (I = 0, N = Matches.length; I < N; ++I) {
            Matches[I].addEventListener("click", function (Event) {
                var Popup, Giveaway;
                Popup = document.getElementsByClassName("popup--hide-games")[0];
                Giveaway = Event.currentTarget.closest(".giveaway__row-outer-wrap");
                Popup.querySelector("[name=game_id]").value = Giveaway.getAttribute("data-game-id");
                Popup.getElementsByClassName("popup__heading__bold")[0].textContent = Giveaway.getElementsByClassName("giveaway__heading__name")[0].textContent;
                $(Popup).bPopup().close();
                $(Popup).bPopup({
                    amsl: [0],
                    fadeSpeed: 200,
                    followSpeed: 500,
                    modalColor: "#3c424d",
                    opacity: 0.85
                });
            });
        }
    }

    function setESRemoveEntry(Context) {
        var Matches, I, N;
        Matches = Context.getElementsByClassName("table__row-inner-wrap");
        for (I = 0, N = Matches.length; I < N; ++I) {
            removeESEntry(Matches[I]);
        }
    }

    function removeESEntry(Context) {
        var Default, Loading, Complete, Data;
        Default = Context.getElementsByClassName("table__remove-default")[0];
        if (Default) {
            Loading = Default.nextElementSibling;
            Complete = Loading.nextElementSibling;
            Default.addEventListener("click", function () {
                var Values, I, N;
                Default.classList.toggle("is-hidden");
                Loading.classList.toggle("is-hidden");
                Values = Context.getElementsByTagName("input");
                Data = "";
                for (I = 0, N = Values.length; I < N; ++I) {
                    Data += Values[I].getAttribute("name") + "=" + Values[I].value + ((I < (N - 1)) ? "&" : "");
                }
                makeRequest(Data, "/ajax.php", null, function (Response) {
                    Loading.classList.toggle("is-hidden");
                    if (JSON.parse(Response.responseText).type == "success") {
                        Context.classList.add("is-faded");
                        Complete.classList.toggle("is-hidden");
                    } else {
                        Default.classList.toggle("is-hidden");
                    }
                });
            });
        }
    }

    function loadEndlessFeatures(Context, main) {
        for (var i = 0, n = esgst.endlessFeatures.length; i < n; ++i) {
            esgst.endlessFeatures[i](Context, main);
        }
    }

    /* [STO] Same Tab Opener */

    function loadSto() {
        esgst.endlessFeatures.push(setStoLinks);
        setStoLinks(document);
    }

    function setStoLinks(context) {
        var elements, i, n;
        elements = context.querySelectorAll(`[target="_blank"]`);
        for (i = 0, n = elements.length; i < n; ++i) {
            elements[i].removeAttribute(`target`);
        }
    }

    /* */

    function updateTemplateStorageToV6() {
        if (!GM_getValue(`templateStorageV6_3`, false)) {
            GM_setValue(`templates`, JSON.stringify(getTemplateStorageV6(GM_getValue(`Templates`, []))));
            GM_setValue(`templateStorageV6_3`, true);
        }
    }

    function getTemplateStorageV6(saved) {
        var i, n, templates;
        templates = [];
        for (i = 0, n = saved.length; i < n; ++i) {
            templates.push({
                delay: saved[i].Delay,
                description: saved[i].Description,
                duration: saved[i].Duration,
                groups: saved[i].Groups,
                level: saved[i].Level,
                name: saved[i].Name,
                region: saved[i].Region,
                type: saved[i].Type,
                whitelist: saved[i].Whitelist
            });
        }
        return templates;
    }

    function updateUserStorageToV6() {
        if (!GM_getValue(`userStorageV6`, false)) {
            GM_setValue(`users`, JSON.stringify(getUserStorageV6(GM_getValue(`Users`, []))));
            GM_setValue(`userStorageV6`, true);
        }
    }

    function getUserStorageV6(saved) {
        var i, n, users, steamId;
        users = {
            users: {},
            steamIds: {}
        };
        for (i = 0, n = saved.length; i < n; ++i) {
            steamId = saved[i].SteamID64;
            users.users[steamId] = {
                id: saved[i].ID,
                username: saved[i].Username
            };
            if (saved[i].Tags) {
                users.users[steamId].tags = saved[i].Tags.split(`, `);
            }
            if (saved[i].Notes) {
                users.users[steamId].notes = saved[i].Notes;
            }
            if (saved[i].Whitelisted) {
                users.users[steamId].whitelisted = true;
            }
            if (saved[i].Blacklisted) {
                users.users[steamId].blacklisted = true;
            }
            if (saved[i].WBC) {
                users.users[steamId].wbc = {
                    result: saved[i].WBC.Result ? saved[i].WBC.Result.replace(/^(.)/, function (m, p1) {
                        return p1.toLowerCase();
                    }) : ``,
                    giveaway: saved[i].WBC.Giveaway,
                    whitelistGiveaway: saved[i].WBC.WhitelistGiveaway,
                    groupGiveaways: saved[i].WBC.GroupGiveaways,
                    lastCheck: saved[i].WBC.LastSearch,
                    timestamp: saved[i].WBC.Timestamp
                };
            }
            if (saved[i].NAMWC) {
                users.users[steamId].namwc = {};
                if (saved[i].NAMWC.Results) {
                    users.users[steamId].namwc.results = {};
                    users.users[steamId].namwc.results.activated = saved[i].NAMWC.Results.Activated;
                    users.users[steamId].namwc.results.notActivated = saved[i].NAMWC.Results.NotActivated;
                    users.users[steamId].namwc.results.multiple = saved[i].NAMWC.Results.Multiple;
                    users.users[steamId].namwc.results.notMultiple = saved[i].NAMWC.Results.NotMultiple;
                    users.users[steamId].namwc.results.unknown = saved[i].NAMWC.Results.Unknown;
                }
                if (saved[i].NAMWC.LastSearch) {
                    users.users[steamId].namwc.lastCheck = saved[i].NAMWC.LastSearch;
                }
            }
            if (saved[i].NRF) {
                users.users[steamId].nrf = {};
                var found = saved[i].NRF.OverallProgress;
                found = found ? found.match(/(\d+) of (\d+)/) : null;
                if (found) {
                    users.users[steamId].nrf.found = parseInt(found[1]);
                    users.users[steamId].nrf.total = parseInt(found[2]);
                } else {
                    users.users[steamId].nrf.found = 0;
                    users.users[steamId].nrf.total = 0;
                }
                users.users[steamId].nrf.results = ``;
                var matches = DOM.parse(saved[i].NRF.Results).getElementsByClassName(`giveaway__summary`);
                for (var j = 0, nj = matches.length; j < nj; ++j) {
                    var outerWrap = document.createElement(`div`);
                    var innerWrap = document.createElement(`div`);
                    outerWrap.className = `giveaway__row-outer-wrap`;
                    innerWrap.className = `giveaway__row-inner-wrap`;
                    innerWrap.appendChild(matches[0]);
                    outerWrap.appendChild(innerWrap);
                    users.users[steamId].nrf.results += outerWrap.outerHTML;
                }
                users.users[steamId].nrf.lastCheck = saved[i].NRF.LastSearch;
            }
            if (saved[i].RWSCVL) {
                users.users[steamId].rwscvl = {
                    won: saved[i].RWSCVL.WonCV,
                    sent: saved[i].RWSCVL.SentCV,
                    lastCheck: saved[i].RWSCVL.LastSentCheck
                };
            }
            users.steamIds[saved[i].Username] = steamId;
        }
        return users;
    }

    function updateGameStorageToV6() {
        if (!GM_getValue(`v6GameStorage`, false)) {
            GM_setValue(`games`, JSON.stringify(getGameStorageV6(GM_getValue(`Games`, []))));
            GM_setValue(`v6GameStorage`, true);
        }
    }

    function getGameStorageV6(saved) {
        var games = {
            apps: {},
            subs: {}
        };
        for (var id in saved) {
            games.apps[id] = {};
            for (var subKey in saved[id]) {
                if (subKey === `Tags`) {
                    games.apps[id].tags = saved[id].Tags.split(`, `);
                } else if (subKey === `Entered`) {
                    games.apps[id].entered = saved[id].Entered;
                } else {
                    games.apps[id][subKey] = saved[id][subKey];
                }
            }
        }
        return games;
    }

    function updateCommentHistoryStorageToV6() {
        if (!GM_getValue(`sgCommentHistoryStorageV6`, false)) {
            GM_setValue(`sgCommentHistory`, JSON.stringify(getCommentHistoryStorageV6(GM_getValue(`CommentHistory`, ``))));
            GM_setValue(`sgCommentHistoryStorageV6`, true);
        }
    }

    function getCommentHistoryStorageV6(context) {
        var comments, i, id, match, n, saved;
        comments = [];
        saved = DOM.parse(context).getElementsByTagName(`div`);
        n = saved.length;
        if (n > 0) {
            for (i = 0, n = saved.length; i < n; ++i) {
                match = saved[i].lastElementChild;
                if (match) {
                    id = match.getAttribute(`href`).match(/\/go\/comment\/(.+)/);
                    if (id) {
                        comments.push({
                            id: id[1],
                            timestamp: parseInt(match.getAttribute(`data-timestamp`)) * 1e3
                        });
                    }
                }
            }
        }
        return comments;
    }

    function updateCommentStorageToV6() {
        if (!GM_getValue(`commentStorageV6_2`, false)) {
            GM_setValue(`comments`, JSON.stringify(getCommentStorageV6(GM_getValue(`Comments`, {}), GM_getValue(`Comments_ST`, {}))));
            GM_setValue(`commentStorageV6_2`, true);
        }
    }

    function getCommentStorageV6(savedSg, savedSt) {
        var comments, key, subKey;
        comments = {
            giveaways: {},
            discussions: {},
            tickets: {},
            trades: {}
        };
        for (key in savedSg) {
            if (!comments.discussions[key]) {
                comments.discussions[key] = {
                    comments: {}
                };
            }
            if (savedSg[key].Visited) {
                comments.discussions[key].visited = true;
            }
            if (savedSg[key].Highlighted) {
                comments.discussions[key].highlighted = true;
            }
            for (subKey in savedSg[key]) {
                if (!subKey.match(/^(Visited|Highlighted)$/)) {
                    comments.discussions[key].comments[subKey] = {
                        timestamp: savedSg[key][subKey]
                    };
                }
            }
            if (!comments.discussions[key].visited && !comments.discussions[key].highlighted && !Object.keys(comments.discussions[key].comments).length) {
                delete comments.discussions[key];
            }
        }
        for (key in savedSt) {
            if (!comments.trades[key]) {
                comments.trades[key] = {
                    comments: {}
                };
            }
            if (savedSt[key].Visited) {
                comments.trades[key].visited = true;
            }
            for (subKey in savedSt[key]) {
                if (!subKey.match(/^(Visited|Highlighted)$/)) {
                    comments.trades[key].comments[subKey] = {
                        timestamp: savedSt[key][subKey]
                    };
                }
            }
            if (!comments.trades[key].visited && !Object.keys(comments.trades[key].comments).length) {
                delete comments.trades[key];
            }
        }
        return comments;
    }

    function createAlert(message) {
        var popup;
        popup = createPopup_v6(`fa-exclamation`, message, true);
        popup.open();
    }

})();